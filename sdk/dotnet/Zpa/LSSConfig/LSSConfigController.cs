// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace zscaler.PulumiPackage.Zpa.LSSConfig
{
    /// <summary>
    /// The **zpa_lss_config_controller** resource creates and manages Log Streaming Service (LSS) in the Zscaler Private Access cloud.
    /// 
    /// ## Example 1 Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Zpa = Pulumi.Zpa;
    /// using Zpa = zscaler.PulumiPackage.Zpa;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var zpnAstAuthLog = Zpa.LSSConfig.GetLSSLogTypeFormats.Invoke(new()
    ///     {
    ///         LogType = "zpn_ast_auth_log",
    ///     });
    /// 
    ///     // Create Log Receiver Configuration
    ///     var example = new Zpa.LSSConfig.LSSConfigController("example", new()
    ///     {
    ///         Config = new Zpa.LSSConfig.Inputs.LSSConfigControllerConfigArgs
    ///         {
    ///             Name = "Example",
    ///             Description = "Example",
    ///             Enabled = true,
    ///             Format = zpnAstAuthLog.Apply(getLSSLogTypeFormatsResult =&gt; getLSSLogTypeFormatsResult.Json),
    ///             LssHost = "splunk.acme.com",
    ///             LssPort = "11000",
    ///             SourceLogType = "zpn_ast_auth_log",
    ///             UseTls = true,
    ///             Filters = new[]
    ///             {
    ///                 "ZPN_STATUS_AUTH_FAILED",
    ///                 "ZPN_STATUS_DISCONNECTED",
    ///                 "ZPN_STATUS_AUTHENTICATED",
    ///             },
    ///         },
    ///         ConnectorGroups = new[]
    ///         {
    ///             new Zpa.LSSConfig.Inputs.LSSConfigControllerConnectorGroupArgs
    ///             {
    ///                 Ids = new[]
    ///                 {
    ///                     zpa_app_connector_group.Example.Id,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Example 2 Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Zpa = Pulumi.Zpa;
    /// using Zpa = zscaler.PulumiPackage.Zpa;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var zpnTransLog = Zpa.LSSConfig.GetLSSLogTypeFormats.Invoke(new()
    ///     {
    ///         LogType = "zpn_trans_log",
    ///     });
    /// 
    ///     var lssSiemPolicy = Zpa.PolicyType.GetPolicyType.Invoke(new()
    ///     {
    ///         PolicyType = "SIEM_POLICY",
    ///     });
    /// 
    ///     var lssUserActivity = new Zpa.LSSConfig.LSSConfigController("lssUserActivity", new()
    ///     {
    ///         Config = new Zpa.LSSConfig.Inputs.LSSConfigControllerConfigArgs
    ///         {
    ///             Name = "LSS User Activity",
    ///             Description = "LSS User Activity",
    ///             Enabled = true,
    ///             Format = zpnTransLog.Apply(getLSSLogTypeFormatsResult =&gt; getLSSLogTypeFormatsResult.Json),
    ///             LssHost = "splunk.acme.com",
    ///             LssPort = "11001",
    ///             SourceLogType = "zpn_trans_log",
    ///             UseTls = true,
    ///         },
    ///         PolicyRuleResource = new Zpa.LSSConfig.Inputs.LSSConfigControllerPolicyRuleResourceArgs
    ///         {
    ///             Name = "policy_rule_resource-lss_user_activity",
    ///             Action = "ALLOW",
    ///             PolicySetId = lssSiemPolicy.Apply(getPolicyTypeResult =&gt; getPolicyTypeResult.Id),
    ///             Conditions = new[]
    ///             {
    ///                 new Zpa.LSSConfig.Inputs.LSSConfigControllerPolicyRuleResourceConditionArgs
    ///                 {
    ///                     Negated = false,
    ///                     Operator = "OR",
    ///                     Operands = new[]
    ///                     {
    ///                         new Zpa.LSSConfig.Inputs.LSSConfigControllerPolicyRuleResourceConditionOperandArgs
    ///                         {
    ///                             ObjectType = "CLIENT_TYPE",
    ///                             Values = new[]
    ///                             {
    ///                                 "zpn_client_type_exporter",
    ///                             },
    ///                         },
    ///                         new Zpa.LSSConfig.Inputs.LSSConfigControllerPolicyRuleResourceConditionOperandArgs
    ///                         {
    ///                             ObjectType = "CLIENT_TYPE",
    ///                             Values = new[]
    ///                             {
    ///                                 "zpn_client_type_ip_anchoring",
    ///                             },
    ///                         },
    ///                         new Zpa.LSSConfig.Inputs.LSSConfigControllerPolicyRuleResourceConditionOperandArgs
    ///                         {
    ///                             ObjectType = "CLIENT_TYPE",
    ///                             Values = new[]
    ///                             {
    ///                                 "zpn_client_type_zapp",
    ///                             },
    ///                         },
    ///                         new Zpa.LSSConfig.Inputs.LSSConfigControllerPolicyRuleResourceConditionOperandArgs
    ///                         {
    ///                             ObjectType = "CLIENT_TYPE",
    ///                             Values = new[]
    ///                             {
    ///                                 "zpn_client_type_edge_connector",
    ///                             },
    ///                         },
    ///                         new Zpa.LSSConfig.Inputs.LSSConfigControllerPolicyRuleResourceConditionOperandArgs
    ///                         {
    ///                             ObjectType = "CLIENT_TYPE",
    ///                             Values = new[]
    ///                             {
    ///                                 "zpn_client_type_machine_tunnel",
    ///                             },
    ///                         },
    ///                         new Zpa.LSSConfig.Inputs.LSSConfigControllerPolicyRuleResourceConditionOperandArgs
    ///                         {
    ///                             ObjectType = "CLIENT_TYPE",
    ///                             Values = new[]
    ///                             {
    ///                                 "zpn_client_type_browser_isolation",
    ///                             },
    ///                         },
    ///                         new Zpa.LSSConfig.Inputs.LSSConfigControllerPolicyRuleResourceConditionOperandArgs
    ///                         {
    ///                             ObjectType = "CLIENT_TYPE",
    ///                             Values = new[]
    ///                             {
    ///                                 "zpn_client_type_slogger",
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         ConnectorGroups = new[]
    ///         {
    ///             new Zpa.LSSConfig.Inputs.LSSConfigControllerConnectorGroupArgs
    ///             {
    ///                 Ids = new[]
    ///                 {
    ///                     zpa_app_connector_group.Example.Id,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language. [Visit](https://github.com/zscaler/zscaler-terraformer)
    /// </summary>
    [ZpaResourceType("zpa:LSSConfig/lSSConfigController:LSSConfigController")]
    public partial class LSSConfigController : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (Required)
        /// </summary>
        [Output("config")]
        public Output<Outputs.LSSConfigControllerConfig?> Config { get; private set; } = null!;

        /// <summary>
        /// (Optional)
        /// </summary>
        [Output("connectorGroups")]
        public Output<ImmutableArray<Outputs.LSSConfigControllerConnectorGroup>> ConnectorGroups { get; private set; } = null!;

        [Output("policyRuleId")]
        public Output<string> PolicyRuleId { get; private set; } = null!;

        /// <summary>
        /// (Optional)
        /// </summary>
        [Output("policyRuleResource")]
        public Output<Outputs.LSSConfigControllerPolicyRuleResource?> PolicyRuleResource { get; private set; } = null!;


        /// <summary>
        /// Create a LSSConfigController resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LSSConfigController(string name, LSSConfigControllerArgs? args = null, CustomResourceOptions? options = null)
            : base("zpa:LSSConfig/lSSConfigController:LSSConfigController", name, args ?? new LSSConfigControllerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LSSConfigController(string name, Input<string> id, LSSConfigControllerState? state = null, CustomResourceOptions? options = null)
            : base("zpa:LSSConfig/lSSConfigController:LSSConfigController", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/zscaler",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LSSConfigController resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LSSConfigController Get(string name, Input<string> id, LSSConfigControllerState? state = null, CustomResourceOptions? options = null)
        {
            return new LSSConfigController(name, id, state, options);
        }
    }

    public sealed class LSSConfigControllerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Required)
        /// </summary>
        [Input("config")]
        public Input<Inputs.LSSConfigControllerConfigArgs>? Config { get; set; }

        [Input("connectorGroups")]
        private InputList<Inputs.LSSConfigControllerConnectorGroupArgs>? _connectorGroups;

        /// <summary>
        /// (Optional)
        /// </summary>
        public InputList<Inputs.LSSConfigControllerConnectorGroupArgs> ConnectorGroups
        {
            get => _connectorGroups ?? (_connectorGroups = new InputList<Inputs.LSSConfigControllerConnectorGroupArgs>());
            set => _connectorGroups = value;
        }

        /// <summary>
        /// (Optional)
        /// </summary>
        [Input("policyRuleResource")]
        public Input<Inputs.LSSConfigControllerPolicyRuleResourceArgs>? PolicyRuleResource { get; set; }

        public LSSConfigControllerArgs()
        {
        }
        public static new LSSConfigControllerArgs Empty => new LSSConfigControllerArgs();
    }

    public sealed class LSSConfigControllerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Required)
        /// </summary>
        [Input("config")]
        public Input<Inputs.LSSConfigControllerConfigGetArgs>? Config { get; set; }

        [Input("connectorGroups")]
        private InputList<Inputs.LSSConfigControllerConnectorGroupGetArgs>? _connectorGroups;

        /// <summary>
        /// (Optional)
        /// </summary>
        public InputList<Inputs.LSSConfigControllerConnectorGroupGetArgs> ConnectorGroups
        {
            get => _connectorGroups ?? (_connectorGroups = new InputList<Inputs.LSSConfigControllerConnectorGroupGetArgs>());
            set => _connectorGroups = value;
        }

        [Input("policyRuleId")]
        public Input<string>? PolicyRuleId { get; set; }

        /// <summary>
        /// (Optional)
        /// </summary>
        [Input("policyRuleResource")]
        public Input<Inputs.LSSConfigControllerPolicyRuleResourceGetArgs>? PolicyRuleResource { get; set; }

        public LSSConfigControllerState()
        {
        }
        public static new LSSConfigControllerState Empty => new LSSConfigControllerState();
    }
}
