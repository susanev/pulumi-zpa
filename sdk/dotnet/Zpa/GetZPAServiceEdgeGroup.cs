// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace zscaler.PulumiPackage.Zpa
{
    public static class GetZPAServiceEdgeGroup
    {
        /// <summary>
        /// Use the **zpa_service_edge_group** data source to get information about a service edge group in the Zscaler Private Access cloud. This data source can then be referenced in an App Connector Group. This data source can then be referenced in the following resources:
        /// 
        /// * Create a server group
        /// * Provisioning Key
        /// * Access policy rule
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Zpa = Pulumi.Zpa;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Zpa.GetZPAServiceEdgeGroup.Invoke(new()
        ///     {
        ///         Name = "DataCenter",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Zpa = Pulumi.Zpa;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Zpa.GetZPAServiceEdgeGroup.Invoke(new()
        ///     {
        ///         Id = "123456789",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetZPAServiceEdgeGroupResult> InvokeAsync(GetZPAServiceEdgeGroupArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetZPAServiceEdgeGroupResult>("zpa:index/getZPAServiceEdgeGroup:getZPAServiceEdgeGroup", args ?? new GetZPAServiceEdgeGroupArgs(), options.WithDefaults());

        /// <summary>
        /// Use the **zpa_service_edge_group** data source to get information about a service edge group in the Zscaler Private Access cloud. This data source can then be referenced in an App Connector Group. This data source can then be referenced in the following resources:
        /// 
        /// * Create a server group
        /// * Provisioning Key
        /// * Access policy rule
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Zpa = Pulumi.Zpa;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Zpa.GetZPAServiceEdgeGroup.Invoke(new()
        ///     {
        ///         Name = "DataCenter",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Zpa = Pulumi.Zpa;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Zpa.GetZPAServiceEdgeGroup.Invoke(new()
        ///     {
        ///         Id = "123456789",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetZPAServiceEdgeGroupResult> Invoke(GetZPAServiceEdgeGroupInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetZPAServiceEdgeGroupResult>("zpa:index/getZPAServiceEdgeGroup:getZPAServiceEdgeGroup", args ?? new GetZPAServiceEdgeGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetZPAServiceEdgeGroupArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the service edge group to be exported.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The name of the service edge group to be exported.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetZPAServiceEdgeGroupArgs()
        {
        }
        public static new GetZPAServiceEdgeGroupArgs Empty => new GetZPAServiceEdgeGroupArgs();
    }

    public sealed class GetZPAServiceEdgeGroupInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the service edge group to be exported.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The name of the service edge group to be exported.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetZPAServiceEdgeGroupInvokeArgs()
        {
        }
        public static new GetZPAServiceEdgeGroupInvokeArgs Empty => new GetZPAServiceEdgeGroupInvokeArgs();
    }


    [OutputType]
    public sealed class GetZPAServiceEdgeGroupResult
    {
        /// <summary>
        /// (string) Whether Double Encryption is enabled or disabled for the app.
        /// </summary>
        public readonly string CityCountry;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string CountryCode;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string CreationTime;
        public readonly string Description;
        /// <summary>
        /// (bool) Whether this App Connector Group is enabled or not. Default value: `true`. Supported values: `true`, `false`
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string GeoLocationId;
        public readonly string Id;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string IsPublic;
        /// <summary>
        /// (string) Latitude of the Service Edge Group. Integer or decimal. With values in the range of `-90` to `90`
        /// </summary>
        public readonly string Latitude;
        /// <summary>
        /// (string) Location of the Service Edge Group.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// (string) Longitude of the Service Edge Group.Integer or decimal. With values in the range of `-180` to `180`
        /// </summary>
        public readonly string Longitude;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string ModifiedTime;
        public readonly string Modifiedby;
        public readonly string Name;
        /// <summary>
        /// (bool) Whether the default version profile of the App Connector Group is applied or overridden. Default: `false` Supported values: `true`, `false`
        /// </summary>
        public readonly bool OverrideVersionProfile;
        /// <summary>
        /// (string)
        /// * `name` (string)
        /// * `application_start_time` (string)
        /// * `service_edge_group_id` (string)
        /// * `service_edge_group_name` (string)
        /// * `control_channel_status` (string)
        /// * `creation_time` (string)
        /// * `modified_by` (string)
        /// * `modified_time` (string)
        /// * `ctrl_broker_name` (string)
        /// * `current_version` (string)
        /// * `expected_upgrade_time` (string)
        /// * `expected_version` (string)
        /// * `figerprint` (string)
        /// * `ip_acl` (string)
        /// * `issued_cert_id` (string)
        /// * `last_broker_connect_time` (string)
        /// * `last_broker_connect_time_duration` (string)
        /// * `last_broker_disconnect_time` (string)
        /// * `last_broker_disconnect_time_duration` (string)
        /// * `last_upgrade_time` (string)
        /// * `latitude` (string)
        /// * `listen_ips` (string)
        /// * `location` (string)
        /// * `longitude` (string)
        /// * `provisioning_key_id` (string)
        /// * `provisioning_key_name` (string)
        /// * `platform` (string)
        /// * `previous_version` (string)
        /// * `private_ip` (string)
        /// * `public_ip` (string)
        /// * `publish_ips` (string)
        /// * `sarge_version` (string)
        /// * `enrollment_cert` (string)
        /// * `upgrade_attempt` (string)
        /// * `upgrade_status` (string)
        /// </summary>
        public readonly ImmutableArray<Outputs.GetZPAServiceEdgeGroupServiceEdgeResult> ServiceEdges;
        /// <summary>
        /// (string)
        /// * `creation_time` (string)
        /// * `domain` (string)
        /// * `id` (string)
        /// * `master_customer_id` (string)
        /// * `modified_by` (string)
        /// * `modified_time` (string)
        /// * `name` (string)
        /// * `network_id` (string)
        /// * `zscaler_cloud` (string)
        /// </summary>
        public readonly ImmutableArray<Outputs.GetZPAServiceEdgeGroupTrustedNetworkResult> TrustedNetworks;
        /// <summary>
        /// (string) App Connectors in this group will attempt to update to a newer version of the software during this specified day
        /// </summary>
        public readonly string UpgradeDay;
        /// <summary>
        /// (string) App Connectors in this group will attempt to update to a newer version of the software during this specified time. Default value: `66600`. Integer in seconds (i.e., `-66600`). The integer should be greater than or equal to `0` and less than `86400`, in `15` minute intervals
        /// </summary>
        public readonly string UpgradeTimeInSecs;
        /// <summary>
        /// (String) ID of the version profile.
        /// Exported values are:
        /// * ``0`` = ``Default``
        /// * ``1`` = ``Previous Default``
        /// * ``2`` = ``New Release``
        /// </summary>
        public readonly string VersionProfileId;
        /// <summary>
        /// (String)
        /// Exported values are:
        /// * ``Default`` = ``0``
        /// * ``Previous Default`` = ``1``
        /// * ``New Release`` = ``2``
        /// </summary>
        public readonly string VersionProfileName;
        /// <summary>
        /// (string)
        /// Exported values are:
        /// * ``ALL``
        /// * ``NONE``
        /// * ``CUSTOM``
        /// </summary>
        public readonly string VersionProfileVisibilityScope;

        [OutputConstructor]
        private GetZPAServiceEdgeGroupResult(
            string cityCountry,

            string countryCode,

            string creationTime,

            string description,

            bool enabled,

            string geoLocationId,

            string id,

            string isPublic,

            string latitude,

            string location,

            string longitude,

            string modifiedTime,

            string modifiedby,

            string name,

            bool overrideVersionProfile,

            ImmutableArray<Outputs.GetZPAServiceEdgeGroupServiceEdgeResult> serviceEdges,

            ImmutableArray<Outputs.GetZPAServiceEdgeGroupTrustedNetworkResult> trustedNetworks,

            string upgradeDay,

            string upgradeTimeInSecs,

            string versionProfileId,

            string versionProfileName,

            string versionProfileVisibilityScope)
        {
            CityCountry = cityCountry;
            CountryCode = countryCode;
            CreationTime = creationTime;
            Description = description;
            Enabled = enabled;
            GeoLocationId = geoLocationId;
            Id = id;
            IsPublic = isPublic;
            Latitude = latitude;
            Location = location;
            Longitude = longitude;
            ModifiedTime = modifiedTime;
            Modifiedby = modifiedby;
            Name = name;
            OverrideVersionProfile = overrideVersionProfile;
            ServiceEdges = serviceEdges;
            TrustedNetworks = trustedNetworks;
            UpgradeDay = upgradeDay;
            UpgradeTimeInSecs = upgradeTimeInSecs;
            VersionProfileId = versionProfileId;
            VersionProfileName = versionProfileName;
            VersionProfileVisibilityScope = versionProfileVisibilityScope;
        }
    }
}
