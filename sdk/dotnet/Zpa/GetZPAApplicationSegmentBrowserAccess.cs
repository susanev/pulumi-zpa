// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace zscaler.PulumiPackage.Zpa
{
    public static class GetZPAApplicationSegmentBrowserAccess
    {
        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Zpa = Pulumi.Zpa;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Zpa.GetZPAApplicationSegmentBrowserAccess.Invoke(new()
        ///     {
        ///         Name = "example",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Zpa = Pulumi.Zpa;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Zpa.GetZPAApplicationSegmentBrowserAccess.Invoke(new()
        ///     {
        ///         Id = "123456789",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetZPAApplicationSegmentBrowserAccessResult> InvokeAsync(GetZPAApplicationSegmentBrowserAccessArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetZPAApplicationSegmentBrowserAccessResult>("zpa:index/getZPAApplicationSegmentBrowserAccess:getZPAApplicationSegmentBrowserAccess", args ?? new GetZPAApplicationSegmentBrowserAccessArgs(), options.WithDefaults());

        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Zpa = Pulumi.Zpa;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Zpa.GetZPAApplicationSegmentBrowserAccess.Invoke(new()
        ///     {
        ///         Name = "example",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Zpa = Pulumi.Zpa;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Zpa.GetZPAApplicationSegmentBrowserAccess.Invoke(new()
        ///     {
        ///         Id = "123456789",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetZPAApplicationSegmentBrowserAccessResult> Invoke(GetZPAApplicationSegmentBrowserAccessInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetZPAApplicationSegmentBrowserAccessResult>("zpa:index/getZPAApplicationSegmentBrowserAccess:getZPAApplicationSegmentBrowserAccess", args ?? new GetZPAApplicationSegmentBrowserAccessInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetZPAApplicationSegmentBrowserAccessArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// This field defines the id of the application server.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// This field defines the name of the server.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        [Input("tcpPortRanges")]
        private List<Inputs.GetZPAApplicationSegmentBrowserAccessTcpPortRangeArgs>? _tcpPortRanges;

        /// <summary>
        /// (string) TCP port ranges used to access the app.
        /// * `from:`
        /// * `to:`
        /// </summary>
        public List<Inputs.GetZPAApplicationSegmentBrowserAccessTcpPortRangeArgs> TcpPortRanges
        {
            get => _tcpPortRanges ?? (_tcpPortRanges = new List<Inputs.GetZPAApplicationSegmentBrowserAccessTcpPortRangeArgs>());
            set => _tcpPortRanges = value;
        }

        [Input("udpPortRanges")]
        private List<Inputs.GetZPAApplicationSegmentBrowserAccessUdpPortRangeArgs>? _udpPortRanges;

        /// <summary>
        /// (string) UDP port ranges used to access the app.
        /// * `from:`
        /// * `to:`
        /// </summary>
        public List<Inputs.GetZPAApplicationSegmentBrowserAccessUdpPortRangeArgs> UdpPortRanges
        {
            get => _udpPortRanges ?? (_udpPortRanges = new List<Inputs.GetZPAApplicationSegmentBrowserAccessUdpPortRangeArgs>());
            set => _udpPortRanges = value;
        }

        public GetZPAApplicationSegmentBrowserAccessArgs()
        {
        }
        public static new GetZPAApplicationSegmentBrowserAccessArgs Empty => new GetZPAApplicationSegmentBrowserAccessArgs();
    }

    public sealed class GetZPAApplicationSegmentBrowserAccessInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// This field defines the id of the application server.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// This field defines the name of the server.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tcpPortRanges")]
        private InputList<Inputs.GetZPAApplicationSegmentBrowserAccessTcpPortRangeInputArgs>? _tcpPortRanges;

        /// <summary>
        /// (string) TCP port ranges used to access the app.
        /// * `from:`
        /// * `to:`
        /// </summary>
        public InputList<Inputs.GetZPAApplicationSegmentBrowserAccessTcpPortRangeInputArgs> TcpPortRanges
        {
            get => _tcpPortRanges ?? (_tcpPortRanges = new InputList<Inputs.GetZPAApplicationSegmentBrowserAccessTcpPortRangeInputArgs>());
            set => _tcpPortRanges = value;
        }

        [Input("udpPortRanges")]
        private InputList<Inputs.GetZPAApplicationSegmentBrowserAccessUdpPortRangeInputArgs>? _udpPortRanges;

        /// <summary>
        /// (string) UDP port ranges used to access the app.
        /// * `from:`
        /// * `to:`
        /// </summary>
        public InputList<Inputs.GetZPAApplicationSegmentBrowserAccessUdpPortRangeInputArgs> UdpPortRanges
        {
            get => _udpPortRanges ?? (_udpPortRanges = new InputList<Inputs.GetZPAApplicationSegmentBrowserAccessUdpPortRangeInputArgs>());
            set => _udpPortRanges = value;
        }

        public GetZPAApplicationSegmentBrowserAccessInvokeArgs()
        {
        }
        public static new GetZPAApplicationSegmentBrowserAccessInvokeArgs Empty => new GetZPAApplicationSegmentBrowserAccessInvokeArgs();
    }


    [OutputType]
    public sealed class GetZPAApplicationSegmentBrowserAccessResult
    {
        /// <summary>
        /// (string) Indicates whether users can bypass ZPA to access applications. Default: `NEVER`. Supported values: `ALWAYS`, `NEVER`, `ON_NET`. The value `NEVER` indicates the use of the client forwarding policy.
        /// </summary>
        public readonly string BypassType;
        public readonly ImmutableArray<Outputs.GetZPAApplicationSegmentBrowserAccessClientlessAppResult> ClientlessApps;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string ConfigSpace;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// List of domains and IPs.
        /// </summary>
        public readonly ImmutableArray<string> DomainNames;
        /// <summary>
        /// (string) Whether Double Encryption is enabled or disabled for the app. Default: false. Boolean: `true`, `false`.
        /// </summary>
        public readonly bool DoubleEncrypt;
        /// <summary>
        /// (bool)
        /// </summary>
        public readonly bool Enabled;
        public readonly string HealthCheckType;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string HealthReporting;
        public readonly string? Id;
        /// <summary>
        /// (bool)
        /// </summary>
        public readonly bool IpAnchored;
        /// <summary>
        /// (bool) Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors. Default: true. Boolean: `true`, `false`.
        /// </summary>
        public readonly bool IsCnameEnabled;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// (bool)
        /// </summary>
        public readonly bool PassiveHealthEnabled;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string SegmentGroupId;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string SegmentGroupName;
        public readonly ImmutableArray<Outputs.GetZPAApplicationSegmentBrowserAccessServerGroupResult> ServerGroups;
        /// <summary>
        /// (string) TCP port ranges used to access the app.
        /// </summary>
        public readonly ImmutableArray<string> TcpPortRanges;
        /// <summary>
        /// (string) UDP port ranges used to access the app.
        /// </summary>
        public readonly ImmutableArray<string> UdpPortRanges;

        [OutputConstructor]
        private GetZPAApplicationSegmentBrowserAccessResult(
            string bypassType,

            ImmutableArray<Outputs.GetZPAApplicationSegmentBrowserAccessClientlessAppResult> clientlessApps,

            string configSpace,

            string description,

            ImmutableArray<string> domainNames,

            bool doubleEncrypt,

            bool enabled,

            string healthCheckType,

            string healthReporting,

            string? id,

            bool ipAnchored,

            bool isCnameEnabled,

            string? name,

            bool passiveHealthEnabled,

            string segmentGroupId,

            string segmentGroupName,

            ImmutableArray<Outputs.GetZPAApplicationSegmentBrowserAccessServerGroupResult> serverGroups,

            ImmutableArray<string> tcpPortRanges,

            ImmutableArray<string> udpPortRanges)
        {
            BypassType = bypassType;
            ClientlessApps = clientlessApps;
            ConfigSpace = configSpace;
            Description = description;
            DomainNames = domainNames;
            DoubleEncrypt = doubleEncrypt;
            Enabled = enabled;
            HealthCheckType = healthCheckType;
            HealthReporting = healthReporting;
            Id = id;
            IpAnchored = ipAnchored;
            IsCnameEnabled = isCnameEnabled;
            Name = name;
            PassiveHealthEnabled = passiveHealthEnabled;
            SegmentGroupId = segmentGroupId;
            SegmentGroupName = segmentGroupName;
            ServerGroups = serverGroups;
            TcpPortRanges = tcpPortRanges;
            UdpPortRanges = udpPortRanges;
        }
    }
}
