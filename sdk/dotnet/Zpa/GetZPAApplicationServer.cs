// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace zscaler.PulumiPackage.Zpa
{
    public static class GetZPAApplicationServer
    {
        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Zpa = Pulumi.Zpa;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Zpa.GetZPAApplicationServer.Invoke(new()
        ///     {
        ///         Name = "server.example.com",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Zpa = Pulumi.Zpa;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Zpa.GetZPAApplicationServer.Invoke(new()
        ///     {
        ///         Id = "1234567890",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetZPAApplicationServerResult> InvokeAsync(GetZPAApplicationServerArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetZPAApplicationServerResult>("zpa:index/getZPAApplicationServer:getZPAApplicationServer", args ?? new GetZPAApplicationServerArgs(), options.WithDefaults());

        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Zpa = Pulumi.Zpa;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Zpa.GetZPAApplicationServer.Invoke(new()
        ///     {
        ///         Name = "server.example.com",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Zpa = Pulumi.Zpa;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Zpa.GetZPAApplicationServer.Invoke(new()
        ///     {
        ///         Id = "1234567890",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetZPAApplicationServerResult> Invoke(GetZPAApplicationServerInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetZPAApplicationServerResult>("zpa:index/getZPAApplicationServer:getZPAApplicationServer", args ?? new GetZPAApplicationServerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetZPAApplicationServerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// This field defines the id of the application server.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// This field defines the name of the server.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetZPAApplicationServerArgs()
        {
        }
        public static new GetZPAApplicationServerArgs Empty => new GetZPAApplicationServerArgs();
    }

    public sealed class GetZPAApplicationServerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// This field defines the id of the application server.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// This field defines the name of the server.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetZPAApplicationServerInvokeArgs()
        {
        }
        public static new GetZPAApplicationServerInvokeArgs Empty => new GetZPAApplicationServerInvokeArgs();
    }


    [OutputType]
    public sealed class GetZPAApplicationServerResult
    {
        /// <summary>
        /// (string) This field defines the domain or IP address of the server.
        /// </summary>
        public readonly string Address;
        /// <summary>
        /// (Set of String) This field defines the list of server groups IDs.
        /// </summary>
        public readonly ImmutableArray<string> AppServerGroupIds;
        public readonly string ConfigSpace;
        public readonly string CreationTime;
        /// <summary>
        /// (string) This field defines the description of the server.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// (bool) This field defines the status of the server.
        /// </summary>
        public readonly bool Enabled;
        public readonly string? Id;
        public readonly string ModifiedTime;
        public readonly string Modifiedby;
        public readonly string? Name;

        [OutputConstructor]
        private GetZPAApplicationServerResult(
            string address,

            ImmutableArray<string> appServerGroupIds,

            string configSpace,

            string creationTime,

            string description,

            bool enabled,

            string? id,

            string modifiedTime,

            string modifiedby,

            string? name)
        {
            Address = address;
            AppServerGroupIds = appServerGroupIds;
            ConfigSpace = configSpace;
            CreationTime = creationTime;
            Description = description;
            Enabled = enabled;
            Id = id;
            ModifiedTime = modifiedTime;
            Modifiedby = modifiedby;
            Name = name;
        }
    }
}
