// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace zscaler.PulumiPackage.Zpa
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Zpa = zscaler.PulumiPackage.Zpa;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create a App Connector Group
    ///     var exampleZPAAppConnectorGroup = new Zpa.ZPAAppConnectorGroup("exampleZPAAppConnectorGroup", new()
    ///     {
    ///         Description = "Example",
    ///         Enabled = true,
    ///         CityCountry = "San Jose, CA",
    ///         CountryCode = "US",
    ///         Latitude = "37.338",
    ///         Longitude = "-121.8863",
    ///         Location = "San Jose, CA, US",
    ///         UpgradeDay = "SUNDAY",
    ///         UpgradeTimeInSecs = "66600",
    ///         OverrideVersionProfile = true,
    ///         VersionProfileId = "0",
    ///         DnsQueryType = "IPV4",
    ///     });
    /// 
    ///     // Create a Server Group resource with Dynamic Discovery Enabled
    ///     var exampleZPAServerGroup = new Zpa.ZPAServerGroup("exampleZPAServerGroup", new()
    ///     {
    ///         Description = "Example",
    ///         Enabled = true,
    ///         DynamicDiscovery = true,
    ///         AppConnectorGroups = new[]
    ///         {
    ///             new Zpa.Inputs.ZPAServerGroupAppConnectorGroupArgs
    ///             {
    ///                 Ids = new[]
    ///                 {
    ///                     exampleZPAAppConnectorGroup.Id,
    ///                 },
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             exampleZPAAppConnectorGroup,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Zpa = zscaler.PulumiPackage.Zpa;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create an application server
    ///     var exampleZPAApplicationServer = new Zpa.ZPAApplicationServer("exampleZPAApplicationServer", new()
    ///     {
    ///         Description = "Example",
    ///         Address = "server.example.com",
    ///         Enabled = true,
    ///     });
    /// 
    ///     // Create a App Connector Group
    ///     var exampleZPAAppConnectorGroup = new Zpa.ZPAAppConnectorGroup("exampleZPAAppConnectorGroup", new()
    ///     {
    ///         Description = "Example",
    ///         Enabled = true,
    ///         CityCountry = "San Jose, CA",
    ///         CountryCode = "US",
    ///         Latitude = "37.338",
    ///         Longitude = "-121.8863",
    ///         Location = "San Jose, CA, US",
    ///         UpgradeDay = "SUNDAY",
    ///         UpgradeTimeInSecs = "66600",
    ///         OverrideVersionProfile = true,
    ///         VersionProfileId = "0",
    ///         DnsQueryType = "IPV4",
    ///     });
    /// 
    ///     // ZPA Server Group resource with Dynamic Discovery Disabled
    ///     var exampleZPAServerGroup = new Zpa.ZPAServerGroup("exampleZPAServerGroup", new()
    ///     {
    ///         Description = "Example",
    ///         Enabled = true,
    ///         DynamicDiscovery = false,
    ///         Servers = new[]
    ///         {
    ///             new Zpa.Inputs.ZPAServerGroupServerArgs
    ///             {
    ///                 Ids = new[]
    ///                 {
    ///                     exampleZPAApplicationServer.Id,
    ///                 },
    ///             },
    ///         },
    ///         AppConnectorGroups = new[]
    ///         {
    ///             new Zpa.Inputs.ZPAServerGroupAppConnectorGroupArgs
    ///             {
    ///                 Ids = new[]
    ///                 {
    ///                     exampleZPAAppConnectorGroup.Id,
    ///                 },
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             exampleZPAAppConnectorGroup,
    ///             zpa_application_server.Server,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Required
    /// 
    /// * `name` - (Required) This field defines the name of the server group.
    /// * `app_connector_groups` - (Required)
    ///   * `id` - (Required) The ID of this resource.
    /// 
    /// ## Import
    /// 
    /// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language. [Visit](https://github.com/zscaler/zscaler-terraformer) Server Groups can be imported; use `&lt;SERVER GROUP ID&gt;` or `&lt;SERVER GROUP NAME&gt;` as the import ID. For example
    /// 
    /// ```sh
    ///  $ pulumi import zpa:index/zPAServerGroup:ZPAServerGroup example &lt;server_group_id&gt;
    /// ```
    /// 
    ///  or
    /// 
    /// ```sh
    ///  $ pulumi import zpa:index/zPAServerGroup:ZPAServerGroup example &lt;server_group_name&gt;
    /// ```
    /// </summary>
    [ZpaResourceType("zpa:index/zPAServerGroup:ZPAServerGroup")]
    public partial class ZPAServerGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// List of app-connector IDs.
        /// </summary>
        [Output("appConnectorGroups")]
        public Output<ImmutableArray<Outputs.ZPAServerGroupAppConnectorGroup>> AppConnectorGroups { get; private set; } = null!;

        /// <summary>
        /// This field is a json array of app-connector-id only.
        /// </summary>
        [Output("applications")]
        public Output<ImmutableArray<Outputs.ZPAServerGroupApplication>> Applications { get; private set; } = null!;

        [Output("configSpace")]
        public Output<string?> ConfigSpace { get; private set; } = null!;

        /// <summary>
        /// (Optional) This field is the description of the server group.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// (Optional) This field controls dynamic discovery of the servers.
        /// </summary>
        [Output("dynamicDiscovery")]
        public Output<bool?> DynamicDiscovery { get; private set; } = null!;

        /// <summary>
        /// (Optional) This field defines if the server group is enabled or disabled.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        [Output("ipAnchored")]
        public Output<bool?> IpAnchored { get; private set; } = null!;

        /// <summary>
        /// This field defines the name of the server group.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// (Block List) This field is a list of servers that are applicable only when dynamic discovery is disabled. Server name is required only in cases where the new servers need to be created in this API.
        /// </summary>
        [Output("servers")]
        public Output<ImmutableArray<Outputs.ZPAServerGroupServer>> Servers { get; private set; } = null!;


        /// <summary>
        /// Create a ZPAServerGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ZPAServerGroup(string name, ZPAServerGroupArgs? args = null, CustomResourceOptions? options = null)
            : base("zpa:index/zPAServerGroup:ZPAServerGroup", name, args ?? new ZPAServerGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ZPAServerGroup(string name, Input<string> id, ZPAServerGroupState? state = null, CustomResourceOptions? options = null)
            : base("zpa:index/zPAServerGroup:ZPAServerGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ZPAServerGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ZPAServerGroup Get(string name, Input<string> id, ZPAServerGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new ZPAServerGroup(name, id, state, options);
        }
    }

    public sealed class ZPAServerGroupArgs : global::Pulumi.ResourceArgs
    {
        [Input("appConnectorGroups")]
        private InputList<Inputs.ZPAServerGroupAppConnectorGroupArgs>? _appConnectorGroups;

        /// <summary>
        /// List of app-connector IDs.
        /// </summary>
        public InputList<Inputs.ZPAServerGroupAppConnectorGroupArgs> AppConnectorGroups
        {
            get => _appConnectorGroups ?? (_appConnectorGroups = new InputList<Inputs.ZPAServerGroupAppConnectorGroupArgs>());
            set => _appConnectorGroups = value;
        }

        [Input("applications")]
        private InputList<Inputs.ZPAServerGroupApplicationArgs>? _applications;

        /// <summary>
        /// This field is a json array of app-connector-id only.
        /// </summary>
        public InputList<Inputs.ZPAServerGroupApplicationArgs> Applications
        {
            get => _applications ?? (_applications = new InputList<Inputs.ZPAServerGroupApplicationArgs>());
            set => _applications = value;
        }

        [Input("configSpace")]
        public Input<string>? ConfigSpace { get; set; }

        /// <summary>
        /// (Optional) This field is the description of the server group.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Optional) This field controls dynamic discovery of the servers.
        /// </summary>
        [Input("dynamicDiscovery")]
        public Input<bool>? DynamicDiscovery { get; set; }

        /// <summary>
        /// (Optional) This field defines if the server group is enabled or disabled.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("ipAnchored")]
        public Input<bool>? IpAnchored { get; set; }

        /// <summary>
        /// This field defines the name of the server group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("servers")]
        private InputList<Inputs.ZPAServerGroupServerArgs>? _servers;

        /// <summary>
        /// (Block List) This field is a list of servers that are applicable only when dynamic discovery is disabled. Server name is required only in cases where the new servers need to be created in this API.
        /// </summary>
        public InputList<Inputs.ZPAServerGroupServerArgs> Servers
        {
            get => _servers ?? (_servers = new InputList<Inputs.ZPAServerGroupServerArgs>());
            set => _servers = value;
        }

        public ZPAServerGroupArgs()
        {
        }
        public static new ZPAServerGroupArgs Empty => new ZPAServerGroupArgs();
    }

    public sealed class ZPAServerGroupState : global::Pulumi.ResourceArgs
    {
        [Input("appConnectorGroups")]
        private InputList<Inputs.ZPAServerGroupAppConnectorGroupGetArgs>? _appConnectorGroups;

        /// <summary>
        /// List of app-connector IDs.
        /// </summary>
        public InputList<Inputs.ZPAServerGroupAppConnectorGroupGetArgs> AppConnectorGroups
        {
            get => _appConnectorGroups ?? (_appConnectorGroups = new InputList<Inputs.ZPAServerGroupAppConnectorGroupGetArgs>());
            set => _appConnectorGroups = value;
        }

        [Input("applications")]
        private InputList<Inputs.ZPAServerGroupApplicationGetArgs>? _applications;

        /// <summary>
        /// This field is a json array of app-connector-id only.
        /// </summary>
        public InputList<Inputs.ZPAServerGroupApplicationGetArgs> Applications
        {
            get => _applications ?? (_applications = new InputList<Inputs.ZPAServerGroupApplicationGetArgs>());
            set => _applications = value;
        }

        [Input("configSpace")]
        public Input<string>? ConfigSpace { get; set; }

        /// <summary>
        /// (Optional) This field is the description of the server group.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Optional) This field controls dynamic discovery of the servers.
        /// </summary>
        [Input("dynamicDiscovery")]
        public Input<bool>? DynamicDiscovery { get; set; }

        /// <summary>
        /// (Optional) This field defines if the server group is enabled or disabled.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("ipAnchored")]
        public Input<bool>? IpAnchored { get; set; }

        /// <summary>
        /// This field defines the name of the server group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("servers")]
        private InputList<Inputs.ZPAServerGroupServerGetArgs>? _servers;

        /// <summary>
        /// (Block List) This field is a list of servers that are applicable only when dynamic discovery is disabled. Server name is required only in cases where the new servers need to be created in this API.
        /// </summary>
        public InputList<Inputs.ZPAServerGroupServerGetArgs> Servers
        {
            get => _servers ?? (_servers = new InputList<Inputs.ZPAServerGroupServerGetArgs>());
            set => _servers = value;
        }

        public ZPAServerGroupState()
        {
        }
        public static new ZPAServerGroupState Empty => new ZPAServerGroupState();
    }
}
