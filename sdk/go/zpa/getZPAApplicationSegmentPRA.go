// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zpa

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use the **zpa_application_segment_pra** data source to get information about an application segment for Privileged Remote Access in the Zscaler Private Access cloud. This resource can then be referenced in an access policy rule, access policy timeout rule, access policy client forwarding rule and inspection policy. This resource supports Privileged Remote Access for both `RDP` and `SSH`.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zpa/sdk/go/zpa"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := zpa.LookupZPAApplicationSegmentPRA(ctx, &zpa.LookupZPAApplicationSegmentPRAArgs{
//				Name: pulumi.StringRef("PRA_Example"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zpa/sdk/go/zpa"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := zpa.LookupZPAApplicationSegmentPRA(ctx, &zpa.LookupZPAApplicationSegmentPRAArgs{
//				Id: pulumi.StringRef("123456789"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupZPAApplicationSegmentPRA(ctx *pulumi.Context, args *LookupZPAApplicationSegmentPRAArgs, opts ...pulumi.InvokeOption) (*LookupZPAApplicationSegmentPRAResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupZPAApplicationSegmentPRAResult
	err := ctx.Invoke("zpa:index/getZPAApplicationSegmentPRA:getZPAApplicationSegmentPRA", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getZPAApplicationSegmentPRA.
type LookupZPAApplicationSegmentPRAArgs struct {
	Id *string `pulumi:"id"`
	// The name of the PRA Application Segment to be exported.
	Name *string `pulumi:"name"`
	// (string) TCP port ranges used to access the app.
	// * `from:`
	// * `to:`
	TcpPortRanges []GetZPAApplicationSegmentPRATcpPortRange `pulumi:"tcpPortRanges"`
	// (string) UDP port ranges used to access the app.
	// * `from:`
	// * `to:`
	UdpPortRanges []GetZPAApplicationSegmentPRAUdpPortRange `pulumi:"udpPortRanges"`
}

// A collection of values returned by getZPAApplicationSegmentPRA.
type LookupZPAApplicationSegmentPRAResult struct {
	// (string) Indicates whether users can bypass ZPA to access applications.
	BypassType string `pulumi:"bypassType"`
	// (string)
	ConfigSpace string `pulumi:"configSpace"`
	// (string) Description of the application.
	Description string `pulumi:"description"`
	// (string) List of domains and IPs.
	DomainNames []string `pulumi:"domainNames"`
	// (bool) Whether Double Encryption is enabled or disabled for the app.
	DoubleEncrypt bool `pulumi:"doubleEncrypt"`
	// (bool) Whether this application is enabled or not
	Enabled bool `pulumi:"enabled"`
	// (string)
	HealthCheckType string `pulumi:"healthCheckType"`
	// (string) Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.
	HealthReporting string  `pulumi:"healthReporting"`
	Id              *string `pulumi:"id"`
	// (bool)
	IpAnchored bool `pulumi:"ipAnchored"`
	// (bool) Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors.
	IsCnameEnabled bool    `pulumi:"isCnameEnabled"`
	Name           *string `pulumi:"name"`
	// (bool)
	PassiveHealthEnabled bool `pulumi:"passiveHealthEnabled"`
	// (String) Segment Group IDs
	SegmentGroupId   string `pulumi:"segmentGroupId"`
	SegmentGroupName string `pulumi:"segmentGroupName"`
	// (string) List of Server Group IDs
	// * `id:` - (string) List of Server Group IDs
	ServerGroups []GetZPAApplicationSegmentPRAServerGroup `pulumi:"serverGroups"`
	// (string) TCP port ranges used to access the app.
	// * `app_id:` - (string)
	// * `name:` - (string) Name of the Privileged Remote Access
	// * `description:` - (string) Description of the Privileged Remote Access
	// * `domain:` - (string) Domain name of the Privileged Remote Access
	SraApps []GetZPAApplicationSegmentPRASraApp `pulumi:"sraApps"`
	// (string) TCP port ranges used to access the app.
	TcpPortRanges []string `pulumi:"tcpPortRanges"`
	// (string) UDP port ranges used to access the app.
	UdpPortRanges []string `pulumi:"udpPortRanges"`
}

func LookupZPAApplicationSegmentPRAOutput(ctx *pulumi.Context, args LookupZPAApplicationSegmentPRAOutputArgs, opts ...pulumi.InvokeOption) LookupZPAApplicationSegmentPRAResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupZPAApplicationSegmentPRAResult, error) {
			args := v.(LookupZPAApplicationSegmentPRAArgs)
			r, err := LookupZPAApplicationSegmentPRA(ctx, &args, opts...)
			var s LookupZPAApplicationSegmentPRAResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupZPAApplicationSegmentPRAResultOutput)
}

// A collection of arguments for invoking getZPAApplicationSegmentPRA.
type LookupZPAApplicationSegmentPRAOutputArgs struct {
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the PRA Application Segment to be exported.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// (string) TCP port ranges used to access the app.
	// * `from:`
	// * `to:`
	TcpPortRanges GetZPAApplicationSegmentPRATcpPortRangeArrayInput `pulumi:"tcpPortRanges"`
	// (string) UDP port ranges used to access the app.
	// * `from:`
	// * `to:`
	UdpPortRanges GetZPAApplicationSegmentPRAUdpPortRangeArrayInput `pulumi:"udpPortRanges"`
}

func (LookupZPAApplicationSegmentPRAOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupZPAApplicationSegmentPRAArgs)(nil)).Elem()
}

// A collection of values returned by getZPAApplicationSegmentPRA.
type LookupZPAApplicationSegmentPRAResultOutput struct{ *pulumi.OutputState }

func (LookupZPAApplicationSegmentPRAResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupZPAApplicationSegmentPRAResult)(nil)).Elem()
}

func (o LookupZPAApplicationSegmentPRAResultOutput) ToLookupZPAApplicationSegmentPRAResultOutput() LookupZPAApplicationSegmentPRAResultOutput {
	return o
}

func (o LookupZPAApplicationSegmentPRAResultOutput) ToLookupZPAApplicationSegmentPRAResultOutputWithContext(ctx context.Context) LookupZPAApplicationSegmentPRAResultOutput {
	return o
}

// (string) Indicates whether users can bypass ZPA to access applications.
func (o LookupZPAApplicationSegmentPRAResultOutput) BypassType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZPAApplicationSegmentPRAResult) string { return v.BypassType }).(pulumi.StringOutput)
}

// (string)
func (o LookupZPAApplicationSegmentPRAResultOutput) ConfigSpace() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZPAApplicationSegmentPRAResult) string { return v.ConfigSpace }).(pulumi.StringOutput)
}

// (string) Description of the application.
func (o LookupZPAApplicationSegmentPRAResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZPAApplicationSegmentPRAResult) string { return v.Description }).(pulumi.StringOutput)
}

// (string) List of domains and IPs.
func (o LookupZPAApplicationSegmentPRAResultOutput) DomainNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupZPAApplicationSegmentPRAResult) []string { return v.DomainNames }).(pulumi.StringArrayOutput)
}

// (bool) Whether Double Encryption is enabled or disabled for the app.
func (o LookupZPAApplicationSegmentPRAResultOutput) DoubleEncrypt() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupZPAApplicationSegmentPRAResult) bool { return v.DoubleEncrypt }).(pulumi.BoolOutput)
}

// (bool) Whether this application is enabled or not
func (o LookupZPAApplicationSegmentPRAResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupZPAApplicationSegmentPRAResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// (string)
func (o LookupZPAApplicationSegmentPRAResultOutput) HealthCheckType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZPAApplicationSegmentPRAResult) string { return v.HealthCheckType }).(pulumi.StringOutput)
}

// (string) Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.
func (o LookupZPAApplicationSegmentPRAResultOutput) HealthReporting() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZPAApplicationSegmentPRAResult) string { return v.HealthReporting }).(pulumi.StringOutput)
}

func (o LookupZPAApplicationSegmentPRAResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupZPAApplicationSegmentPRAResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// (bool)
func (o LookupZPAApplicationSegmentPRAResultOutput) IpAnchored() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupZPAApplicationSegmentPRAResult) bool { return v.IpAnchored }).(pulumi.BoolOutput)
}

// (bool) Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors.
func (o LookupZPAApplicationSegmentPRAResultOutput) IsCnameEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupZPAApplicationSegmentPRAResult) bool { return v.IsCnameEnabled }).(pulumi.BoolOutput)
}

func (o LookupZPAApplicationSegmentPRAResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupZPAApplicationSegmentPRAResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// (bool)
func (o LookupZPAApplicationSegmentPRAResultOutput) PassiveHealthEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupZPAApplicationSegmentPRAResult) bool { return v.PassiveHealthEnabled }).(pulumi.BoolOutput)
}

// (String) Segment Group IDs
func (o LookupZPAApplicationSegmentPRAResultOutput) SegmentGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZPAApplicationSegmentPRAResult) string { return v.SegmentGroupId }).(pulumi.StringOutput)
}

func (o LookupZPAApplicationSegmentPRAResultOutput) SegmentGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZPAApplicationSegmentPRAResult) string { return v.SegmentGroupName }).(pulumi.StringOutput)
}

// (string) List of Server Group IDs
// * `id:` - (string) List of Server Group IDs
func (o LookupZPAApplicationSegmentPRAResultOutput) ServerGroups() GetZPAApplicationSegmentPRAServerGroupArrayOutput {
	return o.ApplyT(func(v LookupZPAApplicationSegmentPRAResult) []GetZPAApplicationSegmentPRAServerGroup {
		return v.ServerGroups
	}).(GetZPAApplicationSegmentPRAServerGroupArrayOutput)
}

// (string) TCP port ranges used to access the app.
// * `app_id:` - (string)
// * `name:` - (string) Name of the Privileged Remote Access
// * `description:` - (string) Description of the Privileged Remote Access
// * `domain:` - (string) Domain name of the Privileged Remote Access
func (o LookupZPAApplicationSegmentPRAResultOutput) SraApps() GetZPAApplicationSegmentPRASraAppArrayOutput {
	return o.ApplyT(func(v LookupZPAApplicationSegmentPRAResult) []GetZPAApplicationSegmentPRASraApp { return v.SraApps }).(GetZPAApplicationSegmentPRASraAppArrayOutput)
}

// (string) TCP port ranges used to access the app.
func (o LookupZPAApplicationSegmentPRAResultOutput) TcpPortRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupZPAApplicationSegmentPRAResult) []string { return v.TcpPortRanges }).(pulumi.StringArrayOutput)
}

// (string) UDP port ranges used to access the app.
func (o LookupZPAApplicationSegmentPRAResultOutput) UdpPortRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupZPAApplicationSegmentPRAResult) []string { return v.UdpPortRanges }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupZPAApplicationSegmentPRAResultOutput{})
}
