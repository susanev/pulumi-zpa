// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zpa

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **zpa_application_segment_inspection** resource creates an inspection application segment in the Zscaler Private Access cloud. This resource can then be referenced in an access policy inspection rule. This resource supports Inspection for both `HTTP` and `HTTPS`.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zpa/sdk/go/zpa"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			jenkins, err := zpa.GetZPABaCertificate(ctx, &zpa.GetZPABaCertificateArgs{
//				Name: pulumi.StringRef("jenkins.securitygeek.io"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = zpa.NewZPAApplicationSegmentInspection(ctx, "this", &zpa.ZPAApplicationSegmentInspectionArgs{
//				Description:     pulumi.String("ZPA_Inspection_Example"),
//				Enabled:         pulumi.Bool(true),
//				HealthReporting: pulumi.String("ON_ACCESS"),
//				BypassType:      pulumi.String("NEVER"),
//				IsCnameEnabled:  pulumi.Bool(true),
//				TcpPortRanges: pulumi.StringArray{
//					pulumi.String("443"),
//					pulumi.String("443"),
//				},
//				DomainNames: pulumi.StringArray{
//					pulumi.String("jenkins.example.com"),
//				},
//				SegmentGroupId: pulumi.Any(zpa_segment_group.This.Id),
//				ServerGroups: zpa.ZPAApplicationSegmentInspectionServerGroupArray{
//					&zpa.ZPAApplicationSegmentInspectionServerGroupArgs{
//						Ids: pulumi.StringArray{
//							zpa_server_group.This.Id,
//						},
//					},
//				},
//				CommonAppsDto: &zpa.ZPAApplicationSegmentInspectionCommonAppsDtoArgs{
//					AppsConfigs: zpa.ZPAApplicationSegmentInspectionCommonAppsDtoAppsConfigArray{
//						&zpa.ZPAApplicationSegmentInspectionCommonAppsDtoAppsConfigArgs{
//							Name:                pulumi.String("jenkins.example.com"),
//							Domain:              pulumi.String("jenkins.example.com"),
//							ApplicationProtocol: pulumi.String("HTTPS"),
//							ApplicationPort:     pulumi.String("443"),
//							CertificateId:       *pulumi.String(jenkins.Id),
//							Enabled:             pulumi.Bool(true),
//							AppTypes: pulumi.StringArray{
//								pulumi.String("INSPECT"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language. [Visit](https://github.com/zscaler/zscaler-terraformer) Inspection Application Segment can be imported by using `<APPLICATION SEGMENT ID>` or `<APPLICATION SEGMENT NAME>` as the import ID.
//
// ```sh
//
//	$ pulumi import zpa:index/zPAApplicationSegmentInspection:ZPAApplicationSegmentInspection example <application_segment_id>
//
// ```
//
//	or
//
// ```sh
//
//	$ pulumi import zpa:index/zPAApplicationSegmentInspection:ZPAApplicationSegmentInspection example <application_segment_name>
//
// ```
type ZPAApplicationSegmentInspection struct {
	pulumi.CustomResourceState

	// (Optional) Indicates whether users can bypass ZPA to access applications.
	BypassType pulumi.StringOutput `pulumi:"bypassType"`
	// List of applications (e.g., Inspection, Browser Access or Privileged Remote Access)
	// * `apps_config:` - (Required) List of applications to be configured
	CommonAppsDto ZPAApplicationSegmentInspectionCommonAppsDtoOutput `pulumi:"commonAppsDto"`
	// (Optional)
	ConfigSpace pulumi.StringPtrOutput `pulumi:"configSpace"`
	// (Optional) Description of the application.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// List of domains and IPs.
	DomainNames pulumi.StringArrayOutput `pulumi:"domainNames"`
	// (Optional) Whether Double Encryption is enabled or disabled for the app.
	DoubleEncrypt pulumi.BoolOutput `pulumi:"doubleEncrypt"`
	// Whether this application is enabled or not
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// (Optional)
	HealthCheckType pulumi.StringPtrOutput `pulumi:"healthCheckType"`
	// (Optional) Whether health reporting for the app is Continuous or On Access. Supported values: `NONE`, `ON_ACCESS`, `CONTINUOUS`.
	HealthReporting pulumi.StringPtrOutput `pulumi:"healthReporting"`
	// (Optional)
	IcmpAccessType pulumi.StringOutput `pulumi:"icmpAccessType"`
	// (Optional)
	IpAnchored pulumi.BoolOutput `pulumi:"ipAnchored"`
	// (Optional) Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors.
	IsCnameEnabled pulumi.BoolOutput `pulumi:"isCnameEnabled"`
	// Name of the Inspection Application Segment.
	Name pulumi.StringOutput `pulumi:"name"`
	// (Optional)
	PassiveHealthEnabled pulumi.BoolOutput `pulumi:"passiveHealthEnabled"`
	// List of Segment Group IDs
	SegmentGroupId   pulumi.StringOutput `pulumi:"segmentGroupId"`
	SegmentGroupName pulumi.StringOutput `pulumi:"segmentGroupName"`
	// List of Server Group IDs
	ServerGroups ZPAApplicationSegmentInspectionServerGroupArrayOutput `pulumi:"serverGroups"`
	// TCP port ranges used to access the app.
	TcpPortRanges pulumi.StringArrayOutput `pulumi:"tcpPortRanges"`
	// UDP port ranges used to access the app.
	UdpPortRanges pulumi.StringArrayOutput `pulumi:"udpPortRanges"`
}

// NewZPAApplicationSegmentInspection registers a new resource with the given unique name, arguments, and options.
func NewZPAApplicationSegmentInspection(ctx *pulumi.Context,
	name string, args *ZPAApplicationSegmentInspectionArgs, opts ...pulumi.ResourceOption) (*ZPAApplicationSegmentInspection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SegmentGroupId == nil {
		return nil, errors.New("invalid value for required argument 'SegmentGroupId'")
	}
	if args.ServerGroups == nil {
		return nil, errors.New("invalid value for required argument 'ServerGroups'")
	}
	var resource ZPAApplicationSegmentInspection
	err := ctx.RegisterResource("zpa:index/zPAApplicationSegmentInspection:ZPAApplicationSegmentInspection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZPAApplicationSegmentInspection gets an existing ZPAApplicationSegmentInspection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZPAApplicationSegmentInspection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZPAApplicationSegmentInspectionState, opts ...pulumi.ResourceOption) (*ZPAApplicationSegmentInspection, error) {
	var resource ZPAApplicationSegmentInspection
	err := ctx.ReadResource("zpa:index/zPAApplicationSegmentInspection:ZPAApplicationSegmentInspection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ZPAApplicationSegmentInspection resources.
type zpaapplicationSegmentInspectionState struct {
	// (Optional) Indicates whether users can bypass ZPA to access applications.
	BypassType *string `pulumi:"bypassType"`
	// List of applications (e.g., Inspection, Browser Access or Privileged Remote Access)
	// * `apps_config:` - (Required) List of applications to be configured
	CommonAppsDto *ZPAApplicationSegmentInspectionCommonAppsDto `pulumi:"commonAppsDto"`
	// (Optional)
	ConfigSpace *string `pulumi:"configSpace"`
	// (Optional) Description of the application.
	Description *string `pulumi:"description"`
	// List of domains and IPs.
	DomainNames []string `pulumi:"domainNames"`
	// (Optional) Whether Double Encryption is enabled or disabled for the app.
	DoubleEncrypt *bool `pulumi:"doubleEncrypt"`
	// Whether this application is enabled or not
	Enabled *bool `pulumi:"enabled"`
	// (Optional)
	HealthCheckType *string `pulumi:"healthCheckType"`
	// (Optional) Whether health reporting for the app is Continuous or On Access. Supported values: `NONE`, `ON_ACCESS`, `CONTINUOUS`.
	HealthReporting *string `pulumi:"healthReporting"`
	// (Optional)
	IcmpAccessType *string `pulumi:"icmpAccessType"`
	// (Optional)
	IpAnchored *bool `pulumi:"ipAnchored"`
	// (Optional) Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors.
	IsCnameEnabled *bool `pulumi:"isCnameEnabled"`
	// Name of the Inspection Application Segment.
	Name *string `pulumi:"name"`
	// (Optional)
	PassiveHealthEnabled *bool `pulumi:"passiveHealthEnabled"`
	// List of Segment Group IDs
	SegmentGroupId   *string `pulumi:"segmentGroupId"`
	SegmentGroupName *string `pulumi:"segmentGroupName"`
	// List of Server Group IDs
	ServerGroups []ZPAApplicationSegmentInspectionServerGroup `pulumi:"serverGroups"`
	// TCP port ranges used to access the app.
	TcpPortRanges []string `pulumi:"tcpPortRanges"`
	// UDP port ranges used to access the app.
	UdpPortRanges []string `pulumi:"udpPortRanges"`
}

type ZPAApplicationSegmentInspectionState struct {
	// (Optional) Indicates whether users can bypass ZPA to access applications.
	BypassType pulumi.StringPtrInput
	// List of applications (e.g., Inspection, Browser Access or Privileged Remote Access)
	// * `apps_config:` - (Required) List of applications to be configured
	CommonAppsDto ZPAApplicationSegmentInspectionCommonAppsDtoPtrInput
	// (Optional)
	ConfigSpace pulumi.StringPtrInput
	// (Optional) Description of the application.
	Description pulumi.StringPtrInput
	// List of domains and IPs.
	DomainNames pulumi.StringArrayInput
	// (Optional) Whether Double Encryption is enabled or disabled for the app.
	DoubleEncrypt pulumi.BoolPtrInput
	// Whether this application is enabled or not
	Enabled pulumi.BoolPtrInput
	// (Optional)
	HealthCheckType pulumi.StringPtrInput
	// (Optional) Whether health reporting for the app is Continuous or On Access. Supported values: `NONE`, `ON_ACCESS`, `CONTINUOUS`.
	HealthReporting pulumi.StringPtrInput
	// (Optional)
	IcmpAccessType pulumi.StringPtrInput
	// (Optional)
	IpAnchored pulumi.BoolPtrInput
	// (Optional) Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors.
	IsCnameEnabled pulumi.BoolPtrInput
	// Name of the Inspection Application Segment.
	Name pulumi.StringPtrInput
	// (Optional)
	PassiveHealthEnabled pulumi.BoolPtrInput
	// List of Segment Group IDs
	SegmentGroupId   pulumi.StringPtrInput
	SegmentGroupName pulumi.StringPtrInput
	// List of Server Group IDs
	ServerGroups ZPAApplicationSegmentInspectionServerGroupArrayInput
	// TCP port ranges used to access the app.
	TcpPortRanges pulumi.StringArrayInput
	// UDP port ranges used to access the app.
	UdpPortRanges pulumi.StringArrayInput
}

func (ZPAApplicationSegmentInspectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*zpaapplicationSegmentInspectionState)(nil)).Elem()
}

type zpaapplicationSegmentInspectionArgs struct {
	// (Optional) Indicates whether users can bypass ZPA to access applications.
	BypassType *string `pulumi:"bypassType"`
	// List of applications (e.g., Inspection, Browser Access or Privileged Remote Access)
	// * `apps_config:` - (Required) List of applications to be configured
	CommonAppsDto *ZPAApplicationSegmentInspectionCommonAppsDto `pulumi:"commonAppsDto"`
	// (Optional)
	ConfigSpace *string `pulumi:"configSpace"`
	// (Optional) Description of the application.
	Description *string `pulumi:"description"`
	// List of domains and IPs.
	DomainNames []string `pulumi:"domainNames"`
	// (Optional) Whether Double Encryption is enabled or disabled for the app.
	DoubleEncrypt *bool `pulumi:"doubleEncrypt"`
	// Whether this application is enabled or not
	Enabled *bool `pulumi:"enabled"`
	// (Optional)
	HealthCheckType *string `pulumi:"healthCheckType"`
	// (Optional) Whether health reporting for the app is Continuous or On Access. Supported values: `NONE`, `ON_ACCESS`, `CONTINUOUS`.
	HealthReporting *string `pulumi:"healthReporting"`
	// (Optional)
	IcmpAccessType *string `pulumi:"icmpAccessType"`
	// (Optional)
	IpAnchored *bool `pulumi:"ipAnchored"`
	// (Optional) Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors.
	IsCnameEnabled *bool `pulumi:"isCnameEnabled"`
	// Name of the Inspection Application Segment.
	Name *string `pulumi:"name"`
	// (Optional)
	PassiveHealthEnabled *bool `pulumi:"passiveHealthEnabled"`
	// List of Segment Group IDs
	SegmentGroupId   string  `pulumi:"segmentGroupId"`
	SegmentGroupName *string `pulumi:"segmentGroupName"`
	// List of Server Group IDs
	ServerGroups []ZPAApplicationSegmentInspectionServerGroup `pulumi:"serverGroups"`
	// TCP port ranges used to access the app.
	TcpPortRanges []string `pulumi:"tcpPortRanges"`
	// UDP port ranges used to access the app.
	UdpPortRanges []string `pulumi:"udpPortRanges"`
}

// The set of arguments for constructing a ZPAApplicationSegmentInspection resource.
type ZPAApplicationSegmentInspectionArgs struct {
	// (Optional) Indicates whether users can bypass ZPA to access applications.
	BypassType pulumi.StringPtrInput
	// List of applications (e.g., Inspection, Browser Access or Privileged Remote Access)
	// * `apps_config:` - (Required) List of applications to be configured
	CommonAppsDto ZPAApplicationSegmentInspectionCommonAppsDtoPtrInput
	// (Optional)
	ConfigSpace pulumi.StringPtrInput
	// (Optional) Description of the application.
	Description pulumi.StringPtrInput
	// List of domains and IPs.
	DomainNames pulumi.StringArrayInput
	// (Optional) Whether Double Encryption is enabled or disabled for the app.
	DoubleEncrypt pulumi.BoolPtrInput
	// Whether this application is enabled or not
	Enabled pulumi.BoolPtrInput
	// (Optional)
	HealthCheckType pulumi.StringPtrInput
	// (Optional) Whether health reporting for the app is Continuous or On Access. Supported values: `NONE`, `ON_ACCESS`, `CONTINUOUS`.
	HealthReporting pulumi.StringPtrInput
	// (Optional)
	IcmpAccessType pulumi.StringPtrInput
	// (Optional)
	IpAnchored pulumi.BoolPtrInput
	// (Optional) Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors.
	IsCnameEnabled pulumi.BoolPtrInput
	// Name of the Inspection Application Segment.
	Name pulumi.StringPtrInput
	// (Optional)
	PassiveHealthEnabled pulumi.BoolPtrInput
	// List of Segment Group IDs
	SegmentGroupId   pulumi.StringInput
	SegmentGroupName pulumi.StringPtrInput
	// List of Server Group IDs
	ServerGroups ZPAApplicationSegmentInspectionServerGroupArrayInput
	// TCP port ranges used to access the app.
	TcpPortRanges pulumi.StringArrayInput
	// UDP port ranges used to access the app.
	UdpPortRanges pulumi.StringArrayInput
}

func (ZPAApplicationSegmentInspectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*zpaapplicationSegmentInspectionArgs)(nil)).Elem()
}

type ZPAApplicationSegmentInspectionInput interface {
	pulumi.Input

	ToZPAApplicationSegmentInspectionOutput() ZPAApplicationSegmentInspectionOutput
	ToZPAApplicationSegmentInspectionOutputWithContext(ctx context.Context) ZPAApplicationSegmentInspectionOutput
}

func (*ZPAApplicationSegmentInspection) ElementType() reflect.Type {
	return reflect.TypeOf((**ZPAApplicationSegmentInspection)(nil)).Elem()
}

func (i *ZPAApplicationSegmentInspection) ToZPAApplicationSegmentInspectionOutput() ZPAApplicationSegmentInspectionOutput {
	return i.ToZPAApplicationSegmentInspectionOutputWithContext(context.Background())
}

func (i *ZPAApplicationSegmentInspection) ToZPAApplicationSegmentInspectionOutputWithContext(ctx context.Context) ZPAApplicationSegmentInspectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZPAApplicationSegmentInspectionOutput)
}

// ZPAApplicationSegmentInspectionArrayInput is an input type that accepts ZPAApplicationSegmentInspectionArray and ZPAApplicationSegmentInspectionArrayOutput values.
// You can construct a concrete instance of `ZPAApplicationSegmentInspectionArrayInput` via:
//
//	ZPAApplicationSegmentInspectionArray{ ZPAApplicationSegmentInspectionArgs{...} }
type ZPAApplicationSegmentInspectionArrayInput interface {
	pulumi.Input

	ToZPAApplicationSegmentInspectionArrayOutput() ZPAApplicationSegmentInspectionArrayOutput
	ToZPAApplicationSegmentInspectionArrayOutputWithContext(context.Context) ZPAApplicationSegmentInspectionArrayOutput
}

type ZPAApplicationSegmentInspectionArray []ZPAApplicationSegmentInspectionInput

func (ZPAApplicationSegmentInspectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZPAApplicationSegmentInspection)(nil)).Elem()
}

func (i ZPAApplicationSegmentInspectionArray) ToZPAApplicationSegmentInspectionArrayOutput() ZPAApplicationSegmentInspectionArrayOutput {
	return i.ToZPAApplicationSegmentInspectionArrayOutputWithContext(context.Background())
}

func (i ZPAApplicationSegmentInspectionArray) ToZPAApplicationSegmentInspectionArrayOutputWithContext(ctx context.Context) ZPAApplicationSegmentInspectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZPAApplicationSegmentInspectionArrayOutput)
}

// ZPAApplicationSegmentInspectionMapInput is an input type that accepts ZPAApplicationSegmentInspectionMap and ZPAApplicationSegmentInspectionMapOutput values.
// You can construct a concrete instance of `ZPAApplicationSegmentInspectionMapInput` via:
//
//	ZPAApplicationSegmentInspectionMap{ "key": ZPAApplicationSegmentInspectionArgs{...} }
type ZPAApplicationSegmentInspectionMapInput interface {
	pulumi.Input

	ToZPAApplicationSegmentInspectionMapOutput() ZPAApplicationSegmentInspectionMapOutput
	ToZPAApplicationSegmentInspectionMapOutputWithContext(context.Context) ZPAApplicationSegmentInspectionMapOutput
}

type ZPAApplicationSegmentInspectionMap map[string]ZPAApplicationSegmentInspectionInput

func (ZPAApplicationSegmentInspectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZPAApplicationSegmentInspection)(nil)).Elem()
}

func (i ZPAApplicationSegmentInspectionMap) ToZPAApplicationSegmentInspectionMapOutput() ZPAApplicationSegmentInspectionMapOutput {
	return i.ToZPAApplicationSegmentInspectionMapOutputWithContext(context.Background())
}

func (i ZPAApplicationSegmentInspectionMap) ToZPAApplicationSegmentInspectionMapOutputWithContext(ctx context.Context) ZPAApplicationSegmentInspectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZPAApplicationSegmentInspectionMapOutput)
}

type ZPAApplicationSegmentInspectionOutput struct{ *pulumi.OutputState }

func (ZPAApplicationSegmentInspectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZPAApplicationSegmentInspection)(nil)).Elem()
}

func (o ZPAApplicationSegmentInspectionOutput) ToZPAApplicationSegmentInspectionOutput() ZPAApplicationSegmentInspectionOutput {
	return o
}

func (o ZPAApplicationSegmentInspectionOutput) ToZPAApplicationSegmentInspectionOutputWithContext(ctx context.Context) ZPAApplicationSegmentInspectionOutput {
	return o
}

// (Optional) Indicates whether users can bypass ZPA to access applications.
func (o ZPAApplicationSegmentInspectionOutput) BypassType() pulumi.StringOutput {
	return o.ApplyT(func(v *ZPAApplicationSegmentInspection) pulumi.StringOutput { return v.BypassType }).(pulumi.StringOutput)
}

// List of applications (e.g., Inspection, Browser Access or Privileged Remote Access)
// * `apps_config:` - (Required) List of applications to be configured
func (o ZPAApplicationSegmentInspectionOutput) CommonAppsDto() ZPAApplicationSegmentInspectionCommonAppsDtoOutput {
	return o.ApplyT(func(v *ZPAApplicationSegmentInspection) ZPAApplicationSegmentInspectionCommonAppsDtoOutput {
		return v.CommonAppsDto
	}).(ZPAApplicationSegmentInspectionCommonAppsDtoOutput)
}

// (Optional)
func (o ZPAApplicationSegmentInspectionOutput) ConfigSpace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZPAApplicationSegmentInspection) pulumi.StringPtrOutput { return v.ConfigSpace }).(pulumi.StringPtrOutput)
}

// (Optional) Description of the application.
func (o ZPAApplicationSegmentInspectionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZPAApplicationSegmentInspection) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// List of domains and IPs.
func (o ZPAApplicationSegmentInspectionOutput) DomainNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ZPAApplicationSegmentInspection) pulumi.StringArrayOutput { return v.DomainNames }).(pulumi.StringArrayOutput)
}

// (Optional) Whether Double Encryption is enabled or disabled for the app.
func (o ZPAApplicationSegmentInspectionOutput) DoubleEncrypt() pulumi.BoolOutput {
	return o.ApplyT(func(v *ZPAApplicationSegmentInspection) pulumi.BoolOutput { return v.DoubleEncrypt }).(pulumi.BoolOutput)
}

// Whether this application is enabled or not
func (o ZPAApplicationSegmentInspectionOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ZPAApplicationSegmentInspection) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// (Optional)
func (o ZPAApplicationSegmentInspectionOutput) HealthCheckType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZPAApplicationSegmentInspection) pulumi.StringPtrOutput { return v.HealthCheckType }).(pulumi.StringPtrOutput)
}

// (Optional) Whether health reporting for the app is Continuous or On Access. Supported values: `NONE`, `ON_ACCESS`, `CONTINUOUS`.
func (o ZPAApplicationSegmentInspectionOutput) HealthReporting() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZPAApplicationSegmentInspection) pulumi.StringPtrOutput { return v.HealthReporting }).(pulumi.StringPtrOutput)
}

// (Optional)
func (o ZPAApplicationSegmentInspectionOutput) IcmpAccessType() pulumi.StringOutput {
	return o.ApplyT(func(v *ZPAApplicationSegmentInspection) pulumi.StringOutput { return v.IcmpAccessType }).(pulumi.StringOutput)
}

// (Optional)
func (o ZPAApplicationSegmentInspectionOutput) IpAnchored() pulumi.BoolOutput {
	return o.ApplyT(func(v *ZPAApplicationSegmentInspection) pulumi.BoolOutput { return v.IpAnchored }).(pulumi.BoolOutput)
}

// (Optional) Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors.
func (o ZPAApplicationSegmentInspectionOutput) IsCnameEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ZPAApplicationSegmentInspection) pulumi.BoolOutput { return v.IsCnameEnabled }).(pulumi.BoolOutput)
}

// Name of the Inspection Application Segment.
func (o ZPAApplicationSegmentInspectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ZPAApplicationSegmentInspection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// (Optional)
func (o ZPAApplicationSegmentInspectionOutput) PassiveHealthEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ZPAApplicationSegmentInspection) pulumi.BoolOutput { return v.PassiveHealthEnabled }).(pulumi.BoolOutput)
}

// List of Segment Group IDs
func (o ZPAApplicationSegmentInspectionOutput) SegmentGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *ZPAApplicationSegmentInspection) pulumi.StringOutput { return v.SegmentGroupId }).(pulumi.StringOutput)
}

func (o ZPAApplicationSegmentInspectionOutput) SegmentGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *ZPAApplicationSegmentInspection) pulumi.StringOutput { return v.SegmentGroupName }).(pulumi.StringOutput)
}

// List of Server Group IDs
func (o ZPAApplicationSegmentInspectionOutput) ServerGroups() ZPAApplicationSegmentInspectionServerGroupArrayOutput {
	return o.ApplyT(func(v *ZPAApplicationSegmentInspection) ZPAApplicationSegmentInspectionServerGroupArrayOutput {
		return v.ServerGroups
	}).(ZPAApplicationSegmentInspectionServerGroupArrayOutput)
}

// TCP port ranges used to access the app.
func (o ZPAApplicationSegmentInspectionOutput) TcpPortRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ZPAApplicationSegmentInspection) pulumi.StringArrayOutput { return v.TcpPortRanges }).(pulumi.StringArrayOutput)
}

// UDP port ranges used to access the app.
func (o ZPAApplicationSegmentInspectionOutput) UdpPortRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ZPAApplicationSegmentInspection) pulumi.StringArrayOutput { return v.UdpPortRanges }).(pulumi.StringArrayOutput)
}

type ZPAApplicationSegmentInspectionArrayOutput struct{ *pulumi.OutputState }

func (ZPAApplicationSegmentInspectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZPAApplicationSegmentInspection)(nil)).Elem()
}

func (o ZPAApplicationSegmentInspectionArrayOutput) ToZPAApplicationSegmentInspectionArrayOutput() ZPAApplicationSegmentInspectionArrayOutput {
	return o
}

func (o ZPAApplicationSegmentInspectionArrayOutput) ToZPAApplicationSegmentInspectionArrayOutputWithContext(ctx context.Context) ZPAApplicationSegmentInspectionArrayOutput {
	return o
}

func (o ZPAApplicationSegmentInspectionArrayOutput) Index(i pulumi.IntInput) ZPAApplicationSegmentInspectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ZPAApplicationSegmentInspection {
		return vs[0].([]*ZPAApplicationSegmentInspection)[vs[1].(int)]
	}).(ZPAApplicationSegmentInspectionOutput)
}

type ZPAApplicationSegmentInspectionMapOutput struct{ *pulumi.OutputState }

func (ZPAApplicationSegmentInspectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZPAApplicationSegmentInspection)(nil)).Elem()
}

func (o ZPAApplicationSegmentInspectionMapOutput) ToZPAApplicationSegmentInspectionMapOutput() ZPAApplicationSegmentInspectionMapOutput {
	return o
}

func (o ZPAApplicationSegmentInspectionMapOutput) ToZPAApplicationSegmentInspectionMapOutputWithContext(ctx context.Context) ZPAApplicationSegmentInspectionMapOutput {
	return o
}

func (o ZPAApplicationSegmentInspectionMapOutput) MapIndex(k pulumi.StringInput) ZPAApplicationSegmentInspectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ZPAApplicationSegmentInspection {
		return vs[0].(map[string]*ZPAApplicationSegmentInspection)[vs[1].(string)]
	}).(ZPAApplicationSegmentInspectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZPAApplicationSegmentInspectionInput)(nil)).Elem(), &ZPAApplicationSegmentInspection{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZPAApplicationSegmentInspectionArrayInput)(nil)).Elem(), ZPAApplicationSegmentInspectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZPAApplicationSegmentInspectionMapInput)(nil)).Elem(), ZPAApplicationSegmentInspectionMap{})
	pulumi.RegisterOutputType(ZPAApplicationSegmentInspectionOutput{})
	pulumi.RegisterOutputType(ZPAApplicationSegmentInspectionArrayOutput{})
	pulumi.RegisterOutputType(ZPAApplicationSegmentInspectionMapOutput{})
}
