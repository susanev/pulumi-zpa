// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zpa

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use the **zpa_lss_config_controller** data source to get information about a Log Streaming (LSS) configuration resource created in the Zscaler Private Access.
func LookupZPALSSConfigController(ctx *pulumi.Context, args *LookupZPALSSConfigControllerArgs, opts ...pulumi.InvokeOption) (*LookupZPALSSConfigControllerResult, error) {
	var rv LookupZPALSSConfigControllerResult
	err := ctx.Invoke("zpa:index/getZPALSSConfigController:getZPALSSConfigController", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getZPALSSConfigController.
type LookupZPALSSConfigControllerArgs struct {
	// (Computed)
	Configs []GetZPALSSConfigControllerConfig `pulumi:"configs"`
	// This field defines the name of the log streaming resource.
	Id *string `pulumi:"id"`
}

// A collection of values returned by getZPALSSConfigController.
type LookupZPALSSConfigControllerResult struct {
	// (Computed)
	Configs []GetZPALSSConfigControllerConfig `pulumi:"configs"`
	// (Computed)
	ConnectorGroups []GetZPALSSConfigControllerConnectorGroup `pulumi:"connectorGroups"`
	// (string)
	Id          *string                               `pulumi:"id"`
	PolicyRules []GetZPALSSConfigControllerPolicyRule `pulumi:"policyRules"`
}

func LookupZPALSSConfigControllerOutput(ctx *pulumi.Context, args LookupZPALSSConfigControllerOutputArgs, opts ...pulumi.InvokeOption) LookupZPALSSConfigControllerResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupZPALSSConfigControllerResult, error) {
			args := v.(LookupZPALSSConfigControllerArgs)
			r, err := LookupZPALSSConfigController(ctx, &args, opts...)
			var s LookupZPALSSConfigControllerResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupZPALSSConfigControllerResultOutput)
}

// A collection of arguments for invoking getZPALSSConfigController.
type LookupZPALSSConfigControllerOutputArgs struct {
	// (Computed)
	Configs GetZPALSSConfigControllerConfigArrayInput `pulumi:"configs"`
	// This field defines the name of the log streaming resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (LookupZPALSSConfigControllerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupZPALSSConfigControllerArgs)(nil)).Elem()
}

// A collection of values returned by getZPALSSConfigController.
type LookupZPALSSConfigControllerResultOutput struct{ *pulumi.OutputState }

func (LookupZPALSSConfigControllerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupZPALSSConfigControllerResult)(nil)).Elem()
}

func (o LookupZPALSSConfigControllerResultOutput) ToLookupZPALSSConfigControllerResultOutput() LookupZPALSSConfigControllerResultOutput {
	return o
}

func (o LookupZPALSSConfigControllerResultOutput) ToLookupZPALSSConfigControllerResultOutputWithContext(ctx context.Context) LookupZPALSSConfigControllerResultOutput {
	return o
}

// (Computed)
func (o LookupZPALSSConfigControllerResultOutput) Configs() GetZPALSSConfigControllerConfigArrayOutput {
	return o.ApplyT(func(v LookupZPALSSConfigControllerResult) []GetZPALSSConfigControllerConfig { return v.Configs }).(GetZPALSSConfigControllerConfigArrayOutput)
}

// (Computed)
func (o LookupZPALSSConfigControllerResultOutput) ConnectorGroups() GetZPALSSConfigControllerConnectorGroupArrayOutput {
	return o.ApplyT(func(v LookupZPALSSConfigControllerResult) []GetZPALSSConfigControllerConnectorGroup {
		return v.ConnectorGroups
	}).(GetZPALSSConfigControllerConnectorGroupArrayOutput)
}

// (string)
func (o LookupZPALSSConfigControllerResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupZPALSSConfigControllerResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o LookupZPALSSConfigControllerResultOutput) PolicyRules() GetZPALSSConfigControllerPolicyRuleArrayOutput {
	return o.ApplyT(func(v LookupZPALSSConfigControllerResult) []GetZPALSSConfigControllerPolicyRule { return v.PolicyRules }).(GetZPALSSConfigControllerPolicyRuleArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupZPALSSConfigControllerResultOutput{})
}
