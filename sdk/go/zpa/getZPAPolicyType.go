// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zpa

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use the **zpa_policy_type** data source to get information about an a “policySetId“ and “policyType“. This data source is required when creating:
//
// 1. Access policy Rules
// 2. Access policy timeout rules
// 3. Access policy forwarding rules
// 4. Access policy inspection rules
//
// > **NOTE** The parameters “policySetId“ is required in all circumstances and is exported when checking for the policyType parameter. The policyType value is used for differentiating the policy types, in the request endpoint. The supported values are:
//
// * “ACCESS_POLICY/GLOBAL_POLICY“
// * “TIMEOUT_POLICY/REAUTH_POLICY“
// * “BYPASS_POLICY/CLIENT_FORWARDING_POLICY“
// * “INSPECTION_POLICY“
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zpa/sdk/go/zpa"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			accessPolicy, err := zpa.GetZPAPolicyType(ctx, &zpa.GetZPAPolicyTypeArgs{
//				PolicyType: pulumi.StringRef("ACCESS_POLICY"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("zpaPolicyTypeAccessPolicy", accessPolicy.Id)
//			return nil
//		})
//	}
//
// ```
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zpa/sdk/go/zpa"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			globalPolicy, err := zpa.GetZPAPolicyType(ctx, &zpa.GetZPAPolicyTypeArgs{
//				PolicyType: pulumi.StringRef("GLOBAL_POLICY"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("zpaPolicyTypeAccessPolicy", globalPolicy.Id)
//			return nil
//		})
//	}
//
// ```
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zpa/sdk/go/zpa"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			timeoutPolicy, err := zpa.GetZPAPolicyType(ctx, &zpa.GetZPAPolicyTypeArgs{
//				PolicyType: pulumi.StringRef("TIMEOUT_POLICY"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("zpaPolicyTypeTimeoutPolicy", timeoutPolicy.Id)
//			return nil
//		})
//	}
//
// ```
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zpa/sdk/go/zpa"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			reauthPolicy, err := zpa.GetZPAPolicyType(ctx, &zpa.GetZPAPolicyTypeArgs{
//				PolicyType: pulumi.StringRef("REAUTH_POLICY"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("zpaPolicyTypeReauthPolicy", reauthPolicy.Id)
//			return nil
//		})
//	}
//
// ```
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zpa/sdk/go/zpa"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			clientForwardingPolicy, err := zpa.GetZPAPolicyType(ctx, &zpa.GetZPAPolicyTypeArgs{
//				PolicyType: pulumi.StringRef("CLIENT_FORWARDING_POLICY"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("zpaPolicyTypeClientForwardingPolicy", clientForwardingPolicy.Id)
//			return nil
//		})
//	}
//
// ```
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zpa/sdk/go/zpa"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			inspectionPolicy, err := zpa.GetZPAPolicyType(ctx, &zpa.GetZPAPolicyTypeArgs{
//				PolicyType: pulumi.StringRef("INSPECTION_POLICY"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("zpaPolicyTypeInspectionPolicy", inspectionPolicy.Id)
//			return nil
//		})
//	}
//
// ```
func GetZPAPolicyType(ctx *pulumi.Context, args *GetZPAPolicyTypeArgs, opts ...pulumi.InvokeOption) (*GetZPAPolicyTypeResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetZPAPolicyTypeResult
	err := ctx.Invoke("zpa:index/getZPAPolicyType:getZPAPolicyType", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getZPAPolicyType.
type GetZPAPolicyTypeArgs struct {
	Id *string `pulumi:"id"`
	// The value for differentiating the policy types.
	PolicyType *string `pulumi:"policyType"`
}

// A collection of values returned by getZPAPolicyType.
type GetZPAPolicyTypeResult struct {
	CreationTime string                 `pulumi:"creationTime"`
	Description  string                 `pulumi:"description"`
	Enabled      bool                   `pulumi:"enabled"`
	Id           *string                `pulumi:"id"`
	ModifiedBy   string                 `pulumi:"modifiedBy"`
	ModifiedTime string                 `pulumi:"modifiedTime"`
	Name         string                 `pulumi:"name"`
	PolicyType   string                 `pulumi:"policyType"`
	Rules        []GetZPAPolicyTypeRule `pulumi:"rules"`
	Sorted       bool                   `pulumi:"sorted"`
}

func GetZPAPolicyTypeOutput(ctx *pulumi.Context, args GetZPAPolicyTypeOutputArgs, opts ...pulumi.InvokeOption) GetZPAPolicyTypeResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetZPAPolicyTypeResult, error) {
			args := v.(GetZPAPolicyTypeArgs)
			r, err := GetZPAPolicyType(ctx, &args, opts...)
			var s GetZPAPolicyTypeResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetZPAPolicyTypeResultOutput)
}

// A collection of arguments for invoking getZPAPolicyType.
type GetZPAPolicyTypeOutputArgs struct {
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The value for differentiating the policy types.
	PolicyType pulumi.StringPtrInput `pulumi:"policyType"`
}

func (GetZPAPolicyTypeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetZPAPolicyTypeArgs)(nil)).Elem()
}

// A collection of values returned by getZPAPolicyType.
type GetZPAPolicyTypeResultOutput struct{ *pulumi.OutputState }

func (GetZPAPolicyTypeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetZPAPolicyTypeResult)(nil)).Elem()
}

func (o GetZPAPolicyTypeResultOutput) ToGetZPAPolicyTypeResultOutput() GetZPAPolicyTypeResultOutput {
	return o
}

func (o GetZPAPolicyTypeResultOutput) ToGetZPAPolicyTypeResultOutputWithContext(ctx context.Context) GetZPAPolicyTypeResultOutput {
	return o
}

func (o GetZPAPolicyTypeResultOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetZPAPolicyTypeResult) string { return v.CreationTime }).(pulumi.StringOutput)
}

func (o GetZPAPolicyTypeResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetZPAPolicyTypeResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetZPAPolicyTypeResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetZPAPolicyTypeResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

func (o GetZPAPolicyTypeResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetZPAPolicyTypeResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o GetZPAPolicyTypeResultOutput) ModifiedBy() pulumi.StringOutput {
	return o.ApplyT(func(v GetZPAPolicyTypeResult) string { return v.ModifiedBy }).(pulumi.StringOutput)
}

func (o GetZPAPolicyTypeResultOutput) ModifiedTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetZPAPolicyTypeResult) string { return v.ModifiedTime }).(pulumi.StringOutput)
}

func (o GetZPAPolicyTypeResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetZPAPolicyTypeResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetZPAPolicyTypeResultOutput) PolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v GetZPAPolicyTypeResult) string { return v.PolicyType }).(pulumi.StringOutput)
}

func (o GetZPAPolicyTypeResultOutput) Rules() GetZPAPolicyTypeRuleArrayOutput {
	return o.ApplyT(func(v GetZPAPolicyTypeResult) []GetZPAPolicyTypeRule { return v.Rules }).(GetZPAPolicyTypeRuleArrayOutput)
}

func (o GetZPAPolicyTypeResultOutput) Sorted() pulumi.BoolOutput {
	return o.ApplyT(func(v GetZPAPolicyTypeResult) bool { return v.Sorted }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(GetZPAPolicyTypeResultOutput{})
}
