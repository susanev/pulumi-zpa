// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package forwardpolicy

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PolicyAccessForwardingRuleCondition struct {
	Id       *string                                      `pulumi:"id"`
	Negated  *bool                                        `pulumi:"negated"`
	Operands []PolicyAccessForwardingRuleConditionOperand `pulumi:"operands"`
	Operator string                                       `pulumi:"operator"`
}

// PolicyAccessForwardingRuleConditionInput is an input type that accepts PolicyAccessForwardingRuleConditionArgs and PolicyAccessForwardingRuleConditionOutput values.
// You can construct a concrete instance of `PolicyAccessForwardingRuleConditionInput` via:
//
//	PolicyAccessForwardingRuleConditionArgs{...}
type PolicyAccessForwardingRuleConditionInput interface {
	pulumi.Input

	ToPolicyAccessForwardingRuleConditionOutput() PolicyAccessForwardingRuleConditionOutput
	ToPolicyAccessForwardingRuleConditionOutputWithContext(context.Context) PolicyAccessForwardingRuleConditionOutput
}

type PolicyAccessForwardingRuleConditionArgs struct {
	Id       pulumi.StringPtrInput                                `pulumi:"id"`
	Negated  pulumi.BoolPtrInput                                  `pulumi:"negated"`
	Operands PolicyAccessForwardingRuleConditionOperandArrayInput `pulumi:"operands"`
	Operator pulumi.StringInput                                   `pulumi:"operator"`
}

func (PolicyAccessForwardingRuleConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAccessForwardingRuleCondition)(nil)).Elem()
}

func (i PolicyAccessForwardingRuleConditionArgs) ToPolicyAccessForwardingRuleConditionOutput() PolicyAccessForwardingRuleConditionOutput {
	return i.ToPolicyAccessForwardingRuleConditionOutputWithContext(context.Background())
}

func (i PolicyAccessForwardingRuleConditionArgs) ToPolicyAccessForwardingRuleConditionOutputWithContext(ctx context.Context) PolicyAccessForwardingRuleConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAccessForwardingRuleConditionOutput)
}

// PolicyAccessForwardingRuleConditionArrayInput is an input type that accepts PolicyAccessForwardingRuleConditionArray and PolicyAccessForwardingRuleConditionArrayOutput values.
// You can construct a concrete instance of `PolicyAccessForwardingRuleConditionArrayInput` via:
//
//	PolicyAccessForwardingRuleConditionArray{ PolicyAccessForwardingRuleConditionArgs{...} }
type PolicyAccessForwardingRuleConditionArrayInput interface {
	pulumi.Input

	ToPolicyAccessForwardingRuleConditionArrayOutput() PolicyAccessForwardingRuleConditionArrayOutput
	ToPolicyAccessForwardingRuleConditionArrayOutputWithContext(context.Context) PolicyAccessForwardingRuleConditionArrayOutput
}

type PolicyAccessForwardingRuleConditionArray []PolicyAccessForwardingRuleConditionInput

func (PolicyAccessForwardingRuleConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyAccessForwardingRuleCondition)(nil)).Elem()
}

func (i PolicyAccessForwardingRuleConditionArray) ToPolicyAccessForwardingRuleConditionArrayOutput() PolicyAccessForwardingRuleConditionArrayOutput {
	return i.ToPolicyAccessForwardingRuleConditionArrayOutputWithContext(context.Background())
}

func (i PolicyAccessForwardingRuleConditionArray) ToPolicyAccessForwardingRuleConditionArrayOutputWithContext(ctx context.Context) PolicyAccessForwardingRuleConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAccessForwardingRuleConditionArrayOutput)
}

type PolicyAccessForwardingRuleConditionOutput struct{ *pulumi.OutputState }

func (PolicyAccessForwardingRuleConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAccessForwardingRuleCondition)(nil)).Elem()
}

func (o PolicyAccessForwardingRuleConditionOutput) ToPolicyAccessForwardingRuleConditionOutput() PolicyAccessForwardingRuleConditionOutput {
	return o
}

func (o PolicyAccessForwardingRuleConditionOutput) ToPolicyAccessForwardingRuleConditionOutputWithContext(ctx context.Context) PolicyAccessForwardingRuleConditionOutput {
	return o
}

func (o PolicyAccessForwardingRuleConditionOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAccessForwardingRuleCondition) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o PolicyAccessForwardingRuleConditionOutput) Negated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyAccessForwardingRuleCondition) *bool { return v.Negated }).(pulumi.BoolPtrOutput)
}

func (o PolicyAccessForwardingRuleConditionOutput) Operands() PolicyAccessForwardingRuleConditionOperandArrayOutput {
	return o.ApplyT(func(v PolicyAccessForwardingRuleCondition) []PolicyAccessForwardingRuleConditionOperand {
		return v.Operands
	}).(PolicyAccessForwardingRuleConditionOperandArrayOutput)
}

func (o PolicyAccessForwardingRuleConditionOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyAccessForwardingRuleCondition) string { return v.Operator }).(pulumi.StringOutput)
}

type PolicyAccessForwardingRuleConditionArrayOutput struct{ *pulumi.OutputState }

func (PolicyAccessForwardingRuleConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyAccessForwardingRuleCondition)(nil)).Elem()
}

func (o PolicyAccessForwardingRuleConditionArrayOutput) ToPolicyAccessForwardingRuleConditionArrayOutput() PolicyAccessForwardingRuleConditionArrayOutput {
	return o
}

func (o PolicyAccessForwardingRuleConditionArrayOutput) ToPolicyAccessForwardingRuleConditionArrayOutputWithContext(ctx context.Context) PolicyAccessForwardingRuleConditionArrayOutput {
	return o
}

func (o PolicyAccessForwardingRuleConditionArrayOutput) Index(i pulumi.IntInput) PolicyAccessForwardingRuleConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyAccessForwardingRuleCondition {
		return vs[0].([]PolicyAccessForwardingRuleCondition)[vs[1].(int)]
	}).(PolicyAccessForwardingRuleConditionOutput)
}

type PolicyAccessForwardingRuleConditionOperand struct {
	Id         *string  `pulumi:"id"`
	IdpId      *string  `pulumi:"idpId"`
	Lhs        string   `pulumi:"lhs"`
	Name       *string  `pulumi:"name"`
	ObjectType string   `pulumi:"objectType"`
	Rhs        *string  `pulumi:"rhs"`
	RhsLists   []string `pulumi:"rhsLists"`
}

// PolicyAccessForwardingRuleConditionOperandInput is an input type that accepts PolicyAccessForwardingRuleConditionOperandArgs and PolicyAccessForwardingRuleConditionOperandOutput values.
// You can construct a concrete instance of `PolicyAccessForwardingRuleConditionOperandInput` via:
//
//	PolicyAccessForwardingRuleConditionOperandArgs{...}
type PolicyAccessForwardingRuleConditionOperandInput interface {
	pulumi.Input

	ToPolicyAccessForwardingRuleConditionOperandOutput() PolicyAccessForwardingRuleConditionOperandOutput
	ToPolicyAccessForwardingRuleConditionOperandOutputWithContext(context.Context) PolicyAccessForwardingRuleConditionOperandOutput
}

type PolicyAccessForwardingRuleConditionOperandArgs struct {
	Id         pulumi.StringPtrInput   `pulumi:"id"`
	IdpId      pulumi.StringPtrInput   `pulumi:"idpId"`
	Lhs        pulumi.StringInput      `pulumi:"lhs"`
	Name       pulumi.StringPtrInput   `pulumi:"name"`
	ObjectType pulumi.StringInput      `pulumi:"objectType"`
	Rhs        pulumi.StringPtrInput   `pulumi:"rhs"`
	RhsLists   pulumi.StringArrayInput `pulumi:"rhsLists"`
}

func (PolicyAccessForwardingRuleConditionOperandArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAccessForwardingRuleConditionOperand)(nil)).Elem()
}

func (i PolicyAccessForwardingRuleConditionOperandArgs) ToPolicyAccessForwardingRuleConditionOperandOutput() PolicyAccessForwardingRuleConditionOperandOutput {
	return i.ToPolicyAccessForwardingRuleConditionOperandOutputWithContext(context.Background())
}

func (i PolicyAccessForwardingRuleConditionOperandArgs) ToPolicyAccessForwardingRuleConditionOperandOutputWithContext(ctx context.Context) PolicyAccessForwardingRuleConditionOperandOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAccessForwardingRuleConditionOperandOutput)
}

// PolicyAccessForwardingRuleConditionOperandArrayInput is an input type that accepts PolicyAccessForwardingRuleConditionOperandArray and PolicyAccessForwardingRuleConditionOperandArrayOutput values.
// You can construct a concrete instance of `PolicyAccessForwardingRuleConditionOperandArrayInput` via:
//
//	PolicyAccessForwardingRuleConditionOperandArray{ PolicyAccessForwardingRuleConditionOperandArgs{...} }
type PolicyAccessForwardingRuleConditionOperandArrayInput interface {
	pulumi.Input

	ToPolicyAccessForwardingRuleConditionOperandArrayOutput() PolicyAccessForwardingRuleConditionOperandArrayOutput
	ToPolicyAccessForwardingRuleConditionOperandArrayOutputWithContext(context.Context) PolicyAccessForwardingRuleConditionOperandArrayOutput
}

type PolicyAccessForwardingRuleConditionOperandArray []PolicyAccessForwardingRuleConditionOperandInput

func (PolicyAccessForwardingRuleConditionOperandArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyAccessForwardingRuleConditionOperand)(nil)).Elem()
}

func (i PolicyAccessForwardingRuleConditionOperandArray) ToPolicyAccessForwardingRuleConditionOperandArrayOutput() PolicyAccessForwardingRuleConditionOperandArrayOutput {
	return i.ToPolicyAccessForwardingRuleConditionOperandArrayOutputWithContext(context.Background())
}

func (i PolicyAccessForwardingRuleConditionOperandArray) ToPolicyAccessForwardingRuleConditionOperandArrayOutputWithContext(ctx context.Context) PolicyAccessForwardingRuleConditionOperandArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAccessForwardingRuleConditionOperandArrayOutput)
}

type PolicyAccessForwardingRuleConditionOperandOutput struct{ *pulumi.OutputState }

func (PolicyAccessForwardingRuleConditionOperandOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAccessForwardingRuleConditionOperand)(nil)).Elem()
}

func (o PolicyAccessForwardingRuleConditionOperandOutput) ToPolicyAccessForwardingRuleConditionOperandOutput() PolicyAccessForwardingRuleConditionOperandOutput {
	return o
}

func (o PolicyAccessForwardingRuleConditionOperandOutput) ToPolicyAccessForwardingRuleConditionOperandOutputWithContext(ctx context.Context) PolicyAccessForwardingRuleConditionOperandOutput {
	return o
}

func (o PolicyAccessForwardingRuleConditionOperandOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAccessForwardingRuleConditionOperand) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o PolicyAccessForwardingRuleConditionOperandOutput) IdpId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAccessForwardingRuleConditionOperand) *string { return v.IdpId }).(pulumi.StringPtrOutput)
}

func (o PolicyAccessForwardingRuleConditionOperandOutput) Lhs() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyAccessForwardingRuleConditionOperand) string { return v.Lhs }).(pulumi.StringOutput)
}

func (o PolicyAccessForwardingRuleConditionOperandOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAccessForwardingRuleConditionOperand) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o PolicyAccessForwardingRuleConditionOperandOutput) ObjectType() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyAccessForwardingRuleConditionOperand) string { return v.ObjectType }).(pulumi.StringOutput)
}

func (o PolicyAccessForwardingRuleConditionOperandOutput) Rhs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAccessForwardingRuleConditionOperand) *string { return v.Rhs }).(pulumi.StringPtrOutput)
}

func (o PolicyAccessForwardingRuleConditionOperandOutput) RhsLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyAccessForwardingRuleConditionOperand) []string { return v.RhsLists }).(pulumi.StringArrayOutput)
}

type PolicyAccessForwardingRuleConditionOperandArrayOutput struct{ *pulumi.OutputState }

func (PolicyAccessForwardingRuleConditionOperandArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyAccessForwardingRuleConditionOperand)(nil)).Elem()
}

func (o PolicyAccessForwardingRuleConditionOperandArrayOutput) ToPolicyAccessForwardingRuleConditionOperandArrayOutput() PolicyAccessForwardingRuleConditionOperandArrayOutput {
	return o
}

func (o PolicyAccessForwardingRuleConditionOperandArrayOutput) ToPolicyAccessForwardingRuleConditionOperandArrayOutputWithContext(ctx context.Context) PolicyAccessForwardingRuleConditionOperandArrayOutput {
	return o
}

func (o PolicyAccessForwardingRuleConditionOperandArrayOutput) Index(i pulumi.IntInput) PolicyAccessForwardingRuleConditionOperandOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyAccessForwardingRuleConditionOperand {
		return vs[0].([]PolicyAccessForwardingRuleConditionOperand)[vs[1].(int)]
	}).(PolicyAccessForwardingRuleConditionOperandOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyAccessForwardingRuleConditionInput)(nil)).Elem(), PolicyAccessForwardingRuleConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyAccessForwardingRuleConditionArrayInput)(nil)).Elem(), PolicyAccessForwardingRuleConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyAccessForwardingRuleConditionOperandInput)(nil)).Elem(), PolicyAccessForwardingRuleConditionOperandArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyAccessForwardingRuleConditionOperandArrayInput)(nil)).Elem(), PolicyAccessForwardingRuleConditionOperandArray{})
	pulumi.RegisterOutputType(PolicyAccessForwardingRuleConditionOutput{})
	pulumi.RegisterOutputType(PolicyAccessForwardingRuleConditionArrayOutput{})
	pulumi.RegisterOutputType(PolicyAccessForwardingRuleConditionOperandOutput{})
	pulumi.RegisterOutputType(PolicyAccessForwardingRuleConditionOperandArrayOutput{})
}
