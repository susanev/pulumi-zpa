// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zpa

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **zpa_lss_config_controller** resource creates and manages Log Streaming Service (LSS) in the Zscaler Private Access cloud.
//
// ## Example 1 Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zpa/sdk/go/zpa"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			zpnAstAuthLog, err := zpa.GetZPALSSLogTypeFormats(ctx, &zpa.GetZPALSSLogTypeFormatsArgs{
//				LogType: "zpn_ast_auth_log",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = zpa.NewZPALSSConfigController(ctx, "example", &zpa.ZPALSSConfigControllerArgs{
//				Config: &zpa.ZPALSSConfigControllerConfigArgs{
//					Name:          pulumi.String("Example"),
//					Description:   pulumi.String("Example"),
//					Enabled:       pulumi.Bool(true),
//					Format:        *pulumi.String(zpnAstAuthLog.Json),
//					LssHost:       pulumi.String("splunk.acme.com"),
//					LssPort:       pulumi.String("11000"),
//					SourceLogType: pulumi.String("zpn_ast_auth_log"),
//					UseTls:        pulumi.Bool(true),
//					Filters: pulumi.StringArray{
//						pulumi.String("ZPN_STATUS_AUTH_FAILED"),
//						pulumi.String("ZPN_STATUS_DISCONNECTED"),
//						pulumi.String("ZPN_STATUS_AUTHENTICATED"),
//					},
//				},
//				ConnectorGroups: zpa.ZPALSSConfigControllerConnectorGroupArray{
//					&zpa.ZPALSSConfigControllerConnectorGroupArgs{
//						Ids: pulumi.StringArray{
//							zpa_app_connector_group.Example.Id,
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Example 2 Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zpa/sdk/go/zpa"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			zpnTransLog, err := zpa.GetZPALSSLogTypeFormats(ctx, &zpa.GetZPALSSLogTypeFormatsArgs{
//				LogType: "zpn_trans_log",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			lssSiemPolicy, err := zpa.GetZPAPolicyType(ctx, &zpa.GetZPAPolicyTypeArgs{
//				PolicyType: pulumi.StringRef("SIEM_POLICY"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = zpa.NewZPALSSConfigController(ctx, "lssUserActivity", &zpa.ZPALSSConfigControllerArgs{
//				Config: &zpa.ZPALSSConfigControllerConfigArgs{
//					Name:          pulumi.String("LSS User Activity"),
//					Description:   pulumi.String("LSS User Activity"),
//					Enabled:       pulumi.Bool(true),
//					Format:        *pulumi.String(zpnTransLog.Json),
//					LssHost:       pulumi.String("splunk.acme.com"),
//					LssPort:       pulumi.String("11001"),
//					SourceLogType: pulumi.String("zpn_trans_log"),
//					UseTls:        pulumi.Bool(true),
//				},
//				PolicyRuleResource: &zpa.ZPALSSConfigControllerPolicyRuleResourceArgs{
//					Name:        pulumi.String("policy_rule_resource-lss_user_activity"),
//					Action:      pulumi.String("ALLOW"),
//					PolicySetId: *pulumi.String(lssSiemPolicy.Id),
//					Conditions: zpa.ZPALSSConfigControllerPolicyRuleResourceConditionArray{
//						&zpa.ZPALSSConfigControllerPolicyRuleResourceConditionArgs{
//							Negated:  pulumi.Bool(false),
//							Operator: pulumi.String("OR"),
//							Operands: zpa.ZPALSSConfigControllerPolicyRuleResourceConditionOperandArray{
//								&zpa.ZPALSSConfigControllerPolicyRuleResourceConditionOperandArgs{
//									ObjectType: pulumi.String("CLIENT_TYPE"),
//									Values: pulumi.StringArray{
//										pulumi.String("zpn_client_type_exporter"),
//									},
//								},
//								&zpa.ZPALSSConfigControllerPolicyRuleResourceConditionOperandArgs{
//									ObjectType: pulumi.String("CLIENT_TYPE"),
//									Values: pulumi.StringArray{
//										pulumi.String("zpn_client_type_ip_anchoring"),
//									},
//								},
//								&zpa.ZPALSSConfigControllerPolicyRuleResourceConditionOperandArgs{
//									ObjectType: pulumi.String("CLIENT_TYPE"),
//									Values: pulumi.StringArray{
//										pulumi.String("zpn_client_type_zapp"),
//									},
//								},
//								&zpa.ZPALSSConfigControllerPolicyRuleResourceConditionOperandArgs{
//									ObjectType: pulumi.String("CLIENT_TYPE"),
//									Values: pulumi.StringArray{
//										pulumi.String("zpn_client_type_edge_connector"),
//									},
//								},
//								&zpa.ZPALSSConfigControllerPolicyRuleResourceConditionOperandArgs{
//									ObjectType: pulumi.String("CLIENT_TYPE"),
//									Values: pulumi.StringArray{
//										pulumi.String("zpn_client_type_machine_tunnel"),
//									},
//								},
//								&zpa.ZPALSSConfigControllerPolicyRuleResourceConditionOperandArgs{
//									ObjectType: pulumi.String("CLIENT_TYPE"),
//									Values: pulumi.StringArray{
//										pulumi.String("zpn_client_type_browser_isolation"),
//									},
//								},
//								&zpa.ZPALSSConfigControllerPolicyRuleResourceConditionOperandArgs{
//									ObjectType: pulumi.String("CLIENT_TYPE"),
//									Values: pulumi.StringArray{
//										pulumi.String("zpn_client_type_slogger"),
//									},
//								},
//							},
//						},
//					},
//				},
//				ConnectorGroups: zpa.ZPALSSConfigControllerConnectorGroupArray{
//					&zpa.ZPALSSConfigControllerConnectorGroupArgs{
//						Ids: pulumi.StringArray{
//							zpa_app_connector_group.Example.Id,
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language. [Visit](https://github.com/zscaler/zscaler-terraformer)
type ZPALSSConfigController struct {
	pulumi.CustomResourceState

	// (Required)
	Config ZPALSSConfigControllerConfigPtrOutput `pulumi:"config"`
	// (Optional)
	ConnectorGroups ZPALSSConfigControllerConnectorGroupArrayOutput `pulumi:"connectorGroups"`
	PolicyRuleId    pulumi.StringOutput                             `pulumi:"policyRuleId"`
	// (Optional)
	PolicyRuleResource ZPALSSConfigControllerPolicyRuleResourcePtrOutput `pulumi:"policyRuleResource"`
}

// NewZPALSSConfigController registers a new resource with the given unique name, arguments, and options.
func NewZPALSSConfigController(ctx *pulumi.Context,
	name string, args *ZPALSSConfigControllerArgs, opts ...pulumi.ResourceOption) (*ZPALSSConfigController, error) {
	if args == nil {
		args = &ZPALSSConfigControllerArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource ZPALSSConfigController
	err := ctx.RegisterResource("zpa:index/zPALSSConfigController:ZPALSSConfigController", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZPALSSConfigController gets an existing ZPALSSConfigController resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZPALSSConfigController(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZPALSSConfigControllerState, opts ...pulumi.ResourceOption) (*ZPALSSConfigController, error) {
	var resource ZPALSSConfigController
	err := ctx.ReadResource("zpa:index/zPALSSConfigController:ZPALSSConfigController", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ZPALSSConfigController resources.
type zpalssconfigControllerState struct {
	// (Required)
	Config *ZPALSSConfigControllerConfig `pulumi:"config"`
	// (Optional)
	ConnectorGroups []ZPALSSConfigControllerConnectorGroup `pulumi:"connectorGroups"`
	PolicyRuleId    *string                                `pulumi:"policyRuleId"`
	// (Optional)
	PolicyRuleResource *ZPALSSConfigControllerPolicyRuleResource `pulumi:"policyRuleResource"`
}

type ZPALSSConfigControllerState struct {
	// (Required)
	Config ZPALSSConfigControllerConfigPtrInput
	// (Optional)
	ConnectorGroups ZPALSSConfigControllerConnectorGroupArrayInput
	PolicyRuleId    pulumi.StringPtrInput
	// (Optional)
	PolicyRuleResource ZPALSSConfigControllerPolicyRuleResourcePtrInput
}

func (ZPALSSConfigControllerState) ElementType() reflect.Type {
	return reflect.TypeOf((*zpalssconfigControllerState)(nil)).Elem()
}

type zpalssconfigControllerArgs struct {
	// (Required)
	Config *ZPALSSConfigControllerConfig `pulumi:"config"`
	// (Optional)
	ConnectorGroups []ZPALSSConfigControllerConnectorGroup `pulumi:"connectorGroups"`
	// (Optional)
	PolicyRuleResource *ZPALSSConfigControllerPolicyRuleResource `pulumi:"policyRuleResource"`
}

// The set of arguments for constructing a ZPALSSConfigController resource.
type ZPALSSConfigControllerArgs struct {
	// (Required)
	Config ZPALSSConfigControllerConfigPtrInput
	// (Optional)
	ConnectorGroups ZPALSSConfigControllerConnectorGroupArrayInput
	// (Optional)
	PolicyRuleResource ZPALSSConfigControllerPolicyRuleResourcePtrInput
}

func (ZPALSSConfigControllerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*zpalssconfigControllerArgs)(nil)).Elem()
}

type ZPALSSConfigControllerInput interface {
	pulumi.Input

	ToZPALSSConfigControllerOutput() ZPALSSConfigControllerOutput
	ToZPALSSConfigControllerOutputWithContext(ctx context.Context) ZPALSSConfigControllerOutput
}

func (*ZPALSSConfigController) ElementType() reflect.Type {
	return reflect.TypeOf((**ZPALSSConfigController)(nil)).Elem()
}

func (i *ZPALSSConfigController) ToZPALSSConfigControllerOutput() ZPALSSConfigControllerOutput {
	return i.ToZPALSSConfigControllerOutputWithContext(context.Background())
}

func (i *ZPALSSConfigController) ToZPALSSConfigControllerOutputWithContext(ctx context.Context) ZPALSSConfigControllerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZPALSSConfigControllerOutput)
}

// ZPALSSConfigControllerArrayInput is an input type that accepts ZPALSSConfigControllerArray and ZPALSSConfigControllerArrayOutput values.
// You can construct a concrete instance of `ZPALSSConfigControllerArrayInput` via:
//
//	ZPALSSConfigControllerArray{ ZPALSSConfigControllerArgs{...} }
type ZPALSSConfigControllerArrayInput interface {
	pulumi.Input

	ToZPALSSConfigControllerArrayOutput() ZPALSSConfigControllerArrayOutput
	ToZPALSSConfigControllerArrayOutputWithContext(context.Context) ZPALSSConfigControllerArrayOutput
}

type ZPALSSConfigControllerArray []ZPALSSConfigControllerInput

func (ZPALSSConfigControllerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZPALSSConfigController)(nil)).Elem()
}

func (i ZPALSSConfigControllerArray) ToZPALSSConfigControllerArrayOutput() ZPALSSConfigControllerArrayOutput {
	return i.ToZPALSSConfigControllerArrayOutputWithContext(context.Background())
}

func (i ZPALSSConfigControllerArray) ToZPALSSConfigControllerArrayOutputWithContext(ctx context.Context) ZPALSSConfigControllerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZPALSSConfigControllerArrayOutput)
}

// ZPALSSConfigControllerMapInput is an input type that accepts ZPALSSConfigControllerMap and ZPALSSConfigControllerMapOutput values.
// You can construct a concrete instance of `ZPALSSConfigControllerMapInput` via:
//
//	ZPALSSConfigControllerMap{ "key": ZPALSSConfigControllerArgs{...} }
type ZPALSSConfigControllerMapInput interface {
	pulumi.Input

	ToZPALSSConfigControllerMapOutput() ZPALSSConfigControllerMapOutput
	ToZPALSSConfigControllerMapOutputWithContext(context.Context) ZPALSSConfigControllerMapOutput
}

type ZPALSSConfigControllerMap map[string]ZPALSSConfigControllerInput

func (ZPALSSConfigControllerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZPALSSConfigController)(nil)).Elem()
}

func (i ZPALSSConfigControllerMap) ToZPALSSConfigControllerMapOutput() ZPALSSConfigControllerMapOutput {
	return i.ToZPALSSConfigControllerMapOutputWithContext(context.Background())
}

func (i ZPALSSConfigControllerMap) ToZPALSSConfigControllerMapOutputWithContext(ctx context.Context) ZPALSSConfigControllerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZPALSSConfigControllerMapOutput)
}

type ZPALSSConfigControllerOutput struct{ *pulumi.OutputState }

func (ZPALSSConfigControllerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZPALSSConfigController)(nil)).Elem()
}

func (o ZPALSSConfigControllerOutput) ToZPALSSConfigControllerOutput() ZPALSSConfigControllerOutput {
	return o
}

func (o ZPALSSConfigControllerOutput) ToZPALSSConfigControllerOutputWithContext(ctx context.Context) ZPALSSConfigControllerOutput {
	return o
}

// (Required)
func (o ZPALSSConfigControllerOutput) Config() ZPALSSConfigControllerConfigPtrOutput {
	return o.ApplyT(func(v *ZPALSSConfigController) ZPALSSConfigControllerConfigPtrOutput { return v.Config }).(ZPALSSConfigControllerConfigPtrOutput)
}

// (Optional)
func (o ZPALSSConfigControllerOutput) ConnectorGroups() ZPALSSConfigControllerConnectorGroupArrayOutput {
	return o.ApplyT(func(v *ZPALSSConfigController) ZPALSSConfigControllerConnectorGroupArrayOutput {
		return v.ConnectorGroups
	}).(ZPALSSConfigControllerConnectorGroupArrayOutput)
}

func (o ZPALSSConfigControllerOutput) PolicyRuleId() pulumi.StringOutput {
	return o.ApplyT(func(v *ZPALSSConfigController) pulumi.StringOutput { return v.PolicyRuleId }).(pulumi.StringOutput)
}

// (Optional)
func (o ZPALSSConfigControllerOutput) PolicyRuleResource() ZPALSSConfigControllerPolicyRuleResourcePtrOutput {
	return o.ApplyT(func(v *ZPALSSConfigController) ZPALSSConfigControllerPolicyRuleResourcePtrOutput {
		return v.PolicyRuleResource
	}).(ZPALSSConfigControllerPolicyRuleResourcePtrOutput)
}

type ZPALSSConfigControllerArrayOutput struct{ *pulumi.OutputState }

func (ZPALSSConfigControllerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZPALSSConfigController)(nil)).Elem()
}

func (o ZPALSSConfigControllerArrayOutput) ToZPALSSConfigControllerArrayOutput() ZPALSSConfigControllerArrayOutput {
	return o
}

func (o ZPALSSConfigControllerArrayOutput) ToZPALSSConfigControllerArrayOutputWithContext(ctx context.Context) ZPALSSConfigControllerArrayOutput {
	return o
}

func (o ZPALSSConfigControllerArrayOutput) Index(i pulumi.IntInput) ZPALSSConfigControllerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ZPALSSConfigController {
		return vs[0].([]*ZPALSSConfigController)[vs[1].(int)]
	}).(ZPALSSConfigControllerOutput)
}

type ZPALSSConfigControllerMapOutput struct{ *pulumi.OutputState }

func (ZPALSSConfigControllerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZPALSSConfigController)(nil)).Elem()
}

func (o ZPALSSConfigControllerMapOutput) ToZPALSSConfigControllerMapOutput() ZPALSSConfigControllerMapOutput {
	return o
}

func (o ZPALSSConfigControllerMapOutput) ToZPALSSConfigControllerMapOutputWithContext(ctx context.Context) ZPALSSConfigControllerMapOutput {
	return o
}

func (o ZPALSSConfigControllerMapOutput) MapIndex(k pulumi.StringInput) ZPALSSConfigControllerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ZPALSSConfigController {
		return vs[0].(map[string]*ZPALSSConfigController)[vs[1].(string)]
	}).(ZPALSSConfigControllerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZPALSSConfigControllerInput)(nil)).Elem(), &ZPALSSConfigController{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZPALSSConfigControllerArrayInput)(nil)).Elem(), ZPALSSConfigControllerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZPALSSConfigControllerMapInput)(nil)).Elem(), ZPALSSConfigControllerMap{})
	pulumi.RegisterOutputType(ZPALSSConfigControllerOutput{})
	pulumi.RegisterOutputType(ZPALSSConfigControllerArrayOutput{})
	pulumi.RegisterOutputType(ZPALSSConfigControllerMapOutput{})
}
