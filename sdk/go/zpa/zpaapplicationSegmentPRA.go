// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zpa

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **zpa_application_segment_pra** resource creates an application segment for Privileged Remote Access in the Zscaler Private Access cloud. This resource can then be referenced in an access policy rule, access policy timeout rule, access policy client forwarding rule and inspection policy. This resource supports Privileged Remote Access for both `RDP` and `SSH`.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zpa/sdk/go/zpa"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := zpa.NewZPAApplicationSegmentPRA(ctx, "this", &zpa.ZPAApplicationSegmentPRAArgs{
//				Description:     pulumi.String("PRA_Example"),
//				Enabled:         pulumi.Bool(true),
//				HealthReporting: pulumi.String("ON_ACCESS"),
//				BypassType:      pulumi.String("NEVER"),
//				IsCnameEnabled:  pulumi.Bool(true),
//				TcpPortRanges: pulumi.StringArray{
//					pulumi.String("22"),
//					pulumi.String("22"),
//					pulumi.String("3389"),
//					pulumi.String("3389"),
//				},
//				DomainNames: pulumi.StringArray{
//					pulumi.String("ssh_pra.example.com"),
//					pulumi.String("rdp_pra.example.com"),
//				},
//				SegmentGroupId: pulumi.Any(zpa_segment_group.This.Id),
//				ServerGroups: zpa.ZPAApplicationSegmentPRAServerGroupArray{
//					&zpa.ZPAApplicationSegmentPRAServerGroupArgs{
//						Ids: pulumi.StringArray{
//							zpa_server_group.This.Id,
//						},
//					},
//				},
//				CommonAppsDto: &zpa.ZPAApplicationSegmentPRACommonAppsDtoArgs{
//					AppsConfigs: zpa.ZPAApplicationSegmentPRACommonAppsDtoAppsConfigArray{
//						&zpa.ZPAApplicationSegmentPRACommonAppsDtoAppsConfigArgs{
//							Name:                pulumi.String("ssh_pra"),
//							Domain:              pulumi.String("ssh_pra.example.com"),
//							ApplicationProtocol: pulumi.String("SSH"),
//							ApplicationPort:     pulumi.String("22"),
//							Enabled:             pulumi.Bool(true),
//							AppTypes: pulumi.StringArray{
//								pulumi.String("SECURE_REMOTE_ACCESS"),
//							},
//						},
//						&zpa.ZPAApplicationSegmentPRACommonAppsDtoAppsConfigArgs{
//							Name:                pulumi.String("rdp_pra"),
//							Domain:              pulumi.String("rdp_pra.example.com"),
//							ApplicationProtocol: pulumi.String("RDP"),
//							ConnectionSecurity:  pulumi.String("ANY"),
//							ApplicationPort:     pulumi.String("3389"),
//							Enabled:             pulumi.Bool(true),
//							AppTypes: pulumi.StringArray{
//								pulumi.String("SECURE_REMOTE_ACCESS"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language. [Visit](https://github.com/zscaler/zscaler-terraformer) Application Segment can be imported by using `<APPLICATION SEGMENT ID>` or `<APPLICATION SEGMENT NAME>` as the import ID.
//
// ```sh
//
//	$ pulumi import zpa:index/zPAApplicationSegmentPRA:ZPAApplicationSegmentPRA example <application_segment_id>
//
// ```
//
//	or
//
// ```sh
//
//	$ pulumi import zpa:index/zPAApplicationSegmentPRA:ZPAApplicationSegmentPRA example <application_segment_name>
//
// ```
type ZPAApplicationSegmentPRA struct {
	pulumi.CustomResourceState

	// (Optional) Indicates whether users can bypass ZPA to access applications.
	BypassType pulumi.StringOutput `pulumi:"bypassType"`
	// List of applications (e.g., Inspection, Browser Access or Privileged Remote Access)
	// * `apps_config:` - (Required) List of applications to be configured
	CommonAppsDto ZPAApplicationSegmentPRACommonAppsDtoOutput `pulumi:"commonAppsDto"`
	// (Optional)
	ConfigSpace pulumi.StringPtrOutput `pulumi:"configSpace"`
	// (Optional) Description of the application.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// List of domains and IPs.
	DomainNames pulumi.StringArrayOutput `pulumi:"domainNames"`
	// (Optional) Whether Double Encryption is enabled or disabled for the app.
	DoubleEncrypt pulumi.BoolOutput `pulumi:"doubleEncrypt"`
	// Whether this application is enabled or not
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// (Optional)
	HealthCheckType pulumi.StringPtrOutput `pulumi:"healthCheckType"`
	// (Optional) Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.
	HealthReporting pulumi.StringPtrOutput `pulumi:"healthReporting"`
	// (Optional)
	IcmpAccessType pulumi.StringOutput `pulumi:"icmpAccessType"`
	// (Optional)
	IpAnchored pulumi.BoolOutput `pulumi:"ipAnchored"`
	// (Optional) Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors.
	IsCnameEnabled pulumi.BoolOutput `pulumi:"isCnameEnabled"`
	// Name of the Privileged Remote Access
	Name pulumi.StringOutput `pulumi:"name"`
	// (Optional)
	PassiveHealthEnabled pulumi.BoolOutput `pulumi:"passiveHealthEnabled"`
	// List of Segment Group IDs
	SegmentGroupId   pulumi.StringOutput `pulumi:"segmentGroupId"`
	SegmentGroupName pulumi.StringOutput `pulumi:"segmentGroupName"`
	// List of Server Group IDs
	ServerGroups ZPAApplicationSegmentPRAServerGroupArrayOutput `pulumi:"serverGroups"`
	// TCP port ranges used to access the app.
	TcpPortRanges pulumi.StringArrayOutput `pulumi:"tcpPortRanges"`
	// UDP port ranges used to access the app.
	UdpPortRanges pulumi.StringArrayOutput `pulumi:"udpPortRanges"`
}

// NewZPAApplicationSegmentPRA registers a new resource with the given unique name, arguments, and options.
func NewZPAApplicationSegmentPRA(ctx *pulumi.Context,
	name string, args *ZPAApplicationSegmentPRAArgs, opts ...pulumi.ResourceOption) (*ZPAApplicationSegmentPRA, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SegmentGroupId == nil {
		return nil, errors.New("invalid value for required argument 'SegmentGroupId'")
	}
	if args.ServerGroups == nil {
		return nil, errors.New("invalid value for required argument 'ServerGroups'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ZPAApplicationSegmentPRA
	err := ctx.RegisterResource("zpa:index/zPAApplicationSegmentPRA:ZPAApplicationSegmentPRA", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZPAApplicationSegmentPRA gets an existing ZPAApplicationSegmentPRA resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZPAApplicationSegmentPRA(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZPAApplicationSegmentPRAState, opts ...pulumi.ResourceOption) (*ZPAApplicationSegmentPRA, error) {
	var resource ZPAApplicationSegmentPRA
	err := ctx.ReadResource("zpa:index/zPAApplicationSegmentPRA:ZPAApplicationSegmentPRA", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ZPAApplicationSegmentPRA resources.
type zpaapplicationSegmentPRAState struct {
	// (Optional) Indicates whether users can bypass ZPA to access applications.
	BypassType *string `pulumi:"bypassType"`
	// List of applications (e.g., Inspection, Browser Access or Privileged Remote Access)
	// * `apps_config:` - (Required) List of applications to be configured
	CommonAppsDto *ZPAApplicationSegmentPRACommonAppsDto `pulumi:"commonAppsDto"`
	// (Optional)
	ConfigSpace *string `pulumi:"configSpace"`
	// (Optional) Description of the application.
	Description *string `pulumi:"description"`
	// List of domains and IPs.
	DomainNames []string `pulumi:"domainNames"`
	// (Optional) Whether Double Encryption is enabled or disabled for the app.
	DoubleEncrypt *bool `pulumi:"doubleEncrypt"`
	// Whether this application is enabled or not
	Enabled *bool `pulumi:"enabled"`
	// (Optional)
	HealthCheckType *string `pulumi:"healthCheckType"`
	// (Optional) Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.
	HealthReporting *string `pulumi:"healthReporting"`
	// (Optional)
	IcmpAccessType *string `pulumi:"icmpAccessType"`
	// (Optional)
	IpAnchored *bool `pulumi:"ipAnchored"`
	// (Optional) Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors.
	IsCnameEnabled *bool `pulumi:"isCnameEnabled"`
	// Name of the Privileged Remote Access
	Name *string `pulumi:"name"`
	// (Optional)
	PassiveHealthEnabled *bool `pulumi:"passiveHealthEnabled"`
	// List of Segment Group IDs
	SegmentGroupId   *string `pulumi:"segmentGroupId"`
	SegmentGroupName *string `pulumi:"segmentGroupName"`
	// List of Server Group IDs
	ServerGroups []ZPAApplicationSegmentPRAServerGroup `pulumi:"serverGroups"`
	// TCP port ranges used to access the app.
	TcpPortRanges []string `pulumi:"tcpPortRanges"`
	// UDP port ranges used to access the app.
	UdpPortRanges []string `pulumi:"udpPortRanges"`
}

type ZPAApplicationSegmentPRAState struct {
	// (Optional) Indicates whether users can bypass ZPA to access applications.
	BypassType pulumi.StringPtrInput
	// List of applications (e.g., Inspection, Browser Access or Privileged Remote Access)
	// * `apps_config:` - (Required) List of applications to be configured
	CommonAppsDto ZPAApplicationSegmentPRACommonAppsDtoPtrInput
	// (Optional)
	ConfigSpace pulumi.StringPtrInput
	// (Optional) Description of the application.
	Description pulumi.StringPtrInput
	// List of domains and IPs.
	DomainNames pulumi.StringArrayInput
	// (Optional) Whether Double Encryption is enabled or disabled for the app.
	DoubleEncrypt pulumi.BoolPtrInput
	// Whether this application is enabled or not
	Enabled pulumi.BoolPtrInput
	// (Optional)
	HealthCheckType pulumi.StringPtrInput
	// (Optional) Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.
	HealthReporting pulumi.StringPtrInput
	// (Optional)
	IcmpAccessType pulumi.StringPtrInput
	// (Optional)
	IpAnchored pulumi.BoolPtrInput
	// (Optional) Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors.
	IsCnameEnabled pulumi.BoolPtrInput
	// Name of the Privileged Remote Access
	Name pulumi.StringPtrInput
	// (Optional)
	PassiveHealthEnabled pulumi.BoolPtrInput
	// List of Segment Group IDs
	SegmentGroupId   pulumi.StringPtrInput
	SegmentGroupName pulumi.StringPtrInput
	// List of Server Group IDs
	ServerGroups ZPAApplicationSegmentPRAServerGroupArrayInput
	// TCP port ranges used to access the app.
	TcpPortRanges pulumi.StringArrayInput
	// UDP port ranges used to access the app.
	UdpPortRanges pulumi.StringArrayInput
}

func (ZPAApplicationSegmentPRAState) ElementType() reflect.Type {
	return reflect.TypeOf((*zpaapplicationSegmentPRAState)(nil)).Elem()
}

type zpaapplicationSegmentPRAArgs struct {
	// (Optional) Indicates whether users can bypass ZPA to access applications.
	BypassType *string `pulumi:"bypassType"`
	// List of applications (e.g., Inspection, Browser Access or Privileged Remote Access)
	// * `apps_config:` - (Required) List of applications to be configured
	CommonAppsDto *ZPAApplicationSegmentPRACommonAppsDto `pulumi:"commonAppsDto"`
	// (Optional)
	ConfigSpace *string `pulumi:"configSpace"`
	// (Optional) Description of the application.
	Description *string `pulumi:"description"`
	// List of domains and IPs.
	DomainNames []string `pulumi:"domainNames"`
	// (Optional) Whether Double Encryption is enabled or disabled for the app.
	DoubleEncrypt *bool `pulumi:"doubleEncrypt"`
	// Whether this application is enabled or not
	Enabled *bool `pulumi:"enabled"`
	// (Optional)
	HealthCheckType *string `pulumi:"healthCheckType"`
	// (Optional) Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.
	HealthReporting *string `pulumi:"healthReporting"`
	// (Optional)
	IcmpAccessType *string `pulumi:"icmpAccessType"`
	// (Optional)
	IpAnchored *bool `pulumi:"ipAnchored"`
	// (Optional) Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors.
	IsCnameEnabled *bool `pulumi:"isCnameEnabled"`
	// Name of the Privileged Remote Access
	Name *string `pulumi:"name"`
	// (Optional)
	PassiveHealthEnabled *bool `pulumi:"passiveHealthEnabled"`
	// List of Segment Group IDs
	SegmentGroupId   string  `pulumi:"segmentGroupId"`
	SegmentGroupName *string `pulumi:"segmentGroupName"`
	// List of Server Group IDs
	ServerGroups []ZPAApplicationSegmentPRAServerGroup `pulumi:"serverGroups"`
	// TCP port ranges used to access the app.
	TcpPortRanges []string `pulumi:"tcpPortRanges"`
	// UDP port ranges used to access the app.
	UdpPortRanges []string `pulumi:"udpPortRanges"`
}

// The set of arguments for constructing a ZPAApplicationSegmentPRA resource.
type ZPAApplicationSegmentPRAArgs struct {
	// (Optional) Indicates whether users can bypass ZPA to access applications.
	BypassType pulumi.StringPtrInput
	// List of applications (e.g., Inspection, Browser Access or Privileged Remote Access)
	// * `apps_config:` - (Required) List of applications to be configured
	CommonAppsDto ZPAApplicationSegmentPRACommonAppsDtoPtrInput
	// (Optional)
	ConfigSpace pulumi.StringPtrInput
	// (Optional) Description of the application.
	Description pulumi.StringPtrInput
	// List of domains and IPs.
	DomainNames pulumi.StringArrayInput
	// (Optional) Whether Double Encryption is enabled or disabled for the app.
	DoubleEncrypt pulumi.BoolPtrInput
	// Whether this application is enabled or not
	Enabled pulumi.BoolPtrInput
	// (Optional)
	HealthCheckType pulumi.StringPtrInput
	// (Optional) Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.
	HealthReporting pulumi.StringPtrInput
	// (Optional)
	IcmpAccessType pulumi.StringPtrInput
	// (Optional)
	IpAnchored pulumi.BoolPtrInput
	// (Optional) Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors.
	IsCnameEnabled pulumi.BoolPtrInput
	// Name of the Privileged Remote Access
	Name pulumi.StringPtrInput
	// (Optional)
	PassiveHealthEnabled pulumi.BoolPtrInput
	// List of Segment Group IDs
	SegmentGroupId   pulumi.StringInput
	SegmentGroupName pulumi.StringPtrInput
	// List of Server Group IDs
	ServerGroups ZPAApplicationSegmentPRAServerGroupArrayInput
	// TCP port ranges used to access the app.
	TcpPortRanges pulumi.StringArrayInput
	// UDP port ranges used to access the app.
	UdpPortRanges pulumi.StringArrayInput
}

func (ZPAApplicationSegmentPRAArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*zpaapplicationSegmentPRAArgs)(nil)).Elem()
}

type ZPAApplicationSegmentPRAInput interface {
	pulumi.Input

	ToZPAApplicationSegmentPRAOutput() ZPAApplicationSegmentPRAOutput
	ToZPAApplicationSegmentPRAOutputWithContext(ctx context.Context) ZPAApplicationSegmentPRAOutput
}

func (*ZPAApplicationSegmentPRA) ElementType() reflect.Type {
	return reflect.TypeOf((**ZPAApplicationSegmentPRA)(nil)).Elem()
}

func (i *ZPAApplicationSegmentPRA) ToZPAApplicationSegmentPRAOutput() ZPAApplicationSegmentPRAOutput {
	return i.ToZPAApplicationSegmentPRAOutputWithContext(context.Background())
}

func (i *ZPAApplicationSegmentPRA) ToZPAApplicationSegmentPRAOutputWithContext(ctx context.Context) ZPAApplicationSegmentPRAOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZPAApplicationSegmentPRAOutput)
}

// ZPAApplicationSegmentPRAArrayInput is an input type that accepts ZPAApplicationSegmentPRAArray and ZPAApplicationSegmentPRAArrayOutput values.
// You can construct a concrete instance of `ZPAApplicationSegmentPRAArrayInput` via:
//
//	ZPAApplicationSegmentPRAArray{ ZPAApplicationSegmentPRAArgs{...} }
type ZPAApplicationSegmentPRAArrayInput interface {
	pulumi.Input

	ToZPAApplicationSegmentPRAArrayOutput() ZPAApplicationSegmentPRAArrayOutput
	ToZPAApplicationSegmentPRAArrayOutputWithContext(context.Context) ZPAApplicationSegmentPRAArrayOutput
}

type ZPAApplicationSegmentPRAArray []ZPAApplicationSegmentPRAInput

func (ZPAApplicationSegmentPRAArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZPAApplicationSegmentPRA)(nil)).Elem()
}

func (i ZPAApplicationSegmentPRAArray) ToZPAApplicationSegmentPRAArrayOutput() ZPAApplicationSegmentPRAArrayOutput {
	return i.ToZPAApplicationSegmentPRAArrayOutputWithContext(context.Background())
}

func (i ZPAApplicationSegmentPRAArray) ToZPAApplicationSegmentPRAArrayOutputWithContext(ctx context.Context) ZPAApplicationSegmentPRAArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZPAApplicationSegmentPRAArrayOutput)
}

// ZPAApplicationSegmentPRAMapInput is an input type that accepts ZPAApplicationSegmentPRAMap and ZPAApplicationSegmentPRAMapOutput values.
// You can construct a concrete instance of `ZPAApplicationSegmentPRAMapInput` via:
//
//	ZPAApplicationSegmentPRAMap{ "key": ZPAApplicationSegmentPRAArgs{...} }
type ZPAApplicationSegmentPRAMapInput interface {
	pulumi.Input

	ToZPAApplicationSegmentPRAMapOutput() ZPAApplicationSegmentPRAMapOutput
	ToZPAApplicationSegmentPRAMapOutputWithContext(context.Context) ZPAApplicationSegmentPRAMapOutput
}

type ZPAApplicationSegmentPRAMap map[string]ZPAApplicationSegmentPRAInput

func (ZPAApplicationSegmentPRAMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZPAApplicationSegmentPRA)(nil)).Elem()
}

func (i ZPAApplicationSegmentPRAMap) ToZPAApplicationSegmentPRAMapOutput() ZPAApplicationSegmentPRAMapOutput {
	return i.ToZPAApplicationSegmentPRAMapOutputWithContext(context.Background())
}

func (i ZPAApplicationSegmentPRAMap) ToZPAApplicationSegmentPRAMapOutputWithContext(ctx context.Context) ZPAApplicationSegmentPRAMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZPAApplicationSegmentPRAMapOutput)
}

type ZPAApplicationSegmentPRAOutput struct{ *pulumi.OutputState }

func (ZPAApplicationSegmentPRAOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZPAApplicationSegmentPRA)(nil)).Elem()
}

func (o ZPAApplicationSegmentPRAOutput) ToZPAApplicationSegmentPRAOutput() ZPAApplicationSegmentPRAOutput {
	return o
}

func (o ZPAApplicationSegmentPRAOutput) ToZPAApplicationSegmentPRAOutputWithContext(ctx context.Context) ZPAApplicationSegmentPRAOutput {
	return o
}

// (Optional) Indicates whether users can bypass ZPA to access applications.
func (o ZPAApplicationSegmentPRAOutput) BypassType() pulumi.StringOutput {
	return o.ApplyT(func(v *ZPAApplicationSegmentPRA) pulumi.StringOutput { return v.BypassType }).(pulumi.StringOutput)
}

// List of applications (e.g., Inspection, Browser Access or Privileged Remote Access)
// * `apps_config:` - (Required) List of applications to be configured
func (o ZPAApplicationSegmentPRAOutput) CommonAppsDto() ZPAApplicationSegmentPRACommonAppsDtoOutput {
	return o.ApplyT(func(v *ZPAApplicationSegmentPRA) ZPAApplicationSegmentPRACommonAppsDtoOutput { return v.CommonAppsDto }).(ZPAApplicationSegmentPRACommonAppsDtoOutput)
}

// (Optional)
func (o ZPAApplicationSegmentPRAOutput) ConfigSpace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZPAApplicationSegmentPRA) pulumi.StringPtrOutput { return v.ConfigSpace }).(pulumi.StringPtrOutput)
}

// (Optional) Description of the application.
func (o ZPAApplicationSegmentPRAOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZPAApplicationSegmentPRA) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// List of domains and IPs.
func (o ZPAApplicationSegmentPRAOutput) DomainNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ZPAApplicationSegmentPRA) pulumi.StringArrayOutput { return v.DomainNames }).(pulumi.StringArrayOutput)
}

// (Optional) Whether Double Encryption is enabled or disabled for the app.
func (o ZPAApplicationSegmentPRAOutput) DoubleEncrypt() pulumi.BoolOutput {
	return o.ApplyT(func(v *ZPAApplicationSegmentPRA) pulumi.BoolOutput { return v.DoubleEncrypt }).(pulumi.BoolOutput)
}

// Whether this application is enabled or not
func (o ZPAApplicationSegmentPRAOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ZPAApplicationSegmentPRA) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// (Optional)
func (o ZPAApplicationSegmentPRAOutput) HealthCheckType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZPAApplicationSegmentPRA) pulumi.StringPtrOutput { return v.HealthCheckType }).(pulumi.StringPtrOutput)
}

// (Optional) Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.
func (o ZPAApplicationSegmentPRAOutput) HealthReporting() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZPAApplicationSegmentPRA) pulumi.StringPtrOutput { return v.HealthReporting }).(pulumi.StringPtrOutput)
}

// (Optional)
func (o ZPAApplicationSegmentPRAOutput) IcmpAccessType() pulumi.StringOutput {
	return o.ApplyT(func(v *ZPAApplicationSegmentPRA) pulumi.StringOutput { return v.IcmpAccessType }).(pulumi.StringOutput)
}

// (Optional)
func (o ZPAApplicationSegmentPRAOutput) IpAnchored() pulumi.BoolOutput {
	return o.ApplyT(func(v *ZPAApplicationSegmentPRA) pulumi.BoolOutput { return v.IpAnchored }).(pulumi.BoolOutput)
}

// (Optional) Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors.
func (o ZPAApplicationSegmentPRAOutput) IsCnameEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ZPAApplicationSegmentPRA) pulumi.BoolOutput { return v.IsCnameEnabled }).(pulumi.BoolOutput)
}

// Name of the Privileged Remote Access
func (o ZPAApplicationSegmentPRAOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ZPAApplicationSegmentPRA) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// (Optional)
func (o ZPAApplicationSegmentPRAOutput) PassiveHealthEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ZPAApplicationSegmentPRA) pulumi.BoolOutput { return v.PassiveHealthEnabled }).(pulumi.BoolOutput)
}

// List of Segment Group IDs
func (o ZPAApplicationSegmentPRAOutput) SegmentGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *ZPAApplicationSegmentPRA) pulumi.StringOutput { return v.SegmentGroupId }).(pulumi.StringOutput)
}

func (o ZPAApplicationSegmentPRAOutput) SegmentGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *ZPAApplicationSegmentPRA) pulumi.StringOutput { return v.SegmentGroupName }).(pulumi.StringOutput)
}

// List of Server Group IDs
func (o ZPAApplicationSegmentPRAOutput) ServerGroups() ZPAApplicationSegmentPRAServerGroupArrayOutput {
	return o.ApplyT(func(v *ZPAApplicationSegmentPRA) ZPAApplicationSegmentPRAServerGroupArrayOutput {
		return v.ServerGroups
	}).(ZPAApplicationSegmentPRAServerGroupArrayOutput)
}

// TCP port ranges used to access the app.
func (o ZPAApplicationSegmentPRAOutput) TcpPortRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ZPAApplicationSegmentPRA) pulumi.StringArrayOutput { return v.TcpPortRanges }).(pulumi.StringArrayOutput)
}

// UDP port ranges used to access the app.
func (o ZPAApplicationSegmentPRAOutput) UdpPortRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ZPAApplicationSegmentPRA) pulumi.StringArrayOutput { return v.UdpPortRanges }).(pulumi.StringArrayOutput)
}

type ZPAApplicationSegmentPRAArrayOutput struct{ *pulumi.OutputState }

func (ZPAApplicationSegmentPRAArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZPAApplicationSegmentPRA)(nil)).Elem()
}

func (o ZPAApplicationSegmentPRAArrayOutput) ToZPAApplicationSegmentPRAArrayOutput() ZPAApplicationSegmentPRAArrayOutput {
	return o
}

func (o ZPAApplicationSegmentPRAArrayOutput) ToZPAApplicationSegmentPRAArrayOutputWithContext(ctx context.Context) ZPAApplicationSegmentPRAArrayOutput {
	return o
}

func (o ZPAApplicationSegmentPRAArrayOutput) Index(i pulumi.IntInput) ZPAApplicationSegmentPRAOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ZPAApplicationSegmentPRA {
		return vs[0].([]*ZPAApplicationSegmentPRA)[vs[1].(int)]
	}).(ZPAApplicationSegmentPRAOutput)
}

type ZPAApplicationSegmentPRAMapOutput struct{ *pulumi.OutputState }

func (ZPAApplicationSegmentPRAMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZPAApplicationSegmentPRA)(nil)).Elem()
}

func (o ZPAApplicationSegmentPRAMapOutput) ToZPAApplicationSegmentPRAMapOutput() ZPAApplicationSegmentPRAMapOutput {
	return o
}

func (o ZPAApplicationSegmentPRAMapOutput) ToZPAApplicationSegmentPRAMapOutputWithContext(ctx context.Context) ZPAApplicationSegmentPRAMapOutput {
	return o
}

func (o ZPAApplicationSegmentPRAMapOutput) MapIndex(k pulumi.StringInput) ZPAApplicationSegmentPRAOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ZPAApplicationSegmentPRA {
		return vs[0].(map[string]*ZPAApplicationSegmentPRA)[vs[1].(string)]
	}).(ZPAApplicationSegmentPRAOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZPAApplicationSegmentPRAInput)(nil)).Elem(), &ZPAApplicationSegmentPRA{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZPAApplicationSegmentPRAArrayInput)(nil)).Elem(), ZPAApplicationSegmentPRAArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZPAApplicationSegmentPRAMapInput)(nil)).Elem(), ZPAApplicationSegmentPRAMap{})
	pulumi.RegisterOutputType(ZPAApplicationSegmentPRAOutput{})
	pulumi.RegisterOutputType(ZPAApplicationSegmentPRAArrayOutput{})
	pulumi.RegisterOutputType(ZPAApplicationSegmentPRAMapOutput{})
}
