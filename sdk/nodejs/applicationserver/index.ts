// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ApplicationServerArgs, ApplicationServerState } from "./applicationServer";
export type ApplicationServer = import("./applicationServer").ApplicationServer;
export const ApplicationServer: typeof import("./applicationServer").ApplicationServer = null as any;
utilities.lazyLoad(exports, ["ApplicationServer"], () => require("./applicationServer"));

export { GetApplicationServerArgs, GetApplicationServerResult, GetApplicationServerOutputArgs } from "./getApplicationServer";
export const getApplicationServer: typeof import("./getApplicationServer").getApplicationServer = null as any;
export const getApplicationServerOutput: typeof import("./getApplicationServer").getApplicationServerOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationServer","getApplicationServerOutput"], () => require("./getApplicationServer"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "zpa:ApplicationServer/applicationServer:ApplicationServer":
                return new ApplicationServer(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("zpa", "ApplicationServer/applicationServer", _module)
