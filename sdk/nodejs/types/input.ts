// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export namespace AccessPolicy {
    export interface PolicyAccessRuleAppConnectorGroup {
        /**
         * (Optional) The ID of a server group resource
         */
        ids?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface PolicyAccessRuleAppServerGroup {
        /**
         * (Optional) The ID of a server group resource
         */
        ids?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface PolicyAccessRuleCondition {
        /**
         * (Optional) The ID of a server group resource
         */
        id?: pulumi.Input<string>;
        /**
         * (Optional) Supported values: ``true`` or ``false``
         */
        negated?: pulumi.Input<boolean>;
        /**
         * (Optional) - Operands block must be repeated if multiple per `objectType` conditions are to be added to the rule.
         */
        operands?: pulumi.Input<pulumi.Input<inputs.AccessPolicy.PolicyAccessRuleConditionOperand>[]>;
        /**
         * (Optional) Supported values: ``AND``, and ``OR``
         */
        operator: pulumi.Input<string>;
    }

    export interface PolicyAccessRuleConditionOperand {
        /**
         * (Optional) The ID of a server group resource
         */
        id?: pulumi.Input<string>;
        /**
         * (Optional)
         */
        idpId?: pulumi.Input<string>;
        /**
         * (Optional) LHS must always carry the string value ``id`` or the attribute ID of the resource being associated with the rule.
         */
        lhs: pulumi.Input<string>;
        /**
         * (Optional)
         */
        name?: pulumi.Input<string>;
        /**
         * (Optional) This is for specifying the policy critiera. Supported values: `APP`, `APP_GROUP`, `SAML`, `IDP`, `CLIENT_TYPE`, `TRUSTED_NETWORK`, `POSTURE`, `SCIM`, `SCIM_GROUP`, and `CLOUD_CONNECTOR_GROUP`. `TRUSTED_NETWORK`, and `CLIENT_TYPE`.
         */
        objectType: pulumi.Input<string>;
        /**
         * (Optional) RHS is either the ID attribute of a resource or fixed string value. Refer to the chart below for further details.
         */
        rhs?: pulumi.Input<string>;
        rhsLists?: pulumi.Input<pulumi.Input<string>[]>;
    }
}

export namespace CloudConnectorGroup {
}

export namespace Connector {
}

export namespace ForwardPolicy {
    export interface PolicyAccessForwardingRuleCondition {
        id?: pulumi.Input<string>;
        negated?: pulumi.Input<boolean>;
        operands?: pulumi.Input<pulumi.Input<inputs.ForwardPolicy.PolicyAccessForwardingRuleConditionOperand>[]>;
        operator: pulumi.Input<string>;
    }

    export interface PolicyAccessForwardingRuleConditionOperand {
        id?: pulumi.Input<string>;
        idpId?: pulumi.Input<string>;
        lhs: pulumi.Input<string>;
        name?: pulumi.Input<string>;
        objectType: pulumi.Input<string>;
        rhs?: pulumi.Input<string>;
        rhsLists?: pulumi.Input<pulumi.Input<string>[]>;
    }
}

export namespace Inspection {
    export interface InspectionCustomControlsAssociatedInspectionProfileName {
        ids?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface InspectionCustomControlsRule {
        conditions?: pulumi.Input<inputs.Inspection.InspectionCustomControlsRuleConditions>;
        names?: pulumi.Input<pulumi.Input<string>[]>;
        type?: pulumi.Input<string>;
    }

    export interface InspectionCustomControlsRuleConditions {
        lhs?: pulumi.Input<string>;
        op?: pulumi.Input<string>;
        rhs?: pulumi.Input<string>;
    }

    export interface InspectionProfileControlsInfo {
        /**
         * (string) Control types. Supported Values: `WEBSOCKET_PREDEFINED`, `WEBSOCKET_CUSTOM`, `CUSTOM`, `PREDEFINED`, `ZSCALER`
         */
        controlType?: pulumi.Input<string>;
        /**
         * (Optional) Control information counts `Long`
         */
        count?: pulumi.Input<string>;
    }

    export interface InspectionProfileCustomControl {
        /**
         * The action of the predefined control. Supported values: `PASS`, `BLOCK` and `REDIRECT`
         */
        action?: pulumi.Input<string>;
        /**
         * Value for the predefined controls action. This field is only required if the action is set to REDIRECT. This field is only required if the action is set to `REDIRECT`.
         */
        actionValue?: pulumi.Input<string>;
        /**
         * ID of the predefined control
         */
        id: pulumi.Input<string>;
    }

    export interface InspectionProfilePredefinedControl {
        /**
         * The action of the predefined control. Supported values: `PASS`, `BLOCK` and `REDIRECT`
         */
        action: pulumi.Input<string>;
        /**
         * Value for the predefined controls action. This field is only required if the action is set to REDIRECT. This field is only required if the action is set to `REDIRECT`.
         */
        actionValue?: pulumi.Input<string>;
        /**
         * (string) Control types. Supported Values: `WEBSOCKET_PREDEFINED`, `WEBSOCKET_CUSTOM`, `CUSTOM`, `PREDEFINED`, `ZSCALER`
         */
        controlType?: pulumi.Input<string>;
        /**
         * ID of the predefined control
         */
        id: pulumi.Input<string>;
        protocolType?: pulumi.Input<string>;
    }

    export interface InspectionProfileWebSocketControl {
        /**
         * The action of the predefined control. Supported values: `PASS`, `BLOCK` and `REDIRECT`
         */
        action: pulumi.Input<string>;
        /**
         * Value for the predefined controls action. This field is only required if the action is set to REDIRECT. This field is only required if the action is set to `REDIRECT`.
         */
        actionValue?: pulumi.Input<string>;
        /**
         * (string) Control types. Supported Values: `WEBSOCKET_PREDEFINED`, `WEBSOCKET_CUSTOM`, `CUSTOM`, `PREDEFINED`, `ZSCALER`
         */
        controlType?: pulumi.Input<string>;
        /**
         * ID of the predefined control
         */
        id: pulumi.Input<string>;
        protocolType?: pulumi.Input<string>;
    }
}

export namespace InspectionPolicy {
    export interface PolicyAccessInspectionRuleCondition {
        id?: pulumi.Input<string>;
        negated?: pulumi.Input<boolean>;
        operands?: pulumi.Input<pulumi.Input<inputs.InspectionPolicy.PolicyAccessInspectionRuleConditionOperand>[]>;
        operator: pulumi.Input<string>;
    }

    export interface PolicyAccessInspectionRuleConditionOperand {
        id?: pulumi.Input<string>;
        idpId?: pulumi.Input<string>;
        lhs: pulumi.Input<string>;
        name?: pulumi.Input<string>;
        objectType: pulumi.Input<string>;
        rhs?: pulumi.Input<string>;
        rhsLists?: pulumi.Input<pulumi.Input<string>[]>;
    }
}

export namespace LSSConfig {
    export interface GetLSSConfigControllerConfig {
        /**
         * (string)
         */
        auditMessage?: string;
        /**
         * (string)
         */
        description?: string;
        /**
         * (bool)
         */
        enabled?: boolean;
        /**
         * (string)
         */
        filters?: string[];
        /**
         * (string)
         */
        format?: string;
        /**
         * This field defines the name of the log streaming resource.
         */
        id?: string;
        /**
         * (string)
         */
        lssHost?: string;
        /**
         * (string)
         */
        lssPort?: string;
        /**
         * This field defines the name of the log streaming resource.
         */
        name?: string;
        /**
         * (string)
         */
        sourceLogType?: string;
        useTls?: boolean;
    }

    export interface GetLSSConfigControllerConfigArgs {
        /**
         * (string)
         */
        auditMessage?: pulumi.Input<string>;
        /**
         * (string)
         */
        description?: pulumi.Input<string>;
        /**
         * (bool)
         */
        enabled?: pulumi.Input<boolean>;
        /**
         * (string)
         */
        filters?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * (string)
         */
        format?: pulumi.Input<string>;
        /**
         * This field defines the name of the log streaming resource.
         */
        id?: pulumi.Input<string>;
        /**
         * (string)
         */
        lssHost?: pulumi.Input<string>;
        /**
         * (string)
         */
        lssPort?: pulumi.Input<string>;
        /**
         * This field defines the name of the log streaming resource.
         */
        name?: pulumi.Input<string>;
        /**
         * (string)
         */
        sourceLogType?: pulumi.Input<string>;
        useTls?: pulumi.Input<boolean>;
    }

    export interface LSSConfigControllerConfig {
        /**
         * (Optional)
         */
        auditMessage?: pulumi.Input<string>;
        /**
         * (Optional)
         */
        description?: pulumi.Input<string>;
        /**
         * (Optional)
         */
        enabled?: pulumi.Input<boolean>;
        /**
         * (Optional)
         */
        filters?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The format of the LSS resource. The supported formats are: `JSON`, `CSV`, and `TSV`
         */
        format: pulumi.Input<string>;
        /**
         * App Connector Group ID(s) where logs will be forwarded to.
         */
        id?: pulumi.Input<string>;
        /**
         * The IP or FQDN of the SIEM (Log Receiver) where logs will be forwarded to.
         */
        lssHost: pulumi.Input<string>;
        /**
         * The destination port of the SIEM (Log Receiver) where logs will be forwarded to.
         */
        lssPort: pulumi.Input<string>;
        /**
         * (Optional)
         */
        name: pulumi.Input<string>;
        /**
         * Refer to the log type documentation
         */
        sourceLogType: pulumi.Input<string>;
        /**
         * (Optional)
         */
        useTls?: pulumi.Input<boolean>;
    }

    export interface LSSConfigControllerConnectorGroup {
        /**
         * App Connector Group ID(s) where logs will be forwarded to.
         */
        ids?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface LSSConfigControllerPolicyRuleResource {
        /**
         * (Optional)
         */
        action?: pulumi.Input<string>;
        actionId?: pulumi.Input<string>;
        bypassDefaultRule?: pulumi.Input<boolean>;
        /**
         * (Optional)
         */
        conditions?: pulumi.Input<pulumi.Input<inputs.LSSConfig.LSSConfigControllerPolicyRuleResourceCondition>[]>;
        /**
         * (Optional)
         */
        customMsg?: pulumi.Input<string>;
        defaultRule?: pulumi.Input<boolean>;
        /**
         * (Optional)
         */
        description?: pulumi.Input<string>;
        /**
         * App Connector Group ID(s) where logs will be forwarded to.
         */
        id?: pulumi.Input<string>;
        lssDefaultRule?: pulumi.Input<boolean>;
        /**
         * (Optional)
         */
        name: pulumi.Input<string>;
        /**
         * (Optional) - Supported values are: `AND` or `OR`
         */
        operator?: pulumi.Input<string>;
        policySetId?: pulumi.Input<string>;
        policyType?: pulumi.Input<string>;
        priority?: pulumi.Input<string>;
        reauthDefaultRule?: pulumi.Input<boolean>;
        reauthIdleTimeout?: pulumi.Input<string>;
        reauthTimeout?: pulumi.Input<string>;
        ruleOrder?: pulumi.Input<string>;
        zpnInspectionProfileId?: pulumi.Input<string>;
    }

    export interface LSSConfigControllerPolicyRuleResourceCondition {
        /**
         * (Optional)
         */
        negated?: pulumi.Input<boolean>;
        operands?: pulumi.Input<pulumi.Input<inputs.LSSConfig.LSSConfigControllerPolicyRuleResourceConditionOperand>[]>;
        /**
         * (Optional) - Supported values are: `AND` or `OR`
         */
        operator: pulumi.Input<string>;
    }

    export interface LSSConfigControllerPolicyRuleResourceConditionOperand {
        /**
         * (Optional) This is for specifying the policy critiera. Supported values: `APP`, `APP_GROUP`, `CLIENT_TYPE`, `TRUSTED_NETWORK`, `SAML`, `SCIM`, `SCIM_GROUP`
         */
        objectType: pulumi.Input<string>;
        /**
         * (Optional) The below values are supported when choosing `objectType` of type `CLIENT_TYPE`.
         */
        values?: pulumi.Input<pulumi.Input<string>[]>;
    }
}

export namespace PolicyType {
}

export namespace Segment {
    export interface ApplicationSegmentBrowserAccessClientlessApp {
        /**
         * If you want ZPA to forward unauthenticated HTTP preflight OPTIONS requests from the browser to the app.. Supported values: `true` and `false`
         */
        allowOptions?: pulumi.Input<boolean>;
        /**
         * Port for the BA app.
         */
        applicationPort: pulumi.Input<string>;
        /**
         * Protocol for the BA app. Supported values: `HTTP` and `HTTPS`
         */
        applicationProtocol: pulumi.Input<string>;
        certificateId: pulumi.Input<string>;
        /**
         * (Optional)
         */
        cname?: pulumi.Input<string>;
        /**
         * (Optional) Description of the application.
         */
        description?: pulumi.Input<string>;
        /**
         * Domain name or IP address of the BA app.
         */
        domain?: pulumi.Input<string>;
        /**
         * (Optional) - Whether this app is enabled or not.
         */
        enabled?: pulumi.Input<boolean>;
        /**
         * (Optional)
         */
        hidden?: pulumi.Input<boolean>;
        id?: pulumi.Input<string>;
        /**
         * (Optional)
         */
        localDomain?: pulumi.Input<string>;
        /**
         * Name of the application.
         */
        name: pulumi.Input<string>;
        /**
         * (Optional)
         */
        path?: pulumi.Input<string>;
        /**
         * (Optional)
         */
        trustUntrustedCert?: pulumi.Input<boolean>;
    }

    export interface ApplicationSegmentBrowserAccessServerGroup {
        ids: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ApplicationSegmentInspectionCommonAppsDto {
        appsConfigs?: pulumi.Input<pulumi.Input<inputs.Segment.ApplicationSegmentInspectionCommonAppsDtoAppsConfig>[]>;
    }

    export interface ApplicationSegmentInspectionCommonAppsDtoAppsConfig {
        allowOptions?: pulumi.Input<boolean>;
        appId?: pulumi.Input<string>;
        /**
         * Indicates the type of application as inspection. Supported value: `INSPECT`
         */
        appTypes?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Port for the Inspection Application Segment.
         */
        applicationPort?: pulumi.Input<string>;
        /**
         * Protocol for the Inspection Application Segment.. Supported values: `HTTP` and `HTTPS`
         */
        applicationProtocol?: pulumi.Input<string>;
        /**
         * ID of the signing certificate. This field is required if the applicationProtocol is set to `HTTPS`. The certificateId is not supported if the applicationProtocol is set to `HTTP`.
         */
        certificateId?: pulumi.Input<string>;
        certificateName?: pulumi.Input<string>;
        cname?: pulumi.Input<string>;
        /**
         * (Optional) Description of the application.
         */
        description?: pulumi.Input<string>;
        /**
         * Domain name of the Inspection Application Segment.
         */
        domain?: pulumi.Input<string>;
        /**
         * Whether this application is enabled or not
         */
        enabled?: pulumi.Input<boolean>;
        hidden?: pulumi.Input<boolean>;
        id?: pulumi.Input<string>;
        localDomain?: pulumi.Input<string>;
        /**
         * Name of the Inspection Application Segment.
         */
        name?: pulumi.Input<string>;
        portal?: pulumi.Input<boolean>;
        trustUntrustedCert?: pulumi.Input<boolean>;
    }

    export interface ApplicationSegmentInspectionServerGroup {
        ids: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ApplicationSegmentPRACommonAppsDto {
        appsConfigs?: pulumi.Input<pulumi.Input<inputs.Segment.ApplicationSegmentPRACommonAppsDtoAppsConfig>[]>;
    }

    export interface ApplicationSegmentPRACommonAppsDtoAppsConfig {
        allowOptions?: pulumi.Input<boolean>;
        appId?: pulumi.Input<string>;
        /**
         * Indicates the type of application as Privileged Remote Access. Supported value: `SECURE_REMOTE_ACCESS`
         */
        appTypes?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Port for the Privileged Remote Access
         */
        applicationPort?: pulumi.Input<string>;
        /**
         * Protocol for the Privileged Remote Access. Supported values: `RDP` and `SSH`
         */
        applicationProtocol?: pulumi.Input<string>;
        cname?: pulumi.Input<string>;
        /**
         * Parameter required when `applicationProtocol` is of type `RDP`
         */
        connectionSecurity?: pulumi.Input<string>;
        /**
         * (Optional) Description of the application.
         */
        description?: pulumi.Input<string>;
        /**
         * Domain name of the Privileged Remote Access
         */
        domain?: pulumi.Input<string>;
        /**
         * Whether this application is enabled or not
         */
        enabled?: pulumi.Input<boolean>;
        hidden?: pulumi.Input<boolean>;
        id?: pulumi.Input<string>;
        localDomain?: pulumi.Input<string>;
        /**
         * Name of the Privileged Remote Access
         */
        name?: pulumi.Input<string>;
        portal?: pulumi.Input<boolean>;
    }

    export interface ApplicationSegmentPRAServerGroup {
        ids: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ApplicationSegmentServerGroup {
        ids: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface BrowserAccessClientlessApp {
        allowOptions?: pulumi.Input<boolean>;
        applicationPort: pulumi.Input<string>;
        applicationProtocol: pulumi.Input<string>;
        certificateId: pulumi.Input<string>;
        cname?: pulumi.Input<string>;
        description?: pulumi.Input<string>;
        domain?: pulumi.Input<string>;
        enabled?: pulumi.Input<boolean>;
        hidden?: pulumi.Input<boolean>;
        id?: pulumi.Input<string>;
        localDomain?: pulumi.Input<string>;
        name: pulumi.Input<string>;
        path?: pulumi.Input<string>;
        trustUntrustedCert?: pulumi.Input<boolean>;
    }

    export interface BrowserAccessServerGroup {
        ids: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetApplicationSegmentBrowserAccessTcpPortRange {
        from?: string;
        to?: string;
    }

    export interface GetApplicationSegmentBrowserAccessTcpPortRangeArgs {
        from?: pulumi.Input<string>;
        to?: pulumi.Input<string>;
    }

    export interface GetApplicationSegmentBrowserAccessUdpPortRange {
        from?: string;
        to?: string;
    }

    export interface GetApplicationSegmentBrowserAccessUdpPortRangeArgs {
        from?: pulumi.Input<string>;
        to?: pulumi.Input<string>;
    }

    export interface GetApplicationSegmentInspectionTcpPortRange {
        from?: string;
        to?: string;
    }

    export interface GetApplicationSegmentInspectionTcpPortRangeArgs {
        from?: pulumi.Input<string>;
        to?: pulumi.Input<string>;
    }

    export interface GetApplicationSegmentInspectionUdpPortRange {
        from?: string;
        to?: string;
    }

    export interface GetApplicationSegmentInspectionUdpPortRangeArgs {
        from?: pulumi.Input<string>;
        to?: pulumi.Input<string>;
    }

    export interface GetApplicationSegmentPRATcpPortRange {
        from?: string;
        to?: string;
    }

    export interface GetApplicationSegmentPRATcpPortRangeArgs {
        from?: pulumi.Input<string>;
        to?: pulumi.Input<string>;
    }

    export interface GetApplicationSegmentPRAUdpPortRange {
        from?: string;
        to?: string;
    }

    export interface GetApplicationSegmentPRAUdpPortRangeArgs {
        from?: pulumi.Input<string>;
        to?: pulumi.Input<string>;
    }

    export interface GetApplicationSegmentTcpPortRange {
        from?: string;
        to?: string;
    }

    export interface GetApplicationSegmentTcpPortRangeArgs {
        from?: pulumi.Input<string>;
        to?: pulumi.Input<string>;
    }

    export interface GetApplicationSegmentUdpPortRange {
        from?: string;
        to?: string;
    }

    export interface GetApplicationSegmentUdpPortRangeArgs {
        from?: pulumi.Input<string>;
        to?: pulumi.Input<string>;
    }
}

export namespace SegmentGroup {
    export interface SegmentGroupApplication {
        id?: pulumi.Input<string>;
    }
}

export namespace ServerGroup {
    export interface ServerGroupAppConnectorGroup {
        ids?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ServerGroupApplication {
        ids?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ServerGroupServer {
        ids?: pulumi.Input<pulumi.Input<string>[]>;
    }
}

export namespace ServiceEdge {
    export interface ServiceEdgeGroupServiceEdge {
        ids?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ServiceEdgeGroupTrustedNetwork {
        ids?: pulumi.Input<pulumi.Input<string>[]>;
    }
}

export namespace TimeoutPolicy {
    export interface PolicyAccessTimeOutRuleCondition {
        id?: pulumi.Input<string>;
        negated?: pulumi.Input<boolean>;
        operands?: pulumi.Input<pulumi.Input<inputs.TimeoutPolicy.PolicyAccessTimeOutRuleConditionOperand>[]>;
        operator: pulumi.Input<string>;
    }

    export interface PolicyAccessTimeOutRuleConditionOperand {
        id?: pulumi.Input<string>;
        idpId?: pulumi.Input<string>;
        lhs: pulumi.Input<string>;
        name?: pulumi.Input<string>;
        objectType: pulumi.Input<string>;
        rhs?: pulumi.Input<string>;
        rhsLists?: pulumi.Input<pulumi.Input<string>[]>;
    }
}

export namespace idpController {
}

export namespace machineGroup {
}
