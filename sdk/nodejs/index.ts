// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as accesspolicy from "./accesspolicy";
import * as appconnectorgroup from "./appconnectorgroup";
import * as applicationsegment from "./applicationsegment";
import * as applicationserver from "./applicationserver";
import * as browsercertificate from "./browsercertificate";
import * as cloudconnectorgroup from "./cloudconnectorgroup";
import * as config from "./config";
import * as enrollmentcertificate from "./enrollmentcertificate";
import * as forwardpolicy from "./forwardpolicy";
import * as idpcontroller from "./idpcontroller";
import * as inspection from "./inspection";
import * as inspectionpolicy from "./inspectionpolicy";
import * as lssconfig from "./lssconfig";
import * as machinegroup from "./machinegroup";
import * as policytype from "./policytype";
import * as postureprofile from "./postureprofile";
import * as provisioningkey from "./provisioningkey";
import * as samlattribute from "./samlattribute";
import * as scimattribute from "./scimattribute";
import * as scimgroup from "./scimgroup";
import * as segmentgroup from "./segmentgroup";
import * as servergroup from "./servergroup";
import * as serviceedge from "./serviceedge";
import * as timeoutpolicy from "./timeoutpolicy";
import * as trustednetwork from "./trustednetwork";
import * as types from "./types";

export {
    accesspolicy,
    appconnectorgroup,
    applicationsegment,
    applicationserver,
    browsercertificate,
    cloudconnectorgroup,
    config,
    enrollmentcertificate,
    forwardpolicy,
    idpcontroller,
    inspection,
    inspectionpolicy,
    lssconfig,
    machinegroup,
    policytype,
    postureprofile,
    provisioningkey,
    samlattribute,
    scimattribute,
    scimgroup,
    segmentgroup,
    servergroup,
    serviceedge,
    timeoutpolicy,
    trustednetwork,
    types,
};
pulumi.runtime.registerResourcePackage("zpa", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:zpa") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
