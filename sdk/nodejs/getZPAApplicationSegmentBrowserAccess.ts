// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zpa from "@pulumi/zpa";
 *
 * const example = zpa.getZPAApplicationSegmentBrowserAccess({
 *     name: "example",
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zpa from "@pulumi/zpa";
 *
 * const example = zpa.getZPAApplicationSegmentBrowserAccess({
 *     id: "123456789",
 * });
 * ```
 */
export function getZPAApplicationSegmentBrowserAccess(args?: GetZPAApplicationSegmentBrowserAccessArgs, opts?: pulumi.InvokeOptions): Promise<GetZPAApplicationSegmentBrowserAccessResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("zpa:index/getZPAApplicationSegmentBrowserAccess:getZPAApplicationSegmentBrowserAccess", {
        "id": args.id,
        "name": args.name,
        "tcpPortRanges": args.tcpPortRanges,
        "udpPortRanges": args.udpPortRanges,
    }, opts);
}

/**
 * A collection of arguments for invoking getZPAApplicationSegmentBrowserAccess.
 */
export interface GetZPAApplicationSegmentBrowserAccessArgs {
    /**
     * This field defines the id of the application server.
     */
    id?: string;
    /**
     * This field defines the name of the server.
     */
    name?: string;
    /**
     * (string) TCP port ranges used to access the app.
     * * `from:`
     * * `to:`
     */
    tcpPortRanges?: inputs.GetZPAApplicationSegmentBrowserAccessTcpPortRange[];
    /**
     * (string) UDP port ranges used to access the app.
     * * `from:`
     * * `to:`
     */
    udpPortRanges?: inputs.GetZPAApplicationSegmentBrowserAccessUdpPortRange[];
}

/**
 * A collection of values returned by getZPAApplicationSegmentBrowserAccess.
 */
export interface GetZPAApplicationSegmentBrowserAccessResult {
    /**
     * (string) Indicates whether users can bypass ZPA to access applications. Default: `NEVER`. Supported values: `ALWAYS`, `NEVER`, `ON_NET`. The value `NEVER` indicates the use of the client forwarding policy.
     */
    readonly bypassType: string;
    readonly clientlessApps: outputs.GetZPAApplicationSegmentBrowserAccessClientlessApp[];
    /**
     * (string)
     */
    readonly configSpace: string;
    /**
     * (string)
     */
    readonly description: string;
    /**
     * List of domains and IPs.
     */
    readonly domainNames: string[];
    /**
     * (string) Whether Double Encryption is enabled or disabled for the app. Default: false. Boolean: `true`, `false`.
     */
    readonly doubleEncrypt: boolean;
    /**
     * (bool)
     */
    readonly enabled: boolean;
    readonly healthCheckType: string;
    /**
     * (string)
     */
    readonly healthReporting: string;
    readonly id?: string;
    /**
     * (bool)
     */
    readonly ipAnchored: boolean;
    /**
     * (bool) Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors. Default: true. Boolean: `true`, `false`.
     */
    readonly isCnameEnabled: boolean;
    /**
     * (string)
     */
    readonly name?: string;
    /**
     * (bool)
     */
    readonly passiveHealthEnabled: boolean;
    /**
     * (string)
     */
    readonly segmentGroupId: string;
    /**
     * (string)
     */
    readonly segmentGroupName: string;
    readonly serverGroups: outputs.GetZPAApplicationSegmentBrowserAccessServerGroup[];
    /**
     * (string) TCP port ranges used to access the app.
     */
    readonly tcpPortRanges: string[];
    /**
     * (string) UDP port ranges used to access the app.
     */
    readonly udpPortRanges: string[];
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zpa from "@pulumi/zpa";
 *
 * const example = zpa.getZPAApplicationSegmentBrowserAccess({
 *     name: "example",
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zpa from "@pulumi/zpa";
 *
 * const example = zpa.getZPAApplicationSegmentBrowserAccess({
 *     id: "123456789",
 * });
 * ```
 */
export function getZPAApplicationSegmentBrowserAccessOutput(args?: GetZPAApplicationSegmentBrowserAccessOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetZPAApplicationSegmentBrowserAccessResult> {
    return pulumi.output(args).apply((a: any) => getZPAApplicationSegmentBrowserAccess(a, opts))
}

/**
 * A collection of arguments for invoking getZPAApplicationSegmentBrowserAccess.
 */
export interface GetZPAApplicationSegmentBrowserAccessOutputArgs {
    /**
     * This field defines the id of the application server.
     */
    id?: pulumi.Input<string>;
    /**
     * This field defines the name of the server.
     */
    name?: pulumi.Input<string>;
    /**
     * (string) TCP port ranges used to access the app.
     * * `from:`
     * * `to:`
     */
    tcpPortRanges?: pulumi.Input<pulumi.Input<inputs.GetZPAApplicationSegmentBrowserAccessTcpPortRangeArgs>[]>;
    /**
     * (string) UDP port ranges used to access the app.
     * * `from:`
     * * `to:`
     */
    udpPortRanges?: pulumi.Input<pulumi.Input<inputs.GetZPAApplicationSegmentBrowserAccessUdpPortRangeArgs>[]>;
}
