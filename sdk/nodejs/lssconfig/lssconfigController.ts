// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * The **zpa_lss_config_controller** resource creates and manages Log Streaming Service (LSS) in the Zscaler Private Access cloud.
 *
 * ## Example 1 Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zpa from "@pulumi/zpa";
 * import * as zpa from "@zscaler/pulumi-zpa";
 *
 * const zpnAstAuthLog = zpa.LSSConfig.getLSSLogTypeFormats({
 *     logType: "zpn_ast_auth_log",
 * });
 * // Create Log Receiver Configuration
 * const example = new zpa.lssconfig.LSSConfigController("example", {
 *     config: {
 *         name: "Example",
 *         description: "Example",
 *         enabled: true,
 *         format: zpnAstAuthLog.then(zpnAstAuthLog => zpnAstAuthLog.json),
 *         lssHost: "splunk.acme.com",
 *         lssPort: "11000",
 *         sourceLogType: "zpn_ast_auth_log",
 *         useTls: true,
 *         filters: [
 *             "ZPN_STATUS_AUTH_FAILED",
 *             "ZPN_STATUS_DISCONNECTED",
 *             "ZPN_STATUS_AUTHENTICATED",
 *         ],
 *     },
 *     connectorGroups: [{
 *         ids: [zpa_app_connector_group.example.id],
 *     }],
 * });
 * ```
 *
 * ## Example 2 Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zpa from "@pulumi/zpa";
 * import * as zpa from "@zscaler/pulumi-zpa";
 *
 * const zpnTransLog = zpa.LSSConfig.getLSSLogTypeFormats({
 *     logType: "zpn_trans_log",
 * });
 * const lssSiemPolicy = zpa.PolicyType.getPolicyType({
 *     policyType: "SIEM_POLICY",
 * });
 * const lssUserActivity = new zpa.lssconfig.LSSConfigController("lssUserActivity", {
 *     config: {
 *         name: "LSS User Activity",
 *         description: "LSS User Activity",
 *         enabled: true,
 *         format: zpnTransLog.then(zpnTransLog => zpnTransLog.json),
 *         lssHost: "splunk.acme.com",
 *         lssPort: "11001",
 *         sourceLogType: "zpn_trans_log",
 *         useTls: true,
 *     },
 *     policyRuleResource: {
 *         name: "policy_rule_resource-lss_user_activity",
 *         action: "ALLOW",
 *         policySetId: lssSiemPolicy.then(lssSiemPolicy => lssSiemPolicy.id),
 *         conditions: [{
 *             negated: false,
 *             operator: "OR",
 *             operands: [
 *                 {
 *                     objectType: "CLIENT_TYPE",
 *                     values: ["zpn_client_type_exporter"],
 *                 },
 *                 {
 *                     objectType: "CLIENT_TYPE",
 *                     values: ["zpn_client_type_ip_anchoring"],
 *                 },
 *                 {
 *                     objectType: "CLIENT_TYPE",
 *                     values: ["zpn_client_type_zapp"],
 *                 },
 *                 {
 *                     objectType: "CLIENT_TYPE",
 *                     values: ["zpn_client_type_edge_connector"],
 *                 },
 *                 {
 *                     objectType: "CLIENT_TYPE",
 *                     values: ["zpn_client_type_machine_tunnel"],
 *                 },
 *                 {
 *                     objectType: "CLIENT_TYPE",
 *                     values: ["zpn_client_type_browser_isolation"],
 *                 },
 *                 {
 *                     objectType: "CLIENT_TYPE",
 *                     values: ["zpn_client_type_slogger"],
 *                 },
 *             ],
 *         }],
 *     },
 *     connectorGroups: [{
 *         ids: [zpa_app_connector_group.example.id],
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language. [Visit](https://github.com/zscaler/zscaler-terraformer)
 */
export class LSSConfigController extends pulumi.CustomResource {
    /**
     * Get an existing LSSConfigController resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LSSConfigControllerState, opts?: pulumi.CustomResourceOptions): LSSConfigController {
        return new LSSConfigController(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zpa:LSSConfig/lSSConfigController:LSSConfigController';

    /**
     * Returns true if the given object is an instance of LSSConfigController.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LSSConfigController {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LSSConfigController.__pulumiType;
    }

    /**
     * (Required)
     */
    public readonly config!: pulumi.Output<outputs.LSSConfig.LSSConfigControllerConfig | undefined>;
    /**
     * (Optional)
     */
    public readonly connectorGroups!: pulumi.Output<outputs.LSSConfig.LSSConfigControllerConnectorGroup[] | undefined>;
    public /*out*/ readonly policyRuleId!: pulumi.Output<string>;
    /**
     * (Optional)
     */
    public readonly policyRuleResource!: pulumi.Output<outputs.LSSConfig.LSSConfigControllerPolicyRuleResource | undefined>;

    /**
     * Create a LSSConfigController resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: LSSConfigControllerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LSSConfigControllerArgs | LSSConfigControllerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LSSConfigControllerState | undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["connectorGroups"] = state ? state.connectorGroups : undefined;
            resourceInputs["policyRuleId"] = state ? state.policyRuleId : undefined;
            resourceInputs["policyRuleResource"] = state ? state.policyRuleResource : undefined;
        } else {
            const args = argsOrState as LSSConfigControllerArgs | undefined;
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["connectorGroups"] = args ? args.connectorGroups : undefined;
            resourceInputs["policyRuleResource"] = args ? args.policyRuleResource : undefined;
            resourceInputs["policyRuleId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LSSConfigController.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LSSConfigController resources.
 */
export interface LSSConfigControllerState {
    /**
     * (Required)
     */
    config?: pulumi.Input<inputs.LSSConfig.LSSConfigControllerConfig>;
    /**
     * (Optional)
     */
    connectorGroups?: pulumi.Input<pulumi.Input<inputs.LSSConfig.LSSConfigControllerConnectorGroup>[]>;
    policyRuleId?: pulumi.Input<string>;
    /**
     * (Optional)
     */
    policyRuleResource?: pulumi.Input<inputs.LSSConfig.LSSConfigControllerPolicyRuleResource>;
}

/**
 * The set of arguments for constructing a LSSConfigController resource.
 */
export interface LSSConfigControllerArgs {
    /**
     * (Required)
     */
    config?: pulumi.Input<inputs.LSSConfig.LSSConfigControllerConfig>;
    /**
     * (Optional)
     */
    connectorGroups?: pulumi.Input<pulumi.Input<inputs.LSSConfig.LSSConfigControllerConnectorGroup>[]>;
    /**
     * (Optional)
     */
    policyRuleResource?: pulumi.Input<inputs.LSSConfig.LSSConfigControllerPolicyRuleResource>;
}
