# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ZPALSSConfigControllerArgs', 'ZPALSSConfigController']

@pulumi.input_type
class ZPALSSConfigControllerArgs:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input['ZPALSSConfigControllerConfigArgs']] = None,
                 connector_groups: Optional[pulumi.Input[Sequence[pulumi.Input['ZPALSSConfigControllerConnectorGroupArgs']]]] = None,
                 policy_rule_resource: Optional[pulumi.Input['ZPALSSConfigControllerPolicyRuleResourceArgs']] = None):
        """
        The set of arguments for constructing a ZPALSSConfigController resource.
        :param pulumi.Input['ZPALSSConfigControllerConfigArgs'] config: (Required)
        :param pulumi.Input[Sequence[pulumi.Input['ZPALSSConfigControllerConnectorGroupArgs']]] connector_groups: (Optional)
        :param pulumi.Input['ZPALSSConfigControllerPolicyRuleResourceArgs'] policy_rule_resource: (Optional)
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if connector_groups is not None:
            pulumi.set(__self__, "connector_groups", connector_groups)
        if policy_rule_resource is not None:
            pulumi.set(__self__, "policy_rule_resource", policy_rule_resource)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['ZPALSSConfigControllerConfigArgs']]:
        """
        (Required)
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['ZPALSSConfigControllerConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="connectorGroups")
    def connector_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ZPALSSConfigControllerConnectorGroupArgs']]]]:
        """
        (Optional)
        """
        return pulumi.get(self, "connector_groups")

    @connector_groups.setter
    def connector_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ZPALSSConfigControllerConnectorGroupArgs']]]]):
        pulumi.set(self, "connector_groups", value)

    @property
    @pulumi.getter(name="policyRuleResource")
    def policy_rule_resource(self) -> Optional[pulumi.Input['ZPALSSConfigControllerPolicyRuleResourceArgs']]:
        """
        (Optional)
        """
        return pulumi.get(self, "policy_rule_resource")

    @policy_rule_resource.setter
    def policy_rule_resource(self, value: Optional[pulumi.Input['ZPALSSConfigControllerPolicyRuleResourceArgs']]):
        pulumi.set(self, "policy_rule_resource", value)


@pulumi.input_type
class _ZPALSSConfigControllerState:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input['ZPALSSConfigControllerConfigArgs']] = None,
                 connector_groups: Optional[pulumi.Input[Sequence[pulumi.Input['ZPALSSConfigControllerConnectorGroupArgs']]]] = None,
                 policy_rule_id: Optional[pulumi.Input[str]] = None,
                 policy_rule_resource: Optional[pulumi.Input['ZPALSSConfigControllerPolicyRuleResourceArgs']] = None):
        """
        Input properties used for looking up and filtering ZPALSSConfigController resources.
        :param pulumi.Input['ZPALSSConfigControllerConfigArgs'] config: (Required)
        :param pulumi.Input[Sequence[pulumi.Input['ZPALSSConfigControllerConnectorGroupArgs']]] connector_groups: (Optional)
        :param pulumi.Input['ZPALSSConfigControllerPolicyRuleResourceArgs'] policy_rule_resource: (Optional)
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if connector_groups is not None:
            pulumi.set(__self__, "connector_groups", connector_groups)
        if policy_rule_id is not None:
            pulumi.set(__self__, "policy_rule_id", policy_rule_id)
        if policy_rule_resource is not None:
            pulumi.set(__self__, "policy_rule_resource", policy_rule_resource)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['ZPALSSConfigControllerConfigArgs']]:
        """
        (Required)
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['ZPALSSConfigControllerConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="connectorGroups")
    def connector_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ZPALSSConfigControllerConnectorGroupArgs']]]]:
        """
        (Optional)
        """
        return pulumi.get(self, "connector_groups")

    @connector_groups.setter
    def connector_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ZPALSSConfigControllerConnectorGroupArgs']]]]):
        pulumi.set(self, "connector_groups", value)

    @property
    @pulumi.getter(name="policyRuleId")
    def policy_rule_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy_rule_id")

    @policy_rule_id.setter
    def policy_rule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_rule_id", value)

    @property
    @pulumi.getter(name="policyRuleResource")
    def policy_rule_resource(self) -> Optional[pulumi.Input['ZPALSSConfigControllerPolicyRuleResourceArgs']]:
        """
        (Optional)
        """
        return pulumi.get(self, "policy_rule_resource")

    @policy_rule_resource.setter
    def policy_rule_resource(self, value: Optional[pulumi.Input['ZPALSSConfigControllerPolicyRuleResourceArgs']]):
        pulumi.set(self, "policy_rule_resource", value)


class ZPALSSConfigController(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config: Optional[pulumi.Input[pulumi.InputType['ZPALSSConfigControllerConfigArgs']]] = None,
                 connector_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZPALSSConfigControllerConnectorGroupArgs']]]]] = None,
                 policy_rule_resource: Optional[pulumi.Input[pulumi.InputType['ZPALSSConfigControllerPolicyRuleResourceArgs']]] = None,
                 __props__=None):
        """
        The **zpa_lss_config_controller** resource creates and manages Log Streaming Service (LSS) in the Zscaler Private Access cloud.

        ## Example 1 Usage

        ```python
        import pulumi
        import pulumi_zpa as zpa
        import zscaler_pulumi_zpa as zpa

        zpn_ast_auth_log = zpa.get_zpalss_log_type_formats(log_type="zpn_ast_auth_log")
        # Create Log Receiver Configuration
        example = zpa.ZPALSSConfigController("example",
            config=zpa.ZPALSSConfigControllerConfigArgs(
                name="Example",
                description="Example",
                enabled=True,
                format=zpn_ast_auth_log.json,
                lss_host="splunk.acme.com",
                lss_port="11000",
                source_log_type="zpn_ast_auth_log",
                use_tls=True,
                filters=[
                    "ZPN_STATUS_AUTH_FAILED",
                    "ZPN_STATUS_DISCONNECTED",
                    "ZPN_STATUS_AUTHENTICATED",
                ],
            ),
            connector_groups=[zpa.ZPALSSConfigControllerConnectorGroupArgs(
                ids=[zpa_app_connector_group["example"]["id"]],
            )])
        ```

        ## Example 2 Usage

        ```python
        import pulumi
        import pulumi_zpa as zpa
        import zscaler_pulumi_zpa as zpa

        zpn_trans_log = zpa.get_zpalss_log_type_formats(log_type="zpn_trans_log")
        lss_siem_policy = zpa.get_zpa_policy_type(policy_type="SIEM_POLICY")
        lss_user_activity = zpa.ZPALSSConfigController("lssUserActivity",
            config=zpa.ZPALSSConfigControllerConfigArgs(
                name="LSS User Activity",
                description="LSS User Activity",
                enabled=True,
                format=zpn_trans_log.json,
                lss_host="splunk.acme.com",
                lss_port="11001",
                source_log_type="zpn_trans_log",
                use_tls=True,
            ),
            policy_rule_resource=zpa.ZPALSSConfigControllerPolicyRuleResourceArgs(
                name="policy_rule_resource-lss_user_activity",
                action="ALLOW",
                policy_set_id=lss_siem_policy.id,
                conditions=[zpa.ZPALSSConfigControllerPolicyRuleResourceConditionArgs(
                    negated=False,
                    operator="OR",
                    operands=[
                        zpa.ZPALSSConfigControllerPolicyRuleResourceConditionOperandArgs(
                            object_type="CLIENT_TYPE",
                            values=["zpn_client_type_exporter"],
                        ),
                        zpa.ZPALSSConfigControllerPolicyRuleResourceConditionOperandArgs(
                            object_type="CLIENT_TYPE",
                            values=["zpn_client_type_ip_anchoring"],
                        ),
                        zpa.ZPALSSConfigControllerPolicyRuleResourceConditionOperandArgs(
                            object_type="CLIENT_TYPE",
                            values=["zpn_client_type_zapp"],
                        ),
                        zpa.ZPALSSConfigControllerPolicyRuleResourceConditionOperandArgs(
                            object_type="CLIENT_TYPE",
                            values=["zpn_client_type_edge_connector"],
                        ),
                        zpa.ZPALSSConfigControllerPolicyRuleResourceConditionOperandArgs(
                            object_type="CLIENT_TYPE",
                            values=["zpn_client_type_machine_tunnel"],
                        ),
                        zpa.ZPALSSConfigControllerPolicyRuleResourceConditionOperandArgs(
                            object_type="CLIENT_TYPE",
                            values=["zpn_client_type_browser_isolation"],
                        ),
                        zpa.ZPALSSConfigControllerPolicyRuleResourceConditionOperandArgs(
                            object_type="CLIENT_TYPE",
                            values=["zpn_client_type_slogger"],
                        ),
                    ],
                )],
            ),
            connector_groups=[zpa.ZPALSSConfigControllerConnectorGroupArgs(
                ids=[zpa_app_connector_group["example"]["id"]],
            )])
        ```

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language. [Visit](https://github.com/zscaler/zscaler-terraformer)

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ZPALSSConfigControllerConfigArgs']] config: (Required)
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZPALSSConfigControllerConnectorGroupArgs']]]] connector_groups: (Optional)
        :param pulumi.Input[pulumi.InputType['ZPALSSConfigControllerPolicyRuleResourceArgs']] policy_rule_resource: (Optional)
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ZPALSSConfigControllerArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The **zpa_lss_config_controller** resource creates and manages Log Streaming Service (LSS) in the Zscaler Private Access cloud.

        ## Example 1 Usage

        ```python
        import pulumi
        import pulumi_zpa as zpa
        import zscaler_pulumi_zpa as zpa

        zpn_ast_auth_log = zpa.get_zpalss_log_type_formats(log_type="zpn_ast_auth_log")
        # Create Log Receiver Configuration
        example = zpa.ZPALSSConfigController("example",
            config=zpa.ZPALSSConfigControllerConfigArgs(
                name="Example",
                description="Example",
                enabled=True,
                format=zpn_ast_auth_log.json,
                lss_host="splunk.acme.com",
                lss_port="11000",
                source_log_type="zpn_ast_auth_log",
                use_tls=True,
                filters=[
                    "ZPN_STATUS_AUTH_FAILED",
                    "ZPN_STATUS_DISCONNECTED",
                    "ZPN_STATUS_AUTHENTICATED",
                ],
            ),
            connector_groups=[zpa.ZPALSSConfigControllerConnectorGroupArgs(
                ids=[zpa_app_connector_group["example"]["id"]],
            )])
        ```

        ## Example 2 Usage

        ```python
        import pulumi
        import pulumi_zpa as zpa
        import zscaler_pulumi_zpa as zpa

        zpn_trans_log = zpa.get_zpalss_log_type_formats(log_type="zpn_trans_log")
        lss_siem_policy = zpa.get_zpa_policy_type(policy_type="SIEM_POLICY")
        lss_user_activity = zpa.ZPALSSConfigController("lssUserActivity",
            config=zpa.ZPALSSConfigControllerConfigArgs(
                name="LSS User Activity",
                description="LSS User Activity",
                enabled=True,
                format=zpn_trans_log.json,
                lss_host="splunk.acme.com",
                lss_port="11001",
                source_log_type="zpn_trans_log",
                use_tls=True,
            ),
            policy_rule_resource=zpa.ZPALSSConfigControllerPolicyRuleResourceArgs(
                name="policy_rule_resource-lss_user_activity",
                action="ALLOW",
                policy_set_id=lss_siem_policy.id,
                conditions=[zpa.ZPALSSConfigControllerPolicyRuleResourceConditionArgs(
                    negated=False,
                    operator="OR",
                    operands=[
                        zpa.ZPALSSConfigControllerPolicyRuleResourceConditionOperandArgs(
                            object_type="CLIENT_TYPE",
                            values=["zpn_client_type_exporter"],
                        ),
                        zpa.ZPALSSConfigControllerPolicyRuleResourceConditionOperandArgs(
                            object_type="CLIENT_TYPE",
                            values=["zpn_client_type_ip_anchoring"],
                        ),
                        zpa.ZPALSSConfigControllerPolicyRuleResourceConditionOperandArgs(
                            object_type="CLIENT_TYPE",
                            values=["zpn_client_type_zapp"],
                        ),
                        zpa.ZPALSSConfigControllerPolicyRuleResourceConditionOperandArgs(
                            object_type="CLIENT_TYPE",
                            values=["zpn_client_type_edge_connector"],
                        ),
                        zpa.ZPALSSConfigControllerPolicyRuleResourceConditionOperandArgs(
                            object_type="CLIENT_TYPE",
                            values=["zpn_client_type_machine_tunnel"],
                        ),
                        zpa.ZPALSSConfigControllerPolicyRuleResourceConditionOperandArgs(
                            object_type="CLIENT_TYPE",
                            values=["zpn_client_type_browser_isolation"],
                        ),
                        zpa.ZPALSSConfigControllerPolicyRuleResourceConditionOperandArgs(
                            object_type="CLIENT_TYPE",
                            values=["zpn_client_type_slogger"],
                        ),
                    ],
                )],
            ),
            connector_groups=[zpa.ZPALSSConfigControllerConnectorGroupArgs(
                ids=[zpa_app_connector_group["example"]["id"]],
            )])
        ```

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language. [Visit](https://github.com/zscaler/zscaler-terraformer)

        :param str resource_name: The name of the resource.
        :param ZPALSSConfigControllerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ZPALSSConfigControllerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config: Optional[pulumi.Input[pulumi.InputType['ZPALSSConfigControllerConfigArgs']]] = None,
                 connector_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZPALSSConfigControllerConnectorGroupArgs']]]]] = None,
                 policy_rule_resource: Optional[pulumi.Input[pulumi.InputType['ZPALSSConfigControllerPolicyRuleResourceArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ZPALSSConfigControllerArgs.__new__(ZPALSSConfigControllerArgs)

            __props__.__dict__["config"] = config
            __props__.__dict__["connector_groups"] = connector_groups
            __props__.__dict__["policy_rule_resource"] = policy_rule_resource
            __props__.__dict__["policy_rule_id"] = None
        super(ZPALSSConfigController, __self__).__init__(
            'zpa:index/zPALSSConfigController:ZPALSSConfigController',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            config: Optional[pulumi.Input[pulumi.InputType['ZPALSSConfigControllerConfigArgs']]] = None,
            connector_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZPALSSConfigControllerConnectorGroupArgs']]]]] = None,
            policy_rule_id: Optional[pulumi.Input[str]] = None,
            policy_rule_resource: Optional[pulumi.Input[pulumi.InputType['ZPALSSConfigControllerPolicyRuleResourceArgs']]] = None) -> 'ZPALSSConfigController':
        """
        Get an existing ZPALSSConfigController resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ZPALSSConfigControllerConfigArgs']] config: (Required)
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZPALSSConfigControllerConnectorGroupArgs']]]] connector_groups: (Optional)
        :param pulumi.Input[pulumi.InputType['ZPALSSConfigControllerPolicyRuleResourceArgs']] policy_rule_resource: (Optional)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ZPALSSConfigControllerState.__new__(_ZPALSSConfigControllerState)

        __props__.__dict__["config"] = config
        __props__.__dict__["connector_groups"] = connector_groups
        __props__.__dict__["policy_rule_id"] = policy_rule_id
        __props__.__dict__["policy_rule_resource"] = policy_rule_resource
        return ZPALSSConfigController(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def config(self) -> pulumi.Output[Optional['outputs.ZPALSSConfigControllerConfig']]:
        """
        (Required)
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="connectorGroups")
    def connector_groups(self) -> pulumi.Output[Optional[Sequence['outputs.ZPALSSConfigControllerConnectorGroup']]]:
        """
        (Optional)
        """
        return pulumi.get(self, "connector_groups")

    @property
    @pulumi.getter(name="policyRuleId")
    def policy_rule_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "policy_rule_id")

    @property
    @pulumi.getter(name="policyRuleResource")
    def policy_rule_resource(self) -> pulumi.Output[Optional['outputs.ZPALSSConfigControllerPolicyRuleResource']]:
        """
        (Optional)
        """
        return pulumi.get(self, "policy_rule_resource")

