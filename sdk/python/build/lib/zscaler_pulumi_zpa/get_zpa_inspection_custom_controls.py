# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetZPAInspectionCustomControlsResult',
    'AwaitableGetZPAInspectionCustomControlsResult',
    'get_zpa_inspection_custom_controls',
    'get_zpa_inspection_custom_controls_output',
]

@pulumi.output_type
class GetZPAInspectionCustomControlsResult:
    """
    A collection of values returned by getZPAInspectionCustomControls.
    """
    def __init__(__self__, action=None, action_value=None, control_number=None, control_rule_json=None, creation_time=None, default_action=None, default_action_value=None, description=None, id=None, modified_time=None, modifiedby=None, name=None, paranoia_level=None, rules=None, severity=None, type=None, version=None):
        if action and not isinstance(action, str):
            raise TypeError("Expected argument 'action' to be a str")
        pulumi.set(__self__, "action", action)
        if action_value and not isinstance(action_value, str):
            raise TypeError("Expected argument 'action_value' to be a str")
        pulumi.set(__self__, "action_value", action_value)
        if control_number and not isinstance(control_number, str):
            raise TypeError("Expected argument 'control_number' to be a str")
        pulumi.set(__self__, "control_number", control_number)
        if control_rule_json and not isinstance(control_rule_json, str):
            raise TypeError("Expected argument 'control_rule_json' to be a str")
        pulumi.set(__self__, "control_rule_json", control_rule_json)
        if creation_time and not isinstance(creation_time, str):
            raise TypeError("Expected argument 'creation_time' to be a str")
        pulumi.set(__self__, "creation_time", creation_time)
        if default_action and not isinstance(default_action, str):
            raise TypeError("Expected argument 'default_action' to be a str")
        pulumi.set(__self__, "default_action", default_action)
        if default_action_value and not isinstance(default_action_value, str):
            raise TypeError("Expected argument 'default_action_value' to be a str")
        pulumi.set(__self__, "default_action_value", default_action_value)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if modified_time and not isinstance(modified_time, str):
            raise TypeError("Expected argument 'modified_time' to be a str")
        pulumi.set(__self__, "modified_time", modified_time)
        if modifiedby and not isinstance(modifiedby, str):
            raise TypeError("Expected argument 'modifiedby' to be a str")
        pulumi.set(__self__, "modifiedby", modifiedby)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if paranoia_level and not isinstance(paranoia_level, str):
            raise TypeError("Expected argument 'paranoia_level' to be a str")
        pulumi.set(__self__, "paranoia_level", paranoia_level)
        if rules and not isinstance(rules, list):
            raise TypeError("Expected argument 'rules' to be a list")
        pulumi.set(__self__, "rules", rules)
        if severity and not isinstance(severity, str):
            raise TypeError("Expected argument 'severity' to be a str")
        pulumi.set(__self__, "severity", severity)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="actionValue")
    def action_value(self) -> str:
        return pulumi.get(self, "action_value")

    @property
    @pulumi.getter(name="controlNumber")
    def control_number(self) -> str:
        return pulumi.get(self, "control_number")

    @property
    @pulumi.getter(name="controlRuleJson")
    def control_rule_json(self) -> str:
        return pulumi.get(self, "control_rule_json")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="defaultAction")
    def default_action(self) -> str:
        return pulumi.get(self, "default_action")

    @property
    @pulumi.getter(name="defaultActionValue")
    def default_action_value(self) -> str:
        return pulumi.get(self, "default_action_value")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def modifiedby(self) -> str:
        return pulumi.get(self, "modifiedby")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="paranoiaLevel")
    def paranoia_level(self) -> str:
        return pulumi.get(self, "paranoia_level")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetZPAInspectionCustomControlsRuleResult']:
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter
    def severity(self) -> str:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


class AwaitableGetZPAInspectionCustomControlsResult(GetZPAInspectionCustomControlsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetZPAInspectionCustomControlsResult(
            action=self.action,
            action_value=self.action_value,
            control_number=self.control_number,
            control_rule_json=self.control_rule_json,
            creation_time=self.creation_time,
            default_action=self.default_action,
            default_action_value=self.default_action_value,
            description=self.description,
            id=self.id,
            modified_time=self.modified_time,
            modifiedby=self.modifiedby,
            name=self.name,
            paranoia_level=self.paranoia_level,
            rules=self.rules,
            severity=self.severity,
            type=self.type,
            version=self.version)


def get_zpa_inspection_custom_controls(id: Optional[str] = None,
                                       name: Optional[str] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetZPAInspectionCustomControlsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zpa:index/getZPAInspectionCustomControls:getZPAInspectionCustomControls', __args__, opts=opts, typ=GetZPAInspectionCustomControlsResult).value

    return AwaitableGetZPAInspectionCustomControlsResult(
        action=__ret__.action,
        action_value=__ret__.action_value,
        control_number=__ret__.control_number,
        control_rule_json=__ret__.control_rule_json,
        creation_time=__ret__.creation_time,
        default_action=__ret__.default_action,
        default_action_value=__ret__.default_action_value,
        description=__ret__.description,
        id=__ret__.id,
        modified_time=__ret__.modified_time,
        modifiedby=__ret__.modifiedby,
        name=__ret__.name,
        paranoia_level=__ret__.paranoia_level,
        rules=__ret__.rules,
        severity=__ret__.severity,
        type=__ret__.type,
        version=__ret__.version)


@_utilities.lift_output_func(get_zpa_inspection_custom_controls)
def get_zpa_inspection_custom_controls_output(id: Optional[pulumi.Input[Optional[str]]] = None,
                                              name: Optional[pulumi.Input[Optional[str]]] = None,
                                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetZPAInspectionCustomControlsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
