# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetZPASegmentGroupResult',
    'AwaitableGetZPASegmentGroupResult',
    'get_zpa_segment_group',
    'get_zpa_segment_group_output',
]

@pulumi.output_type
class GetZPASegmentGroupResult:
    """
    A collection of values returned by getZPASegmentGroup.
    """
    def __init__(__self__, applications=None, config_space=None, creation_time=None, description=None, enabled=None, id=None, modified_by=None, modified_time=None, name=None, policy_migrated=None, tcp_keep_alive_enabled=None):
        if applications and not isinstance(applications, list):
            raise TypeError("Expected argument 'applications' to be a list")
        pulumi.set(__self__, "applications", applications)
        if config_space and not isinstance(config_space, str):
            raise TypeError("Expected argument 'config_space' to be a str")
        pulumi.set(__self__, "config_space", config_space)
        if creation_time and not isinstance(creation_time, str):
            raise TypeError("Expected argument 'creation_time' to be a str")
        pulumi.set(__self__, "creation_time", creation_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if modified_by and not isinstance(modified_by, str):
            raise TypeError("Expected argument 'modified_by' to be a str")
        pulumi.set(__self__, "modified_by", modified_by)
        if modified_time and not isinstance(modified_time, str):
            raise TypeError("Expected argument 'modified_time' to be a str")
        pulumi.set(__self__, "modified_time", modified_time)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if policy_migrated and not isinstance(policy_migrated, bool):
            raise TypeError("Expected argument 'policy_migrated' to be a bool")
        pulumi.set(__self__, "policy_migrated", policy_migrated)
        if tcp_keep_alive_enabled and not isinstance(tcp_keep_alive_enabled, str):
            raise TypeError("Expected argument 'tcp_keep_alive_enabled' to be a str")
        pulumi.set(__self__, "tcp_keep_alive_enabled", tcp_keep_alive_enabled)

    @property
    @pulumi.getter
    def applications(self) -> Sequence['outputs.GetZPASegmentGroupApplicationResult']:
        """
        (Computed)
        """
        return pulumi.get(self, "applications")

    @property
    @pulumi.getter(name="configSpace")
    def config_space(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "config_space")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        (bool)
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        (string)
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="modifiedBy")
    def modified_by(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "modified_by")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        (string)
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="policyMigrated")
    def policy_migrated(self) -> bool:
        """
        (bool)
        """
        return pulumi.get(self, "policy_migrated")

    @property
    @pulumi.getter(name="tcpKeepAliveEnabled")
    def tcp_keep_alive_enabled(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "tcp_keep_alive_enabled")


class AwaitableGetZPASegmentGroupResult(GetZPASegmentGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetZPASegmentGroupResult(
            applications=self.applications,
            config_space=self.config_space,
            creation_time=self.creation_time,
            description=self.description,
            enabled=self.enabled,
            id=self.id,
            modified_by=self.modified_by,
            modified_time=self.modified_time,
            name=self.name,
            policy_migrated=self.policy_migrated,
            tcp_keep_alive_enabled=self.tcp_keep_alive_enabled)


def get_zpa_segment_group(id: Optional[str] = None,
                          name: Optional[str] = None,
                          policy_migrated: Optional[bool] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetZPASegmentGroupResult:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_zpa as zpa

    example = zpa.get_zpa_segment_group(name="segment_group_name")
    ```


    :param str id: The ID of the segment group to be exported.
    :param str name: The name of the segment group to be exported.
    :param bool policy_migrated: (bool)
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['policyMigrated'] = policy_migrated
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zpa:index/getZPASegmentGroup:getZPASegmentGroup', __args__, opts=opts, typ=GetZPASegmentGroupResult).value

    return AwaitableGetZPASegmentGroupResult(
        applications=__ret__.applications,
        config_space=__ret__.config_space,
        creation_time=__ret__.creation_time,
        description=__ret__.description,
        enabled=__ret__.enabled,
        id=__ret__.id,
        modified_by=__ret__.modified_by,
        modified_time=__ret__.modified_time,
        name=__ret__.name,
        policy_migrated=__ret__.policy_migrated,
        tcp_keep_alive_enabled=__ret__.tcp_keep_alive_enabled)


@_utilities.lift_output_func(get_zpa_segment_group)
def get_zpa_segment_group_output(id: Optional[pulumi.Input[Optional[str]]] = None,
                                 name: Optional[pulumi.Input[Optional[str]]] = None,
                                 policy_migrated: Optional[pulumi.Input[Optional[bool]]] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetZPASegmentGroupResult]:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_zpa as zpa

    example = zpa.get_zpa_segment_group(name="segment_group_name")
    ```


    :param str id: The ID of the segment group to be exported.
    :param str name: The name of the segment group to be exported.
    :param bool policy_migrated: (bool)
    """
    ...
