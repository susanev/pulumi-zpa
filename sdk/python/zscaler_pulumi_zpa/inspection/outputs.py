# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'InspectionCustomControlsAssociatedInspectionProfileName',
    'InspectionCustomControlsRule',
    'InspectionCustomControlsRuleConditions',
    'InspectionProfileControlsInfo',
    'InspectionProfileCustomControl',
    'InspectionProfilePredefinedControl',
    'InspectionProfileWebSocketControl',
    'GetInspectionAllPredefinedControlsListResult',
    'GetInspectionAllPredefinedControlsListAssociatedInspectionProfileNameResult',
    'GetInspectionCustomControlsRuleResult',
    'GetInspectionCustomControlsRuleConditionResult',
    'GetInspectionPredefinedControlsAssociatedInspectionProfileNameResult',
    'GetInspectionProfileControlsInfoResult',
    'GetInspectionProfileCustomControlResult',
    'GetInspectionProfileCustomControlAssociatedInspectionProfileNameResult',
    'GetInspectionProfileCustomControlRuleResult',
    'GetInspectionProfileCustomControlRuleConditionResult',
    'GetInspectionProfilePredefinedControlResult',
    'GetInspectionProfilePredefinedControlAssociatedInspectionProfileNameResult',
    'GetInspectionProfileWebSocketControlResult',
    'GetInspectionProfileWebSocketControlAssociatedInspectionProfileNameResult',
]

@pulumi.output_type
class InspectionCustomControlsAssociatedInspectionProfileName(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[str]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class InspectionCustomControlsRule(dict):
    def __init__(__self__, *,
                 conditions: Optional['outputs.InspectionCustomControlsRuleConditions'] = None,
                 names: Optional[Sequence[str]] = None,
                 type: Optional[str] = None):
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if names is not None:
            pulumi.set(__self__, "names", names)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def conditions(self) -> Optional['outputs.InspectionCustomControlsRuleConditions']:
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "names")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class InspectionCustomControlsRuleConditions(dict):
    def __init__(__self__, *,
                 lhs: Optional[str] = None,
                 op: Optional[str] = None,
                 rhs: Optional[str] = None):
        if lhs is not None:
            pulumi.set(__self__, "lhs", lhs)
        if op is not None:
            pulumi.set(__self__, "op", op)
        if rhs is not None:
            pulumi.set(__self__, "rhs", rhs)

    @property
    @pulumi.getter
    def lhs(self) -> Optional[str]:
        return pulumi.get(self, "lhs")

    @property
    @pulumi.getter
    def op(self) -> Optional[str]:
        return pulumi.get(self, "op")

    @property
    @pulumi.getter
    def rhs(self) -> Optional[str]:
        return pulumi.get(self, "rhs")


@pulumi.output_type
class InspectionProfileControlsInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "controlType":
            suggest = "control_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InspectionProfileControlsInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InspectionProfileControlsInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InspectionProfileControlsInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 control_type: Optional[str] = None,
                 count: Optional[str] = None):
        """
        :param str control_type: (string) Control types. Supported Values: `WEBSOCKET_PREDEFINED`, `WEBSOCKET_CUSTOM`, `CUSTOM`, `PREDEFINED`, `ZSCALER`
        :param str count: (Optional) Control information counts `Long`
        """
        if control_type is not None:
            pulumi.set(__self__, "control_type", control_type)
        if count is not None:
            pulumi.set(__self__, "count", count)

    @property
    @pulumi.getter(name="controlType")
    def control_type(self) -> Optional[str]:
        """
        (string) Control types. Supported Values: `WEBSOCKET_PREDEFINED`, `WEBSOCKET_CUSTOM`, `CUSTOM`, `PREDEFINED`, `ZSCALER`
        """
        return pulumi.get(self, "control_type")

    @property
    @pulumi.getter
    def count(self) -> Optional[str]:
        """
        (Optional) Control information counts `Long`
        """
        return pulumi.get(self, "count")


@pulumi.output_type
class InspectionProfileCustomControl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionValue":
            suggest = "action_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InspectionProfileCustomControl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InspectionProfileCustomControl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InspectionProfileCustomControl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 action: Optional[str] = None,
                 action_value: Optional[str] = None):
        """
        :param str id: ID of the predefined control
        :param str action: The action of the predefined control. Supported values: `PASS`, `BLOCK` and `REDIRECT`
        :param str action_value: Value for the predefined controls action. This field is only required if the action is set to REDIRECT. This field is only required if the action is set to `REDIRECT`.
        """
        pulumi.set(__self__, "id", id)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if action_value is not None:
            pulumi.set(__self__, "action_value", action_value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the predefined control
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        The action of the predefined control. Supported values: `PASS`, `BLOCK` and `REDIRECT`
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="actionValue")
    def action_value(self) -> Optional[str]:
        """
        Value for the predefined controls action. This field is only required if the action is set to REDIRECT. This field is only required if the action is set to `REDIRECT`.
        """
        return pulumi.get(self, "action_value")


@pulumi.output_type
class InspectionProfilePredefinedControl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionValue":
            suggest = "action_value"
        elif key == "controlType":
            suggest = "control_type"
        elif key == "protocolType":
            suggest = "protocol_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InspectionProfilePredefinedControl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InspectionProfilePredefinedControl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InspectionProfilePredefinedControl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: str,
                 id: str,
                 action_value: Optional[str] = None,
                 control_type: Optional[str] = None,
                 protocol_type: Optional[str] = None):
        """
        :param str action: The action of the predefined control. Supported values: `PASS`, `BLOCK` and `REDIRECT`
        :param str id: ID of the predefined control
        :param str action_value: Value for the predefined controls action. This field is only required if the action is set to REDIRECT. This field is only required if the action is set to `REDIRECT`.
        :param str control_type: (string) Control types. Supported Values: `WEBSOCKET_PREDEFINED`, `WEBSOCKET_CUSTOM`, `CUSTOM`, `PREDEFINED`, `ZSCALER`
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "id", id)
        if action_value is not None:
            pulumi.set(__self__, "action_value", action_value)
        if control_type is not None:
            pulumi.set(__self__, "control_type", control_type)
        if protocol_type is not None:
            pulumi.set(__self__, "protocol_type", protocol_type)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        The action of the predefined control. Supported values: `PASS`, `BLOCK` and `REDIRECT`
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the predefined control
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="actionValue")
    def action_value(self) -> Optional[str]:
        """
        Value for the predefined controls action. This field is only required if the action is set to REDIRECT. This field is only required if the action is set to `REDIRECT`.
        """
        return pulumi.get(self, "action_value")

    @property
    @pulumi.getter(name="controlType")
    def control_type(self) -> Optional[str]:
        """
        (string) Control types. Supported Values: `WEBSOCKET_PREDEFINED`, `WEBSOCKET_CUSTOM`, `CUSTOM`, `PREDEFINED`, `ZSCALER`
        """
        return pulumi.get(self, "control_type")

    @property
    @pulumi.getter(name="protocolType")
    def protocol_type(self) -> Optional[str]:
        return pulumi.get(self, "protocol_type")


@pulumi.output_type
class InspectionProfileWebSocketControl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionValue":
            suggest = "action_value"
        elif key == "controlType":
            suggest = "control_type"
        elif key == "protocolType":
            suggest = "protocol_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InspectionProfileWebSocketControl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InspectionProfileWebSocketControl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InspectionProfileWebSocketControl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: str,
                 id: str,
                 action_value: Optional[str] = None,
                 control_type: Optional[str] = None,
                 protocol_type: Optional[str] = None):
        """
        :param str action: The action of the predefined control. Supported values: `PASS`, `BLOCK` and `REDIRECT`
        :param str id: ID of the predefined control
        :param str action_value: Value for the predefined controls action. This field is only required if the action is set to REDIRECT. This field is only required if the action is set to `REDIRECT`.
        :param str control_type: (string) Control types. Supported Values: `WEBSOCKET_PREDEFINED`, `WEBSOCKET_CUSTOM`, `CUSTOM`, `PREDEFINED`, `ZSCALER`
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "id", id)
        if action_value is not None:
            pulumi.set(__self__, "action_value", action_value)
        if control_type is not None:
            pulumi.set(__self__, "control_type", control_type)
        if protocol_type is not None:
            pulumi.set(__self__, "protocol_type", protocol_type)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        The action of the predefined control. Supported values: `PASS`, `BLOCK` and `REDIRECT`
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the predefined control
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="actionValue")
    def action_value(self) -> Optional[str]:
        """
        Value for the predefined controls action. This field is only required if the action is set to REDIRECT. This field is only required if the action is set to `REDIRECT`.
        """
        return pulumi.get(self, "action_value")

    @property
    @pulumi.getter(name="controlType")
    def control_type(self) -> Optional[str]:
        """
        (string) Control types. Supported Values: `WEBSOCKET_PREDEFINED`, `WEBSOCKET_CUSTOM`, `CUSTOM`, `PREDEFINED`, `ZSCALER`
        """
        return pulumi.get(self, "control_type")

    @property
    @pulumi.getter(name="protocolType")
    def protocol_type(self) -> Optional[str]:
        return pulumi.get(self, "protocol_type")


@pulumi.output_type
class GetInspectionAllPredefinedControlsListResult(dict):
    def __init__(__self__, *,
                 action: str,
                 action_value: str,
                 associated_inspection_profile_names: Sequence['outputs.GetInspectionAllPredefinedControlsListAssociatedInspectionProfileNameResult'],
                 attachment: str,
                 control_group: str,
                 control_number: str,
                 control_type: str,
                 creation_time: str,
                 default_action: str,
                 default_action_value: str,
                 description: str,
                 id: str,
                 modified_time: str,
                 modifiedby: str,
                 name: str,
                 paranoia_level: str,
                 protocol_type: str,
                 severity: str,
                 version: str):
        """
        :param str action: (string)
        :param str action_value: (string)
        :param Sequence['GetInspectionAllPredefinedControlsListAssociatedInspectionProfileNameArgs'] associated_inspection_profile_names: (string)
        :param str attachment: (string)
        :param str control_group: (string)
        :param str control_number: (string)
        :param str control_type: (string) Returned values: `WEBSOCKET_PREDEFINED`, `WEBSOCKET_CUSTOM`, `ZSCALER`, `CUSTOM`, `PREDEFINED`
        :param str creation_time: (string)
        :param str default_action: (string)
        :param str default_action_value: (string)
        :param str description: (string)
        :param str id: (string)
        :param str modified_time: (string)
        :param str name: (string)
        :param str paranoia_level: (string)
        :param str protocol_type: (string) Returned values: `HTTP`, `HTTPS`, `FTP`, `RDP`, `SSH`, `WEBSOCKET`
        :param str severity: (string)
        :param str version: The version of the predefined control, the default is: `OWASP_CRS/3.3.0`
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "action_value", action_value)
        pulumi.set(__self__, "associated_inspection_profile_names", associated_inspection_profile_names)
        pulumi.set(__self__, "attachment", attachment)
        pulumi.set(__self__, "control_group", control_group)
        pulumi.set(__self__, "control_number", control_number)
        pulumi.set(__self__, "control_type", control_type)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "default_action", default_action)
        pulumi.set(__self__, "default_action_value", default_action_value)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "modifiedby", modifiedby)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "paranoia_level", paranoia_level)
        pulumi.set(__self__, "protocol_type", protocol_type)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="actionValue")
    def action_value(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "action_value")

    @property
    @pulumi.getter(name="associatedInspectionProfileNames")
    def associated_inspection_profile_names(self) -> Sequence['outputs.GetInspectionAllPredefinedControlsListAssociatedInspectionProfileNameResult']:
        """
        (string)
        """
        return pulumi.get(self, "associated_inspection_profile_names")

    @property
    @pulumi.getter
    def attachment(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "attachment")

    @property
    @pulumi.getter(name="controlGroup")
    def control_group(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "control_group")

    @property
    @pulumi.getter(name="controlNumber")
    def control_number(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "control_number")

    @property
    @pulumi.getter(name="controlType")
    def control_type(self) -> str:
        """
        (string) Returned values: `WEBSOCKET_PREDEFINED`, `WEBSOCKET_CUSTOM`, `ZSCALER`, `CUSTOM`, `PREDEFINED`
        """
        return pulumi.get(self, "control_type")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="defaultAction")
    def default_action(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "default_action")

    @property
    @pulumi.getter(name="defaultActionValue")
    def default_action_value(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "default_action_value")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def modifiedby(self) -> str:
        return pulumi.get(self, "modifiedby")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="paranoiaLevel")
    def paranoia_level(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "paranoia_level")

    @property
    @pulumi.getter(name="protocolType")
    def protocol_type(self) -> str:
        """
        (string) Returned values: `HTTP`, `HTTPS`, `FTP`, `RDP`, `SSH`, `WEBSOCKET`
        """
        return pulumi.get(self, "protocol_type")

    @property
    @pulumi.getter
    def severity(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the predefined control, the default is: `OWASP_CRS/3.3.0`
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetInspectionAllPredefinedControlsListAssociatedInspectionProfileNameResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: (string)
        :param str name: (string)
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetInspectionCustomControlsRuleResult(dict):
    def __init__(__self__, *,
                 conditions: Sequence['outputs.GetInspectionCustomControlsRuleConditionResult'],
                 names: Sequence[str],
                 type: str):
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "names", names)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.GetInspectionCustomControlsRuleConditionResult']:
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def names(self) -> Sequence[str]:
        return pulumi.get(self, "names")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetInspectionCustomControlsRuleConditionResult(dict):
    def __init__(__self__, *,
                 lhs: str,
                 op: str,
                 rhs: str):
        pulumi.set(__self__, "lhs", lhs)
        pulumi.set(__self__, "op", op)
        pulumi.set(__self__, "rhs", rhs)

    @property
    @pulumi.getter
    def lhs(self) -> str:
        return pulumi.get(self, "lhs")

    @property
    @pulumi.getter
    def op(self) -> str:
        return pulumi.get(self, "op")

    @property
    @pulumi.getter
    def rhs(self) -> str:
        return pulumi.get(self, "rhs")


@pulumi.output_type
class GetInspectionPredefinedControlsAssociatedInspectionProfileNameResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: (Computed)
        :param str name: The name of the predefined control.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        (Computed)
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the predefined control.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetInspectionProfileControlsInfoResult(dict):
    def __init__(__self__, *,
                 control_type: str,
                 count: str):
        """
        :param str control_type: (string) Control types. Supported Values: `WEBSOCKET_PREDEFINED`, `WEBSOCKET_CUSTOM`, `CUSTOM`, `PREDEFINED`, `ZSCALER`
        :param str count: (string) Control information counts `Long`
        """
        pulumi.set(__self__, "control_type", control_type)
        pulumi.set(__self__, "count", count)

    @property
    @pulumi.getter(name="controlType")
    def control_type(self) -> str:
        """
        (string) Control types. Supported Values: `WEBSOCKET_PREDEFINED`, `WEBSOCKET_CUSTOM`, `CUSTOM`, `PREDEFINED`, `ZSCALER`
        """
        return pulumi.get(self, "control_type")

    @property
    @pulumi.getter
    def count(self) -> str:
        """
        (string) Control information counts `Long`
        """
        return pulumi.get(self, "count")


@pulumi.output_type
class GetInspectionProfileCustomControlResult(dict):
    def __init__(__self__, *,
                 action: str,
                 action_value: str,
                 associated_inspection_profile_names: Sequence['outputs.GetInspectionProfileCustomControlAssociatedInspectionProfileNameResult'],
                 control_number: str,
                 control_rule_json: str,
                 creation_time: str,
                 default_action: str,
                 default_action_value: str,
                 description: str,
                 id: str,
                 modified_by: str,
                 modified_time: str,
                 name: str,
                 paranoia_level: str,
                 rules: Sequence['outputs.GetInspectionProfileCustomControlRuleResult'],
                 severity: str,
                 type: str,
                 version: str):
        """
        :param str action: (string) The action of the predefined control. Supported values: `PASS`, `BLOCK` and `REDIRECT`
        :param str action_value: (string) Value for the predefined controls action. This field is only required if the action is set to REDIRECT. This field is only required if the action is set to `REDIRECT`.
        :param Sequence['GetInspectionProfileCustomControlAssociatedInspectionProfileNameArgs'] associated_inspection_profile_names: (string) Name of the inspection profile
        :param str control_rule_json: (string) Custom controls string in JSON format
        :param str description: (string) Description of the inspection profile.
        :param str id: This field defines the id of the application server.
        :param str name: This field defines the name of the server.
        :param str paranoia_level: (string) OWASP Predefined Paranoia Level. Range: [1-4], inclusive
        :param Sequence['GetInspectionProfileCustomControlRuleArgs'] rules: (string) Rules of the custom controls applied as conditions `JSON`
        :param str type: (string) Type value for the rules
        :param str version: (string) The version of the predefined control, the default is: `OWASP_CRS/3.3.0`
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "action_value", action_value)
        pulumi.set(__self__, "associated_inspection_profile_names", associated_inspection_profile_names)
        pulumi.set(__self__, "control_number", control_number)
        pulumi.set(__self__, "control_rule_json", control_rule_json)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "default_action", default_action)
        pulumi.set(__self__, "default_action_value", default_action_value)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "modified_by", modified_by)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "paranoia_level", paranoia_level)
        pulumi.set(__self__, "rules", rules)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        (string) The action of the predefined control. Supported values: `PASS`, `BLOCK` and `REDIRECT`
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="actionValue")
    def action_value(self) -> str:
        """
        (string) Value for the predefined controls action. This field is only required if the action is set to REDIRECT. This field is only required if the action is set to `REDIRECT`.
        """
        return pulumi.get(self, "action_value")

    @property
    @pulumi.getter(name="associatedInspectionProfileNames")
    def associated_inspection_profile_names(self) -> Sequence['outputs.GetInspectionProfileCustomControlAssociatedInspectionProfileNameResult']:
        """
        (string) Name of the inspection profile
        """
        return pulumi.get(self, "associated_inspection_profile_names")

    @property
    @pulumi.getter(name="controlNumber")
    def control_number(self) -> str:
        return pulumi.get(self, "control_number")

    @property
    @pulumi.getter(name="controlRuleJson")
    def control_rule_json(self) -> str:
        """
        (string) Custom controls string in JSON format
        """
        return pulumi.get(self, "control_rule_json")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="defaultAction")
    def default_action(self) -> str:
        return pulumi.get(self, "default_action")

    @property
    @pulumi.getter(name="defaultActionValue")
    def default_action_value(self) -> str:
        return pulumi.get(self, "default_action_value")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        (string) Description of the inspection profile.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        This field defines the id of the application server.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="modifiedBy")
    def modified_by(self) -> str:
        return pulumi.get(self, "modified_by")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        This field defines the name of the server.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="paranoiaLevel")
    def paranoia_level(self) -> str:
        """
        (string) OWASP Predefined Paranoia Level. Range: [1-4], inclusive
        """
        return pulumi.get(self, "paranoia_level")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetInspectionProfileCustomControlRuleResult']:
        """
        (string) Rules of the custom controls applied as conditions `JSON`
        """
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter
    def severity(self) -> str:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        (string) Type value for the rules
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        (string) The version of the predefined control, the default is: `OWASP_CRS/3.3.0`
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetInspectionProfileCustomControlAssociatedInspectionProfileNameResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: This field defines the id of the application server.
        :param str name: This field defines the name of the server.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        This field defines the id of the application server.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        This field defines the name of the server.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetInspectionProfileCustomControlRuleResult(dict):
    def __init__(__self__, *,
                 conditions: Sequence['outputs.GetInspectionProfileCustomControlRuleConditionResult'],
                 names: str,
                 type: str):
        """
        :param Sequence['GetInspectionProfileCustomControlRuleConditionArgs'] conditions: (string)
        :param str names: (string) Name of the rules. If rules.type is set to `REQUEST_HEADERS`, `REQUEST_COOKIES`, or `RESPONSE_HEADERS`, the rules.name field is required.
        :param str type: (string) Type value for the rules
        """
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "names", names)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.GetInspectionProfileCustomControlRuleConditionResult']:
        """
        (string)
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def names(self) -> str:
        """
        (string) Name of the rules. If rules.type is set to `REQUEST_HEADERS`, `REQUEST_COOKIES`, or `RESPONSE_HEADERS`, the rules.name field is required.
        """
        return pulumi.get(self, "names")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        (string) Type value for the rules
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetInspectionProfileCustomControlRuleConditionResult(dict):
    def __init__(__self__, *,
                 lhs: str,
                 op: str,
                 rhs: str):
        """
        :param str lhs: (string) Signifies the key for the object type Supported values: `SIZE`, `VALUE`
        :param str op: (string) If lhs is set to SIZE, then the user may pass one of the following: `EQ: Equals`, `LE: Less than or equal to`, `GE: Greater than or equal to`. If the lhs is set to `VALUE`, then the user may pass one of the following: `CONTAINS`, `STARTS_WITH`, `ENDS_WITH`, `RX`.
        :param str rhs: (string) Denotes the value for the given object type. Its value depends on the key. If rules.type is set to REQUEST_METHOD, the conditions.rhs field must have one of the following values: `GET`,`HEAD`, `POST`, `OPTIONS`, `PUT`, `DELETE`, `TRACE`
        """
        pulumi.set(__self__, "lhs", lhs)
        pulumi.set(__self__, "op", op)
        pulumi.set(__self__, "rhs", rhs)

    @property
    @pulumi.getter
    def lhs(self) -> str:
        """
        (string) Signifies the key for the object type Supported values: `SIZE`, `VALUE`
        """
        return pulumi.get(self, "lhs")

    @property
    @pulumi.getter
    def op(self) -> str:
        """
        (string) If lhs is set to SIZE, then the user may pass one of the following: `EQ: Equals`, `LE: Less than or equal to`, `GE: Greater than or equal to`. If the lhs is set to `VALUE`, then the user may pass one of the following: `CONTAINS`, `STARTS_WITH`, `ENDS_WITH`, `RX`.
        """
        return pulumi.get(self, "op")

    @property
    @pulumi.getter
    def rhs(self) -> str:
        """
        (string) Denotes the value for the given object type. Its value depends on the key. If rules.type is set to REQUEST_METHOD, the conditions.rhs field must have one of the following values: `GET`,`HEAD`, `POST`, `OPTIONS`, `PUT`, `DELETE`, `TRACE`
        """
        return pulumi.get(self, "rhs")


@pulumi.output_type
class GetInspectionProfilePredefinedControlResult(dict):
    def __init__(__self__, *,
                 action: str,
                 action_value: str,
                 associated_inspection_profile_names: Sequence['outputs.GetInspectionProfilePredefinedControlAssociatedInspectionProfileNameResult'],
                 attachment: str,
                 control_group: str,
                 control_number: str,
                 control_type: str,
                 creation_time: str,
                 default_action: str,
                 default_action_value: str,
                 description: str,
                 id: str,
                 modified_by: str,
                 modified_time: str,
                 name: str,
                 paranoia_level: str,
                 severity: str,
                 version: str):
        """
        :param str action: (string) The action of the predefined control. Supported values: `PASS`, `BLOCK` and `REDIRECT`
        :param str action_value: (string) Value for the predefined controls action. This field is only required if the action is set to REDIRECT. This field is only required if the action is set to `REDIRECT`.
        :param Sequence['GetInspectionProfilePredefinedControlAssociatedInspectionProfileNameArgs'] associated_inspection_profile_names: (string) Name of the inspection profile
        :param str attachment: (string) Control attachment
        :param str control_group: (string) Control group
        :param str control_type: (string) Control types. Supported Values: `WEBSOCKET_PREDEFINED`, `WEBSOCKET_CUSTOM`, `CUSTOM`, `PREDEFINED`, `ZSCALER`
        :param str description: (string) Description of the inspection profile.
        :param str id: This field defines the id of the application server.
        :param str name: This field defines the name of the server.
        :param str paranoia_level: (string) OWASP Predefined Paranoia Level. Range: [1-4], inclusive
        :param str version: (string) The version of the predefined control, the default is: `OWASP_CRS/3.3.0`
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "action_value", action_value)
        pulumi.set(__self__, "associated_inspection_profile_names", associated_inspection_profile_names)
        pulumi.set(__self__, "attachment", attachment)
        pulumi.set(__self__, "control_group", control_group)
        pulumi.set(__self__, "control_number", control_number)
        pulumi.set(__self__, "control_type", control_type)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "default_action", default_action)
        pulumi.set(__self__, "default_action_value", default_action_value)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "modified_by", modified_by)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "paranoia_level", paranoia_level)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        (string) The action of the predefined control. Supported values: `PASS`, `BLOCK` and `REDIRECT`
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="actionValue")
    def action_value(self) -> str:
        """
        (string) Value for the predefined controls action. This field is only required if the action is set to REDIRECT. This field is only required if the action is set to `REDIRECT`.
        """
        return pulumi.get(self, "action_value")

    @property
    @pulumi.getter(name="associatedInspectionProfileNames")
    def associated_inspection_profile_names(self) -> Sequence['outputs.GetInspectionProfilePredefinedControlAssociatedInspectionProfileNameResult']:
        """
        (string) Name of the inspection profile
        """
        return pulumi.get(self, "associated_inspection_profile_names")

    @property
    @pulumi.getter
    def attachment(self) -> str:
        """
        (string) Control attachment
        """
        return pulumi.get(self, "attachment")

    @property
    @pulumi.getter(name="controlGroup")
    def control_group(self) -> str:
        """
        (string) Control group
        """
        return pulumi.get(self, "control_group")

    @property
    @pulumi.getter(name="controlNumber")
    def control_number(self) -> str:
        return pulumi.get(self, "control_number")

    @property
    @pulumi.getter(name="controlType")
    def control_type(self) -> str:
        """
        (string) Control types. Supported Values: `WEBSOCKET_PREDEFINED`, `WEBSOCKET_CUSTOM`, `CUSTOM`, `PREDEFINED`, `ZSCALER`
        """
        return pulumi.get(self, "control_type")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="defaultAction")
    def default_action(self) -> str:
        return pulumi.get(self, "default_action")

    @property
    @pulumi.getter(name="defaultActionValue")
    def default_action_value(self) -> str:
        return pulumi.get(self, "default_action_value")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        (string) Description of the inspection profile.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        This field defines the id of the application server.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="modifiedBy")
    def modified_by(self) -> str:
        return pulumi.get(self, "modified_by")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        This field defines the name of the server.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="paranoiaLevel")
    def paranoia_level(self) -> str:
        """
        (string) OWASP Predefined Paranoia Level. Range: [1-4], inclusive
        """
        return pulumi.get(self, "paranoia_level")

    @property
    @pulumi.getter
    def severity(self) -> str:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        (string) The version of the predefined control, the default is: `OWASP_CRS/3.3.0`
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetInspectionProfilePredefinedControlAssociatedInspectionProfileNameResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: This field defines the id of the application server.
        :param str name: This field defines the name of the server.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        This field defines the id of the application server.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        This field defines the name of the server.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetInspectionProfileWebSocketControlResult(dict):
    def __init__(__self__, *,
                 action: str,
                 action_value: str,
                 associated_inspection_profile_names: Sequence['outputs.GetInspectionProfileWebSocketControlAssociatedInspectionProfileNameResult'],
                 attachment: str,
                 control_group: str,
                 control_number: str,
                 control_type: str,
                 creation_time: str,
                 default_action: str,
                 default_action_value: str,
                 description: str,
                 id: str,
                 modified_by: str,
                 modified_time: str,
                 name: str,
                 paranoia_level: str,
                 protocol_type: str,
                 severity: str,
                 version: str):
        """
        :param str action: (string) The action of the predefined control. Supported values: `PASS`, `BLOCK` and `REDIRECT`
        :param str action_value: (string) Value for the predefined controls action. This field is only required if the action is set to REDIRECT. This field is only required if the action is set to `REDIRECT`.
        :param Sequence['GetInspectionProfileWebSocketControlAssociatedInspectionProfileNameArgs'] associated_inspection_profile_names: (string) Name of the inspection profile
        :param str attachment: (string) Control attachment
        :param str control_group: (string) Control group
        :param str control_type: (string) Control types. Supported Values: `WEBSOCKET_PREDEFINED`, `WEBSOCKET_CUSTOM`, `CUSTOM`, `PREDEFINED`, `ZSCALER`
        :param str description: (string) Description of the inspection profile.
        :param str id: This field defines the id of the application server.
        :param str name: This field defines the name of the server.
        :param str paranoia_level: (string) OWASP Predefined Paranoia Level. Range: [1-4], inclusive
        :param str version: (string) The version of the predefined control, the default is: `OWASP_CRS/3.3.0`
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "action_value", action_value)
        pulumi.set(__self__, "associated_inspection_profile_names", associated_inspection_profile_names)
        pulumi.set(__self__, "attachment", attachment)
        pulumi.set(__self__, "control_group", control_group)
        pulumi.set(__self__, "control_number", control_number)
        pulumi.set(__self__, "control_type", control_type)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "default_action", default_action)
        pulumi.set(__self__, "default_action_value", default_action_value)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "modified_by", modified_by)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "paranoia_level", paranoia_level)
        pulumi.set(__self__, "protocol_type", protocol_type)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        (string) The action of the predefined control. Supported values: `PASS`, `BLOCK` and `REDIRECT`
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="actionValue")
    def action_value(self) -> str:
        """
        (string) Value for the predefined controls action. This field is only required if the action is set to REDIRECT. This field is only required if the action is set to `REDIRECT`.
        """
        return pulumi.get(self, "action_value")

    @property
    @pulumi.getter(name="associatedInspectionProfileNames")
    def associated_inspection_profile_names(self) -> Sequence['outputs.GetInspectionProfileWebSocketControlAssociatedInspectionProfileNameResult']:
        """
        (string) Name of the inspection profile
        """
        return pulumi.get(self, "associated_inspection_profile_names")

    @property
    @pulumi.getter
    def attachment(self) -> str:
        """
        (string) Control attachment
        """
        return pulumi.get(self, "attachment")

    @property
    @pulumi.getter(name="controlGroup")
    def control_group(self) -> str:
        """
        (string) Control group
        """
        return pulumi.get(self, "control_group")

    @property
    @pulumi.getter(name="controlNumber")
    def control_number(self) -> str:
        return pulumi.get(self, "control_number")

    @property
    @pulumi.getter(name="controlType")
    def control_type(self) -> str:
        """
        (string) Control types. Supported Values: `WEBSOCKET_PREDEFINED`, `WEBSOCKET_CUSTOM`, `CUSTOM`, `PREDEFINED`, `ZSCALER`
        """
        return pulumi.get(self, "control_type")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="defaultAction")
    def default_action(self) -> str:
        return pulumi.get(self, "default_action")

    @property
    @pulumi.getter(name="defaultActionValue")
    def default_action_value(self) -> str:
        return pulumi.get(self, "default_action_value")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        (string) Description of the inspection profile.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        This field defines the id of the application server.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="modifiedBy")
    def modified_by(self) -> str:
        return pulumi.get(self, "modified_by")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        This field defines the name of the server.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="paranoiaLevel")
    def paranoia_level(self) -> str:
        """
        (string) OWASP Predefined Paranoia Level. Range: [1-4], inclusive
        """
        return pulumi.get(self, "paranoia_level")

    @property
    @pulumi.getter(name="protocolType")
    def protocol_type(self) -> str:
        return pulumi.get(self, "protocol_type")

    @property
    @pulumi.getter
    def severity(self) -> str:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        (string) The version of the predefined control, the default is: `OWASP_CRS/3.3.0`
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetInspectionProfileWebSocketControlAssociatedInspectionProfileNameResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: This field defines the id of the application server.
        :param str name: This field defines the name of the server.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        This field defines the id of the application server.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        This field defines the name of the server.
        """
        return pulumi.get(self, "name")


