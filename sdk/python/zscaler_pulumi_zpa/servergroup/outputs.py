# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ServerGroupAppConnectorGroup',
    'ServerGroupApplication',
    'ServerGroupServer',
    'GetServerGroupAppConnectorGroupResult',
    'GetServerGroupAppConnectorGroupConnectorResult',
    'GetServerGroupAppConnectorGroupServerGroupResult',
    'GetServerGroupApplicationResult',
    'GetServerGroupServerResult',
]

@pulumi.output_type
class ServerGroupAppConnectorGroup(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[str]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class ServerGroupApplication(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[str]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class ServerGroupServer(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[str]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class GetServerGroupAppConnectorGroupResult(dict):
    def __init__(__self__, *,
                 city_country: str,
                 connectors: Sequence['outputs.GetServerGroupAppConnectorGroupConnectorResult'],
                 country_code: str,
                 creation_time: str,
                 description: str,
                 dns_query_type: str,
                 enabled: bool,
                 geolocation_id: str,
                 id: str,
                 latitude: str,
                 location: str,
                 longitude: str,
                 modified_time: str,
                 modifiedby: str,
                 name: str,
                 server_groups: Sequence['outputs.GetServerGroupAppConnectorGroupServerGroupResult'],
                 siem_app_connector_group: bool,
                 upgrade_day: str,
                 upgrade_time_in_secs: str,
                 version_profile_id: str):
        """
        :param str description: (string) This field is the description of the server group.
        :param bool enabled: (bool) This field defines if the server group is enabled or disabled.
        :param str id: The ID of the server group to be exported.
        :param str name: The name of the server group to be exported.
        """
        pulumi.set(__self__, "city_country", city_country)
        pulumi.set(__self__, "connectors", connectors)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "dns_query_type", dns_query_type)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "geolocation_id", geolocation_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "latitude", latitude)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "longitude", longitude)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "modifiedby", modifiedby)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "server_groups", server_groups)
        pulumi.set(__self__, "siem_app_connector_group", siem_app_connector_group)
        pulumi.set(__self__, "upgrade_day", upgrade_day)
        pulumi.set(__self__, "upgrade_time_in_secs", upgrade_time_in_secs)
        pulumi.set(__self__, "version_profile_id", version_profile_id)

    @property
    @pulumi.getter(name="cityCountry")
    def city_country(self) -> str:
        return pulumi.get(self, "city_country")

    @property
    @pulumi.getter
    def connectors(self) -> Sequence['outputs.GetServerGroupAppConnectorGroupConnectorResult']:
        return pulumi.get(self, "connectors")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        (string) This field is the description of the server group.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dnsQueryType")
    def dns_query_type(self) -> str:
        return pulumi.get(self, "dns_query_type")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        (bool) This field defines if the server group is enabled or disabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="geolocationId")
    def geolocation_id(self) -> str:
        return pulumi.get(self, "geolocation_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the server group to be exported.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def latitude(self) -> str:
        return pulumi.get(self, "latitude")

    @property
    @pulumi.getter
    def location(self) -> str:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def longitude(self) -> str:
        return pulumi.get(self, "longitude")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def modifiedby(self) -> str:
        return pulumi.get(self, "modifiedby")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the server group to be exported.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="serverGroups")
    def server_groups(self) -> Sequence['outputs.GetServerGroupAppConnectorGroupServerGroupResult']:
        return pulumi.get(self, "server_groups")

    @property
    @pulumi.getter(name="siemAppConnectorGroup")
    def siem_app_connector_group(self) -> bool:
        return pulumi.get(self, "siem_app_connector_group")

    @property
    @pulumi.getter(name="upgradeDay")
    def upgrade_day(self) -> str:
        return pulumi.get(self, "upgrade_day")

    @property
    @pulumi.getter(name="upgradeTimeInSecs")
    def upgrade_time_in_secs(self) -> str:
        return pulumi.get(self, "upgrade_time_in_secs")

    @property
    @pulumi.getter(name="versionProfileId")
    def version_profile_id(self) -> str:
        return pulumi.get(self, "version_profile_id")


@pulumi.output_type
class GetServerGroupAppConnectorGroupConnectorResult(dict):
    def __init__(__self__, *,
                 creation_time: str,
                 description: str,
                 enabled: bool,
                 fingerprint: str,
                 id: str,
                 issued_cert_id: str,
                 modified_time: str,
                 modifiedby: str,
                 upgrade_attempt: str,
                 name: Optional[str] = None):
        """
        :param str description: (string) This field is the description of the server group.
        :param bool enabled: (bool) This field defines if the server group is enabled or disabled.
        :param str id: The ID of the server group to be exported.
        :param str name: The name of the server group to be exported.
        """
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "fingerprint", fingerprint)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "issued_cert_id", issued_cert_id)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "modifiedby", modifiedby)
        pulumi.set(__self__, "upgrade_attempt", upgrade_attempt)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        (string) This field is the description of the server group.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        (bool) This field defines if the server group is enabled or disabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def fingerprint(self) -> str:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the server group to be exported.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="issuedCertId")
    def issued_cert_id(self) -> str:
        return pulumi.get(self, "issued_cert_id")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def modifiedby(self) -> str:
        return pulumi.get(self, "modifiedby")

    @property
    @pulumi.getter(name="upgradeAttempt")
    def upgrade_attempt(self) -> str:
        return pulumi.get(self, "upgrade_attempt")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the server group to be exported.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetServerGroupAppConnectorGroupServerGroupResult(dict):
    def __init__(__self__, *,
                 config_space: str,
                 creation_time: str,
                 description: str,
                 dynamic_discovery: bool,
                 enabled: bool,
                 id: str,
                 modified_time: str,
                 modifiedby: str,
                 name: Optional[str] = None):
        """
        :param str config_space: (string)
        :param str description: (string) This field is the description of the server group.
        :param bool dynamic_discovery: (bool) This field controls dynamic discovery of the servers.
        :param bool enabled: (bool) This field defines if the server group is enabled or disabled.
        :param str id: The ID of the server group to be exported.
        :param str name: The name of the server group to be exported.
        """
        pulumi.set(__self__, "config_space", config_space)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "dynamic_discovery", dynamic_discovery)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "modifiedby", modifiedby)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="configSpace")
    def config_space(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "config_space")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        (string) This field is the description of the server group.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dynamicDiscovery")
    def dynamic_discovery(self) -> bool:
        """
        (bool) This field controls dynamic discovery of the servers.
        """
        return pulumi.get(self, "dynamic_discovery")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        (bool) This field defines if the server group is enabled or disabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the server group to be exported.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def modifiedby(self) -> str:
        return pulumi.get(self, "modifiedby")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the server group to be exported.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetServerGroupApplicationResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: The ID of the server group to be exported.
        :param str name: The name of the server group to be exported.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the server group to be exported.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the server group to be exported.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetServerGroupServerResult(dict):
    def __init__(__self__, *,
                 address: str,
                 app_server_group_ids: Sequence[str],
                 config_space: str,
                 creation_time: str,
                 description: str,
                 enabled: bool,
                 id: str,
                 modified_time: str,
                 modifiedby: str,
                 name: str):
        """
        :param str config_space: (string)
        :param str description: (string) This field is the description of the server group.
        :param bool enabled: (bool) This field defines if the server group is enabled or disabled.
        :param str id: The ID of the server group to be exported.
        :param str name: The name of the server group to be exported.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "app_server_group_ids", app_server_group_ids)
        pulumi.set(__self__, "config_space", config_space)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "modifiedby", modifiedby)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="appServerGroupIds")
    def app_server_group_ids(self) -> Sequence[str]:
        return pulumi.get(self, "app_server_group_ids")

    @property
    @pulumi.getter(name="configSpace")
    def config_space(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "config_space")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        (string) This field is the description of the server group.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        (bool) This field defines if the server group is enabled or disabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the server group to be exported.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def modifiedby(self) -> str:
        return pulumi.get(self, "modifiedby")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the server group to be exported.
        """
        return pulumi.get(self, "name")


