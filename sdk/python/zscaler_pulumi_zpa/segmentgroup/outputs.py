# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'SegmentGroupApplication',
    'GetSegmentGroupApplicationResult',
    'GetSegmentGroupApplicationServerGroupResult',
]

@pulumi.output_type
class SegmentGroupApplication(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetSegmentGroupApplicationResult(dict):
    def __init__(__self__, *,
                 bypass_type: str,
                 config_space: str,
                 creation_time: str,
                 default_idle_timeout: str,
                 default_max_age: str,
                 description: str,
                 domain_name: str,
                 domain_names: Sequence[str],
                 double_encrypt: bool,
                 enabled: bool,
                 health_check_type: str,
                 id: str,
                 ip_anchored: bool,
                 log_features: Sequence[str],
                 modified_by: str,
                 modified_time: str,
                 name: str,
                 passive_health_enabled: bool,
                 server_groups: Sequence['outputs.GetSegmentGroupApplicationServerGroupResult'],
                 tcp_port_ranges: Sequence[str],
                 tcp_ports_ins: Sequence[str],
                 tcp_ports_outs: Sequence[str],
                 udp_port_ranges: Sequence[str]):
        """
        :param str bypass_type: (string)
        :param str config_space: (string)
        :param str creation_time: (string)
        :param str default_idle_timeout: (string)
        :param str default_max_age: (string)
        :param str description: (string)
        :param str domain_name: (string)
        :param Sequence[str] domain_names: (string)
        :param bool double_encrypt: (string)
        :param bool enabled: (bool)
        :param str health_check_type: (string)
        :param str id: The ID of the segment group to be exported.
        :param bool ip_anchored: (bool)
        :param str modified_by: (string)
        :param str modified_time: (string)
        :param str name: The name of the segment group to be exported.
        :param bool passive_health_enabled: (bool)
        :param Sequence['GetSegmentGroupApplicationServerGroupArgs'] server_groups: (Computed)
        :param Sequence[str] tcp_port_ranges: (string)
        :param Sequence[str] tcp_ports_ins: (string)
        :param Sequence[str] udp_port_ranges: (string)
        """
        pulumi.set(__self__, "bypass_type", bypass_type)
        pulumi.set(__self__, "config_space", config_space)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "default_idle_timeout", default_idle_timeout)
        pulumi.set(__self__, "default_max_age", default_max_age)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "domain_names", domain_names)
        pulumi.set(__self__, "double_encrypt", double_encrypt)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "health_check_type", health_check_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_anchored", ip_anchored)
        pulumi.set(__self__, "log_features", log_features)
        pulumi.set(__self__, "modified_by", modified_by)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "passive_health_enabled", passive_health_enabled)
        pulumi.set(__self__, "server_groups", server_groups)
        pulumi.set(__self__, "tcp_port_ranges", tcp_port_ranges)
        pulumi.set(__self__, "tcp_ports_ins", tcp_ports_ins)
        pulumi.set(__self__, "tcp_ports_outs", tcp_ports_outs)
        pulumi.set(__self__, "udp_port_ranges", udp_port_ranges)

    @property
    @pulumi.getter(name="bypassType")
    def bypass_type(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "bypass_type")

    @property
    @pulumi.getter(name="configSpace")
    def config_space(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "config_space")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="defaultIdleTimeout")
    def default_idle_timeout(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "default_idle_timeout")

    @property
    @pulumi.getter(name="defaultMaxAge")
    def default_max_age(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "default_max_age")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter(name="domainNames")
    def domain_names(self) -> Sequence[str]:
        """
        (string)
        """
        return pulumi.get(self, "domain_names")

    @property
    @pulumi.getter(name="doubleEncrypt")
    def double_encrypt(self) -> bool:
        """
        (string)
        """
        return pulumi.get(self, "double_encrypt")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        (bool)
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="healthCheckType")
    def health_check_type(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "health_check_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the segment group to be exported.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAnchored")
    def ip_anchored(self) -> bool:
        """
        (bool)
        """
        return pulumi.get(self, "ip_anchored")

    @property
    @pulumi.getter(name="logFeatures")
    def log_features(self) -> Sequence[str]:
        return pulumi.get(self, "log_features")

    @property
    @pulumi.getter(name="modifiedBy")
    def modified_by(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "modified_by")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the segment group to be exported.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="passiveHealthEnabled")
    def passive_health_enabled(self) -> bool:
        """
        (bool)
        """
        return pulumi.get(self, "passive_health_enabled")

    @property
    @pulumi.getter(name="serverGroups")
    def server_groups(self) -> Sequence['outputs.GetSegmentGroupApplicationServerGroupResult']:
        """
        (Computed)
        """
        return pulumi.get(self, "server_groups")

    @property
    @pulumi.getter(name="tcpPortRanges")
    def tcp_port_ranges(self) -> Sequence[str]:
        """
        (string)
        """
        return pulumi.get(self, "tcp_port_ranges")

    @property
    @pulumi.getter(name="tcpPortsIns")
    def tcp_ports_ins(self) -> Sequence[str]:
        """
        (string)
        """
        return pulumi.get(self, "tcp_ports_ins")

    @property
    @pulumi.getter(name="tcpPortsOuts")
    def tcp_ports_outs(self) -> Sequence[str]:
        return pulumi.get(self, "tcp_ports_outs")

    @property
    @pulumi.getter(name="udpPortRanges")
    def udp_port_ranges(self) -> Sequence[str]:
        """
        (string)
        """
        return pulumi.get(self, "udp_port_ranges")


@pulumi.output_type
class GetSegmentGroupApplicationServerGroupResult(dict):
    def __init__(__self__, *,
                 config_space: str,
                 creation_time: str,
                 description: str,
                 dynamic_discovery: bool,
                 enabled: bool,
                 id: str,
                 modified_by: str,
                 modified_time: str,
                 name: str):
        """
        :param str config_space: (string)
        :param str creation_time: (string)
        :param str description: (string)
        :param bool dynamic_discovery: (bool)
        :param bool enabled: (bool)
        :param str id: The ID of the segment group to be exported.
        :param str modified_by: (string)
        :param str modified_time: (string)
        :param str name: The name of the segment group to be exported.
        """
        pulumi.set(__self__, "config_space", config_space)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "dynamic_discovery", dynamic_discovery)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "modified_by", modified_by)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="configSpace")
    def config_space(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "config_space")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dynamicDiscovery")
    def dynamic_discovery(self) -> bool:
        """
        (bool)
        """
        return pulumi.get(self, "dynamic_discovery")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        (bool)
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the segment group to be exported.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="modifiedBy")
    def modified_by(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "modified_by")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the segment group to be exported.
        """
        return pulumi.get(self, "name")


