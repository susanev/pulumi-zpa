# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'PolicyAccessTimeOutRuleConditionArgs',
    'PolicyAccessTimeOutRuleConditionOperandArgs',
]

@pulumi.input_type
class PolicyAccessTimeOutRuleConditionArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 id: Optional[pulumi.Input[str]] = None,
                 negated: Optional[pulumi.Input[bool]] = None,
                 operands: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessTimeOutRuleConditionOperandArgs']]]] = None):
        pulumi.set(__self__, "operator", operator)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if negated is not None:
            pulumi.set(__self__, "negated", negated)
        if operands is not None:
            pulumi.set(__self__, "operands", operands)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def negated(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negated")

    @negated.setter
    def negated(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negated", value)

    @property
    @pulumi.getter
    def operands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessTimeOutRuleConditionOperandArgs']]]]:
        return pulumi.get(self, "operands")

    @operands.setter
    def operands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessTimeOutRuleConditionOperandArgs']]]]):
        pulumi.set(self, "operands", value)


@pulumi.input_type
class PolicyAccessTimeOutRuleConditionOperandArgs:
    def __init__(__self__, *,
                 lhs: pulumi.Input[str],
                 object_type: pulumi.Input[str],
                 id: Optional[pulumi.Input[str]] = None,
                 idp_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 rhs: Optional[pulumi.Input[str]] = None,
                 rhs_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "lhs", lhs)
        pulumi.set(__self__, "object_type", object_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idp_id is not None:
            pulumi.set(__self__, "idp_id", idp_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rhs is not None:
            pulumi.set(__self__, "rhs", rhs)
        if rhs_lists is not None:
            pulumi.set(__self__, "rhs_lists", rhs_lists)

    @property
    @pulumi.getter
    def lhs(self) -> pulumi.Input[str]:
        return pulumi.get(self, "lhs")

    @lhs.setter
    def lhs(self, value: pulumi.Input[str]):
        pulumi.set(self, "lhs", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "object_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="idpId")
    def idp_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "idp_id")

    @idp_id.setter
    def idp_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def rhs(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rhs")

    @rhs.setter
    def rhs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rhs", value)

    @property
    @pulumi.getter(name="rhsLists")
    def rhs_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "rhs_lists")

    @rhs_lists.setter
    def rhs_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "rhs_lists", value)


