# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'LSSConfigControllerConfigArgs',
    'LSSConfigControllerConnectorGroupArgs',
    'LSSConfigControllerPolicyRuleResourceArgs',
    'LSSConfigControllerPolicyRuleResourceConditionArgs',
    'LSSConfigControllerPolicyRuleResourceConditionOperandArgs',
    'GetLSSConfigControllerConfigArgs',
]

@pulumi.input_type
class LSSConfigControllerConfigArgs:
    def __init__(__self__, *,
                 format: pulumi.Input[str],
                 lss_host: pulumi.Input[str],
                 lss_port: pulumi.Input[str],
                 name: pulumi.Input[str],
                 source_log_type: pulumi.Input[str],
                 audit_message: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 use_tls: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] format: The format of the LSS resource. The supported formats are: `JSON`, `CSV`, and `TSV`
        :param pulumi.Input[str] lss_host: The IP or FQDN of the SIEM (Log Receiver) where logs will be forwarded to.
        :param pulumi.Input[str] lss_port: The destination port of the SIEM (Log Receiver) where logs will be forwarded to.
        :param pulumi.Input[str] name: (Optional)
        :param pulumi.Input[str] source_log_type: Refer to the log type documentation
        :param pulumi.Input[str] audit_message: (Optional)
        :param pulumi.Input[str] description: (Optional)
        :param pulumi.Input[bool] enabled: (Optional)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] filters: (Optional)
        :param pulumi.Input[str] id: App Connector Group ID(s) where logs will be forwarded to.
        :param pulumi.Input[bool] use_tls: (Optional)
        """
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "lss_host", lss_host)
        pulumi.set(__self__, "lss_port", lss_port)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "source_log_type", source_log_type)
        if audit_message is not None:
            pulumi.set(__self__, "audit_message", audit_message)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if use_tls is not None:
            pulumi.set(__self__, "use_tls", use_tls)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input[str]:
        """
        The format of the LSS resource. The supported formats are: `JSON`, `CSV`, and `TSV`
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input[str]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter(name="lssHost")
    def lss_host(self) -> pulumi.Input[str]:
        """
        The IP or FQDN of the SIEM (Log Receiver) where logs will be forwarded to.
        """
        return pulumi.get(self, "lss_host")

    @lss_host.setter
    def lss_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "lss_host", value)

    @property
    @pulumi.getter(name="lssPort")
    def lss_port(self) -> pulumi.Input[str]:
        """
        The destination port of the SIEM (Log Receiver) where logs will be forwarded to.
        """
        return pulumi.get(self, "lss_port")

    @lss_port.setter
    def lss_port(self, value: pulumi.Input[str]):
        pulumi.set(self, "lss_port", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        (Optional)
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sourceLogType")
    def source_log_type(self) -> pulumi.Input[str]:
        """
        Refer to the log type documentation
        """
        return pulumi.get(self, "source_log_type")

    @source_log_type.setter
    def source_log_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_log_type", value)

    @property
    @pulumi.getter(name="auditMessage")
    def audit_message(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional)
        """
        return pulumi.get(self, "audit_message")

    @audit_message.setter
    def audit_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "audit_message", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional)
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Optional)
        """
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        App Connector Group ID(s) where logs will be forwarded to.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="useTls")
    def use_tls(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional)
        """
        return pulumi.get(self, "use_tls")

    @use_tls.setter
    def use_tls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_tls", value)


@pulumi.input_type
class LSSConfigControllerConnectorGroupArgs:
    def __init__(__self__, *,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ids: App Connector Group ID(s) where logs will be forwarded to.
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        App Connector Group ID(s) where logs will be forwarded to.
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class LSSConfigControllerPolicyRuleResourceArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 action: Optional[pulumi.Input[str]] = None,
                 action_id: Optional[pulumi.Input[str]] = None,
                 bypass_default_rule: Optional[pulumi.Input[bool]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['LSSConfigControllerPolicyRuleResourceConditionArgs']]]] = None,
                 custom_msg: Optional[pulumi.Input[str]] = None,
                 default_rule: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 lss_default_rule: Optional[pulumi.Input[bool]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 policy_set_id: Optional[pulumi.Input[str]] = None,
                 policy_type: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 reauth_default_rule: Optional[pulumi.Input[bool]] = None,
                 reauth_idle_timeout: Optional[pulumi.Input[str]] = None,
                 reauth_timeout: Optional[pulumi.Input[str]] = None,
                 rule_order: Optional[pulumi.Input[str]] = None,
                 zpn_inspection_profile_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: (Optional)
        :param pulumi.Input[str] action: (Optional)
        :param pulumi.Input[Sequence[pulumi.Input['LSSConfigControllerPolicyRuleResourceConditionArgs']]] conditions: (Optional)
        :param pulumi.Input[str] custom_msg: (Optional)
        :param pulumi.Input[str] description: (Optional)
        :param pulumi.Input[str] id: App Connector Group ID(s) where logs will be forwarded to.
        :param pulumi.Input[str] operator: (Optional) - Supported values are: `AND` or `OR`
        """
        pulumi.set(__self__, "name", name)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if action_id is not None:
            pulumi.set(__self__, "action_id", action_id)
        if bypass_default_rule is not None:
            pulumi.set(__self__, "bypass_default_rule", bypass_default_rule)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if custom_msg is not None:
            pulumi.set(__self__, "custom_msg", custom_msg)
        if default_rule is not None:
            pulumi.set(__self__, "default_rule", default_rule)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lss_default_rule is not None:
            pulumi.set(__self__, "lss_default_rule", lss_default_rule)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if policy_set_id is not None:
            pulumi.set(__self__, "policy_set_id", policy_set_id)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if reauth_default_rule is not None:
            pulumi.set(__self__, "reauth_default_rule", reauth_default_rule)
        if reauth_idle_timeout is not None:
            pulumi.set(__self__, "reauth_idle_timeout", reauth_idle_timeout)
        if reauth_timeout is not None:
            pulumi.set(__self__, "reauth_timeout", reauth_timeout)
        if rule_order is not None:
            pulumi.set(__self__, "rule_order", rule_order)
        if zpn_inspection_profile_id is not None:
            pulumi.set(__self__, "zpn_inspection_profile_id", zpn_inspection_profile_id)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        (Optional)
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional)
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="actionId")
    def action_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action_id")

    @action_id.setter
    def action_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action_id", value)

    @property
    @pulumi.getter(name="bypassDefaultRule")
    def bypass_default_rule(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "bypass_default_rule")

    @bypass_default_rule.setter
    def bypass_default_rule(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bypass_default_rule", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LSSConfigControllerPolicyRuleResourceConditionArgs']]]]:
        """
        (Optional)
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LSSConfigControllerPolicyRuleResourceConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="customMsg")
    def custom_msg(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional)
        """
        return pulumi.get(self, "custom_msg")

    @custom_msg.setter
    def custom_msg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_msg", value)

    @property
    @pulumi.getter(name="defaultRule")
    def default_rule(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "default_rule")

    @default_rule.setter
    def default_rule(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default_rule", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional)
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        App Connector Group ID(s) where logs will be forwarded to.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="lssDefaultRule")
    def lss_default_rule(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "lss_default_rule")

    @lss_default_rule.setter
    def lss_default_rule(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "lss_default_rule", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) - Supported values are: `AND` or `OR`
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="policySetId")
    def policy_set_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy_set_id")

    @policy_set_id.setter
    def policy_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_set_id", value)

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy_type")

    @policy_type.setter
    def policy_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_type", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="reauthDefaultRule")
    def reauth_default_rule(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "reauth_default_rule")

    @reauth_default_rule.setter
    def reauth_default_rule(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "reauth_default_rule", value)

    @property
    @pulumi.getter(name="reauthIdleTimeout")
    def reauth_idle_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reauth_idle_timeout")

    @reauth_idle_timeout.setter
    def reauth_idle_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reauth_idle_timeout", value)

    @property
    @pulumi.getter(name="reauthTimeout")
    def reauth_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reauth_timeout")

    @reauth_timeout.setter
    def reauth_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reauth_timeout", value)

    @property
    @pulumi.getter(name="ruleOrder")
    def rule_order(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rule_order")

    @rule_order.setter
    def rule_order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_order", value)

    @property
    @pulumi.getter(name="zpnInspectionProfileId")
    def zpn_inspection_profile_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "zpn_inspection_profile_id")

    @zpn_inspection_profile_id.setter
    def zpn_inspection_profile_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zpn_inspection_profile_id", value)


@pulumi.input_type
class LSSConfigControllerPolicyRuleResourceConditionArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negated: Optional[pulumi.Input[bool]] = None,
                 operands: Optional[pulumi.Input[Sequence[pulumi.Input['LSSConfigControllerPolicyRuleResourceConditionOperandArgs']]]] = None):
        """
        :param pulumi.Input[str] operator: (Optional) - Supported values are: `AND` or `OR`
        :param pulumi.Input[bool] negated: (Optional)
        """
        pulumi.set(__self__, "operator", operator)
        if negated is not None:
            pulumi.set(__self__, "negated", negated)
        if operands is not None:
            pulumi.set(__self__, "operands", operands)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        (Optional) - Supported values are: `AND` or `OR`
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negated(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional)
        """
        return pulumi.get(self, "negated")

    @negated.setter
    def negated(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negated", value)

    @property
    @pulumi.getter
    def operands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LSSConfigControllerPolicyRuleResourceConditionOperandArgs']]]]:
        return pulumi.get(self, "operands")

    @operands.setter
    def operands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LSSConfigControllerPolicyRuleResourceConditionOperandArgs']]]]):
        pulumi.set(self, "operands", value)


@pulumi.input_type
class LSSConfigControllerPolicyRuleResourceConditionOperandArgs:
    def __init__(__self__, *,
                 object_type: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] object_type: (Optional) This is for specifying the policy critiera. Supported values: `APP`, `APP_GROUP`, `CLIENT_TYPE`, `TRUSTED_NETWORK`, `SAML`, `SCIM`, `SCIM_GROUP`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: (Optional) The below values are supported when choosing `object_type` of type `CLIENT_TYPE`.
        """
        pulumi.set(__self__, "object_type", object_type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> pulumi.Input[str]:
        """
        (Optional) This is for specifying the policy critiera. Supported values: `APP`, `APP_GROUP`, `CLIENT_TYPE`, `TRUSTED_NETWORK`, `SAML`, `SCIM`, `SCIM_GROUP`
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "object_type", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Optional) The below values are supported when choosing `object_type` of type `CLIENT_TYPE`.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetLSSConfigControllerConfigArgs:
    def __init__(__self__, *,
                 audit_message: str,
                 description: str,
                 enabled: bool,
                 filters: Sequence[str],
                 format: str,
                 id: str,
                 lss_host: str,
                 lss_port: str,
                 name: str,
                 source_log_type: str,
                 use_tls: bool):
        """
        :param str audit_message: (string)
        :param str description: (string)
        :param bool enabled: (bool)
        :param Sequence[str] filters: (string)
        :param str format: (string)
        :param str id: This field defines the name of the log streaming resource.
        :param str lss_host: (string)
        :param str lss_port: (string)
        :param str name: This field defines the name of the log streaming resource.
        :param str source_log_type: (string)
        """
        pulumi.set(__self__, "audit_message", audit_message)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lss_host", lss_host)
        pulumi.set(__self__, "lss_port", lss_port)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "source_log_type", source_log_type)
        pulumi.set(__self__, "use_tls", use_tls)

    @property
    @pulumi.getter(name="auditMessage")
    def audit_message(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "audit_message")

    @audit_message.setter
    def audit_message(self, value: str):
        pulumi.set(self, "audit_message", value)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: str):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        (bool)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: bool):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def filters(self) -> Sequence[str]:
        """
        (string)
        """
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Sequence[str]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter
    def format(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: str):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        This field defines the name of the log streaming resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="lssHost")
    def lss_host(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "lss_host")

    @lss_host.setter
    def lss_host(self, value: str):
        pulumi.set(self, "lss_host", value)

    @property
    @pulumi.getter(name="lssPort")
    def lss_port(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "lss_port")

    @lss_port.setter
    def lss_port(self, value: str):
        pulumi.set(self, "lss_port", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        This field defines the name of the log streaming resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sourceLogType")
    def source_log_type(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "source_log_type")

    @source_log_type.setter
    def source_log_type(self, value: str):
        pulumi.set(self, "source_log_type", value)

    @property
    @pulumi.getter(name="useTls")
    def use_tls(self) -> bool:
        return pulumi.get(self, "use_tls")

    @use_tls.setter
    def use_tls(self, value: bool):
        pulumi.set(self, "use_tls", value)


