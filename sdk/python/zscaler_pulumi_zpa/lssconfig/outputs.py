# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'LSSConfigControllerConfig',
    'LSSConfigControllerConnectorGroup',
    'LSSConfigControllerPolicyRuleResource',
    'LSSConfigControllerPolicyRuleResourceCondition',
    'LSSConfigControllerPolicyRuleResourceConditionOperand',
    'GetLSSConfigControllerConfigResult',
    'GetLSSConfigControllerConnectorGroupResult',
    'GetLSSConfigControllerPolicyRuleResult',
    'GetLSSConfigControllerPolicyRuleConditionResult',
    'GetLSSConfigControllerPolicyRuleConditionOperandResult',
]

@pulumi.output_type
class LSSConfigControllerConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lssHost":
            suggest = "lss_host"
        elif key == "lssPort":
            suggest = "lss_port"
        elif key == "sourceLogType":
            suggest = "source_log_type"
        elif key == "auditMessage":
            suggest = "audit_message"
        elif key == "useTls":
            suggest = "use_tls"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LSSConfigControllerConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LSSConfigControllerConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LSSConfigControllerConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 format: str,
                 lss_host: str,
                 lss_port: str,
                 name: str,
                 source_log_type: str,
                 audit_message: Optional[str] = None,
                 description: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 filters: Optional[Sequence[str]] = None,
                 id: Optional[str] = None,
                 use_tls: Optional[bool] = None):
        """
        :param str format: The format of the LSS resource. The supported formats are: `JSON`, `CSV`, and `TSV`
        :param str lss_host: The IP or FQDN of the SIEM (Log Receiver) where logs will be forwarded to.
        :param str lss_port: The destination port of the SIEM (Log Receiver) where logs will be forwarded to.
        :param str name: (Optional)
        :param str source_log_type: Refer to the log type documentation
        :param str audit_message: (Optional)
        :param str description: (Optional)
        :param bool enabled: (Optional)
        :param Sequence[str] filters: (Optional)
        :param str id: App Connector Group ID(s) where logs will be forwarded to.
        :param bool use_tls: (Optional)
        """
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "lss_host", lss_host)
        pulumi.set(__self__, "lss_port", lss_port)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "source_log_type", source_log_type)
        if audit_message is not None:
            pulumi.set(__self__, "audit_message", audit_message)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if use_tls is not None:
            pulumi.set(__self__, "use_tls", use_tls)

    @property
    @pulumi.getter
    def format(self) -> str:
        """
        The format of the LSS resource. The supported formats are: `JSON`, `CSV`, and `TSV`
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter(name="lssHost")
    def lss_host(self) -> str:
        """
        The IP or FQDN of the SIEM (Log Receiver) where logs will be forwarded to.
        """
        return pulumi.get(self, "lss_host")

    @property
    @pulumi.getter(name="lssPort")
    def lss_port(self) -> str:
        """
        The destination port of the SIEM (Log Receiver) where logs will be forwarded to.
        """
        return pulumi.get(self, "lss_port")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional)
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="sourceLogType")
    def source_log_type(self) -> str:
        """
        Refer to the log type documentation
        """
        return pulumi.get(self, "source_log_type")

    @property
    @pulumi.getter(name="auditMessage")
    def audit_message(self) -> Optional[str]:
        """
        (Optional)
        """
        return pulumi.get(self, "audit_message")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        (Optional)
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        (Optional)
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence[str]]:
        """
        (Optional)
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        App Connector Group ID(s) where logs will be forwarded to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="useTls")
    def use_tls(self) -> Optional[bool]:
        """
        (Optional)
        """
        return pulumi.get(self, "use_tls")


@pulumi.output_type
class LSSConfigControllerConnectorGroup(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] ids: App Connector Group ID(s) where logs will be forwarded to.
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        """
        App Connector Group ID(s) where logs will be forwarded to.
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class LSSConfigControllerPolicyRuleResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionId":
            suggest = "action_id"
        elif key == "bypassDefaultRule":
            suggest = "bypass_default_rule"
        elif key == "customMsg":
            suggest = "custom_msg"
        elif key == "defaultRule":
            suggest = "default_rule"
        elif key == "lssDefaultRule":
            suggest = "lss_default_rule"
        elif key == "policySetId":
            suggest = "policy_set_id"
        elif key == "policyType":
            suggest = "policy_type"
        elif key == "reauthDefaultRule":
            suggest = "reauth_default_rule"
        elif key == "reauthIdleTimeout":
            suggest = "reauth_idle_timeout"
        elif key == "reauthTimeout":
            suggest = "reauth_timeout"
        elif key == "ruleOrder":
            suggest = "rule_order"
        elif key == "zpnInspectionProfileId":
            suggest = "zpn_inspection_profile_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LSSConfigControllerPolicyRuleResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LSSConfigControllerPolicyRuleResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LSSConfigControllerPolicyRuleResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 action: Optional[str] = None,
                 action_id: Optional[str] = None,
                 bypass_default_rule: Optional[bool] = None,
                 conditions: Optional[Sequence['outputs.LSSConfigControllerPolicyRuleResourceCondition']] = None,
                 custom_msg: Optional[str] = None,
                 default_rule: Optional[bool] = None,
                 description: Optional[str] = None,
                 id: Optional[str] = None,
                 lss_default_rule: Optional[bool] = None,
                 operator: Optional[str] = None,
                 policy_set_id: Optional[str] = None,
                 policy_type: Optional[str] = None,
                 priority: Optional[str] = None,
                 reauth_default_rule: Optional[bool] = None,
                 reauth_idle_timeout: Optional[str] = None,
                 reauth_timeout: Optional[str] = None,
                 rule_order: Optional[str] = None,
                 zpn_inspection_profile_id: Optional[str] = None):
        """
        :param str name: (Optional)
        :param str action: (Optional)
        :param Sequence['LSSConfigControllerPolicyRuleResourceConditionArgs'] conditions: (Optional)
        :param str custom_msg: (Optional)
        :param str description: (Optional)
        :param str id: App Connector Group ID(s) where logs will be forwarded to.
        :param str operator: (Optional) - Supported values are: `AND` or `OR`
        """
        pulumi.set(__self__, "name", name)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if action_id is not None:
            pulumi.set(__self__, "action_id", action_id)
        if bypass_default_rule is not None:
            pulumi.set(__self__, "bypass_default_rule", bypass_default_rule)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if custom_msg is not None:
            pulumi.set(__self__, "custom_msg", custom_msg)
        if default_rule is not None:
            pulumi.set(__self__, "default_rule", default_rule)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lss_default_rule is not None:
            pulumi.set(__self__, "lss_default_rule", lss_default_rule)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if policy_set_id is not None:
            pulumi.set(__self__, "policy_set_id", policy_set_id)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if reauth_default_rule is not None:
            pulumi.set(__self__, "reauth_default_rule", reauth_default_rule)
        if reauth_idle_timeout is not None:
            pulumi.set(__self__, "reauth_idle_timeout", reauth_idle_timeout)
        if reauth_timeout is not None:
            pulumi.set(__self__, "reauth_timeout", reauth_timeout)
        if rule_order is not None:
            pulumi.set(__self__, "rule_order", rule_order)
        if zpn_inspection_profile_id is not None:
            pulumi.set(__self__, "zpn_inspection_profile_id", zpn_inspection_profile_id)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Optional)
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        (Optional)
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="actionId")
    def action_id(self) -> Optional[str]:
        return pulumi.get(self, "action_id")

    @property
    @pulumi.getter(name="bypassDefaultRule")
    def bypass_default_rule(self) -> Optional[bool]:
        return pulumi.get(self, "bypass_default_rule")

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.LSSConfigControllerPolicyRuleResourceCondition']]:
        """
        (Optional)
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="customMsg")
    def custom_msg(self) -> Optional[str]:
        """
        (Optional)
        """
        return pulumi.get(self, "custom_msg")

    @property
    @pulumi.getter(name="defaultRule")
    def default_rule(self) -> Optional[bool]:
        return pulumi.get(self, "default_rule")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        (Optional)
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        App Connector Group ID(s) where logs will be forwarded to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lssDefaultRule")
    def lss_default_rule(self) -> Optional[bool]:
        return pulumi.get(self, "lss_default_rule")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        (Optional) - Supported values are: `AND` or `OR`
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="policySetId")
    def policy_set_id(self) -> Optional[str]:
        return pulumi.get(self, "policy_set_id")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[str]:
        return pulumi.get(self, "policy_type")

    @property
    @pulumi.getter
    def priority(self) -> Optional[str]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="reauthDefaultRule")
    def reauth_default_rule(self) -> Optional[bool]:
        return pulumi.get(self, "reauth_default_rule")

    @property
    @pulumi.getter(name="reauthIdleTimeout")
    def reauth_idle_timeout(self) -> Optional[str]:
        return pulumi.get(self, "reauth_idle_timeout")

    @property
    @pulumi.getter(name="reauthTimeout")
    def reauth_timeout(self) -> Optional[str]:
        return pulumi.get(self, "reauth_timeout")

    @property
    @pulumi.getter(name="ruleOrder")
    def rule_order(self) -> Optional[str]:
        return pulumi.get(self, "rule_order")

    @property
    @pulumi.getter(name="zpnInspectionProfileId")
    def zpn_inspection_profile_id(self) -> Optional[str]:
        return pulumi.get(self, "zpn_inspection_profile_id")


@pulumi.output_type
class LSSConfigControllerPolicyRuleResourceCondition(dict):
    def __init__(__self__, *,
                 operator: str,
                 negated: Optional[bool] = None,
                 operands: Optional[Sequence['outputs.LSSConfigControllerPolicyRuleResourceConditionOperand']] = None):
        """
        :param str operator: (Optional) - Supported values are: `AND` or `OR`
        :param bool negated: (Optional)
        """
        pulumi.set(__self__, "operator", operator)
        if negated is not None:
            pulumi.set(__self__, "negated", negated)
        if operands is not None:
            pulumi.set(__self__, "operands", operands)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        (Optional) - Supported values are: `AND` or `OR`
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def negated(self) -> Optional[bool]:
        """
        (Optional)
        """
        return pulumi.get(self, "negated")

    @property
    @pulumi.getter
    def operands(self) -> Optional[Sequence['outputs.LSSConfigControllerPolicyRuleResourceConditionOperand']]:
        return pulumi.get(self, "operands")


@pulumi.output_type
class LSSConfigControllerPolicyRuleResourceConditionOperand(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectType":
            suggest = "object_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LSSConfigControllerPolicyRuleResourceConditionOperand. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LSSConfigControllerPolicyRuleResourceConditionOperand.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LSSConfigControllerPolicyRuleResourceConditionOperand.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 object_type: str,
                 values: Optional[Sequence[str]] = None):
        """
        :param str object_type: (Optional) This is for specifying the policy critiera. Supported values: `APP`, `APP_GROUP`, `CLIENT_TYPE`, `TRUSTED_NETWORK`, `SAML`, `SCIM`, `SCIM_GROUP`
        :param Sequence[str] values: (Optional) The below values are supported when choosing `object_type` of type `CLIENT_TYPE`.
        """
        pulumi.set(__self__, "object_type", object_type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> str:
        """
        (Optional) This is for specifying the policy critiera. Supported values: `APP`, `APP_GROUP`, `CLIENT_TYPE`, `TRUSTED_NETWORK`, `SAML`, `SCIM`, `SCIM_GROUP`
        """
        return pulumi.get(self, "object_type")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        (Optional) The below values are supported when choosing `object_type` of type `CLIENT_TYPE`.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetLSSConfigControllerConfigResult(dict):
    def __init__(__self__, *,
                 audit_message: str,
                 description: str,
                 enabled: bool,
                 filters: Sequence[str],
                 format: str,
                 id: str,
                 lss_host: str,
                 lss_port: str,
                 name: str,
                 source_log_type: str,
                 use_tls: bool):
        """
        :param str audit_message: (string)
        :param str description: (string)
        :param bool enabled: (bool)
        :param Sequence[str] filters: (string)
        :param str format: (string)
        :param str id: This field defines the name of the log streaming resource.
        :param str lss_host: (string)
        :param str lss_port: (string)
        :param str name: This field defines the name of the log streaming resource.
        :param str source_log_type: (string)
        """
        pulumi.set(__self__, "audit_message", audit_message)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lss_host", lss_host)
        pulumi.set(__self__, "lss_port", lss_port)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "source_log_type", source_log_type)
        pulumi.set(__self__, "use_tls", use_tls)

    @property
    @pulumi.getter(name="auditMessage")
    def audit_message(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "audit_message")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        (bool)
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def filters(self) -> Sequence[str]:
        """
        (string)
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def format(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        This field defines the name of the log streaming resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lssHost")
    def lss_host(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "lss_host")

    @property
    @pulumi.getter(name="lssPort")
    def lss_port(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "lss_port")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        This field defines the name of the log streaming resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="sourceLogType")
    def source_log_type(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "source_log_type")

    @property
    @pulumi.getter(name="useTls")
    def use_tls(self) -> bool:
        return pulumi.get(self, "use_tls")


@pulumi.output_type
class GetLSSConfigControllerConnectorGroupResult(dict):
    def __init__(__self__, *,
                 id: str):
        """
        :param str id: This field defines the name of the log streaming resource.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        This field defines the name of the log streaming resource.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetLSSConfigControllerPolicyRuleResult(dict):
    def __init__(__self__, *,
                 action: str,
                 action_id: str,
                 bypass_default_rule: bool,
                 conditions: Sequence['outputs.GetLSSConfigControllerPolicyRuleConditionResult'],
                 creation_time: str,
                 custom_msg: str,
                 default_rule: bool,
                 description: str,
                 id: str,
                 isolation_default_rule: bool,
                 lss_default_rule: bool,
                 modified_time: str,
                 modifiedby: str,
                 name: str,
                 operator: str,
                 policy_set_id: str,
                 policy_type: str,
                 priority: str,
                 reauth_default_rule: bool,
                 reauth_idle_timeout: str,
                 reauth_timeout: str,
                 rule_order: str,
                 zpn_cbi_profile_id: str,
                 zpn_inspection_profile_id: str,
                 zpn_inspection_profile_name: str):
        """
        :param str creation_time: (string)
        :param str description: (string)
        :param str id: This field defines the name of the log streaming resource.
        :param str modified_time: (string)
        :param str name: This field defines the name of the log streaming resource.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "action_id", action_id)
        pulumi.set(__self__, "bypass_default_rule", bypass_default_rule)
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "custom_msg", custom_msg)
        pulumi.set(__self__, "default_rule", default_rule)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "isolation_default_rule", isolation_default_rule)
        pulumi.set(__self__, "lss_default_rule", lss_default_rule)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "modifiedby", modifiedby)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "policy_set_id", policy_set_id)
        pulumi.set(__self__, "policy_type", policy_type)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "reauth_default_rule", reauth_default_rule)
        pulumi.set(__self__, "reauth_idle_timeout", reauth_idle_timeout)
        pulumi.set(__self__, "reauth_timeout", reauth_timeout)
        pulumi.set(__self__, "rule_order", rule_order)
        pulumi.set(__self__, "zpn_cbi_profile_id", zpn_cbi_profile_id)
        pulumi.set(__self__, "zpn_inspection_profile_id", zpn_inspection_profile_id)
        pulumi.set(__self__, "zpn_inspection_profile_name", zpn_inspection_profile_name)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="actionId")
    def action_id(self) -> str:
        return pulumi.get(self, "action_id")

    @property
    @pulumi.getter(name="bypassDefaultRule")
    def bypass_default_rule(self) -> bool:
        return pulumi.get(self, "bypass_default_rule")

    @property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.GetLSSConfigControllerPolicyRuleConditionResult']:
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="customMsg")
    def custom_msg(self) -> str:
        return pulumi.get(self, "custom_msg")

    @property
    @pulumi.getter(name="defaultRule")
    def default_rule(self) -> bool:
        return pulumi.get(self, "default_rule")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        This field defines the name of the log streaming resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isolationDefaultRule")
    def isolation_default_rule(self) -> bool:
        return pulumi.get(self, "isolation_default_rule")

    @property
    @pulumi.getter(name="lssDefaultRule")
    def lss_default_rule(self) -> bool:
        return pulumi.get(self, "lss_default_rule")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def modifiedby(self) -> str:
        return pulumi.get(self, "modifiedby")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        This field defines the name of the log streaming resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="policySetId")
    def policy_set_id(self) -> str:
        return pulumi.get(self, "policy_set_id")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> str:
        return pulumi.get(self, "policy_type")

    @property
    @pulumi.getter
    def priority(self) -> str:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="reauthDefaultRule")
    def reauth_default_rule(self) -> bool:
        return pulumi.get(self, "reauth_default_rule")

    @property
    @pulumi.getter(name="reauthIdleTimeout")
    def reauth_idle_timeout(self) -> str:
        return pulumi.get(self, "reauth_idle_timeout")

    @property
    @pulumi.getter(name="reauthTimeout")
    def reauth_timeout(self) -> str:
        return pulumi.get(self, "reauth_timeout")

    @property
    @pulumi.getter(name="ruleOrder")
    def rule_order(self) -> str:
        return pulumi.get(self, "rule_order")

    @property
    @pulumi.getter(name="zpnCbiProfileId")
    def zpn_cbi_profile_id(self) -> str:
        return pulumi.get(self, "zpn_cbi_profile_id")

    @property
    @pulumi.getter(name="zpnInspectionProfileId")
    def zpn_inspection_profile_id(self) -> str:
        return pulumi.get(self, "zpn_inspection_profile_id")

    @property
    @pulumi.getter(name="zpnInspectionProfileName")
    def zpn_inspection_profile_name(self) -> str:
        return pulumi.get(self, "zpn_inspection_profile_name")


@pulumi.output_type
class GetLSSConfigControllerPolicyRuleConditionResult(dict):
    def __init__(__self__, *,
                 creation_time: str,
                 id: str,
                 modified_time: str,
                 modifiedby: str,
                 negated: bool,
                 operands: Sequence['outputs.GetLSSConfigControllerPolicyRuleConditionOperandResult'],
                 operator: str):
        """
        :param str creation_time: (string)
        :param str id: This field defines the name of the log streaming resource.
        :param str modified_time: (string)
        """
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "modifiedby", modifiedby)
        pulumi.set(__self__, "negated", negated)
        pulumi.set(__self__, "operands", operands)
        pulumi.set(__self__, "operator", operator)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        This field defines the name of the log streaming resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def modifiedby(self) -> str:
        return pulumi.get(self, "modifiedby")

    @property
    @pulumi.getter
    def negated(self) -> bool:
        return pulumi.get(self, "negated")

    @property
    @pulumi.getter
    def operands(self) -> Sequence['outputs.GetLSSConfigControllerPolicyRuleConditionOperandResult']:
        return pulumi.get(self, "operands")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")


@pulumi.output_type
class GetLSSConfigControllerPolicyRuleConditionOperandResult(dict):
    def __init__(__self__, *,
                 creation_time: str,
                 id: str,
                 idp_id: str,
                 lhs: str,
                 modified_time: str,
                 modifiedby: str,
                 name: str,
                 object_type: str,
                 operator: str,
                 rhs: str):
        """
        :param str creation_time: (string)
        :param str id: This field defines the name of the log streaming resource.
        :param str modified_time: (string)
        :param str name: This field defines the name of the log streaming resource.
        """
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "idp_id", idp_id)
        pulumi.set(__self__, "lhs", lhs)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "modifiedby", modifiedby)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "object_type", object_type)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "rhs", rhs)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        This field defines the name of the log streaming resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idpId")
    def idp_id(self) -> str:
        return pulumi.get(self, "idp_id")

    @property
    @pulumi.getter
    def lhs(self) -> str:
        return pulumi.get(self, "lhs")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def modifiedby(self) -> str:
        return pulumi.get(self, "modifiedby")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        This field defines the name of the log streaming resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> str:
        return pulumi.get(self, "object_type")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def rhs(self) -> str:
        return pulumi.get(self, "rhs")


