# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ApplicationSegmentBrowserAccessClientlessAppArgs',
    'ApplicationSegmentBrowserAccessServerGroupArgs',
    'ApplicationSegmentInspectionCommonAppsDtoArgs',
    'ApplicationSegmentInspectionCommonAppsDtoAppsConfigArgs',
    'ApplicationSegmentInspectionServerGroupArgs',
    'ApplicationSegmentPRACommonAppsDtoArgs',
    'ApplicationSegmentPRACommonAppsDtoAppsConfigArgs',
    'ApplicationSegmentPRAServerGroupArgs',
    'ApplicationSegmentServerGroupArgs',
    'BrowserAccessClientlessAppArgs',
    'BrowserAccessServerGroupArgs',
    'GetApplicationSegmentBrowserAccessTcpPortRangeArgs',
    'GetApplicationSegmentBrowserAccessUdpPortRangeArgs',
    'GetApplicationSegmentInspectionTcpPortRangeArgs',
    'GetApplicationSegmentInspectionUdpPortRangeArgs',
    'GetApplicationSegmentPRATcpPortRangeArgs',
    'GetApplicationSegmentPRAUdpPortRangeArgs',
    'GetApplicationSegmentTcpPortRangeArgs',
    'GetApplicationSegmentUdpPortRangeArgs',
]

@pulumi.input_type
class ApplicationSegmentBrowserAccessClientlessAppArgs:
    def __init__(__self__, *,
                 application_port: pulumi.Input[str],
                 application_protocol: pulumi.Input[str],
                 certificate_id: pulumi.Input[str],
                 name: pulumi.Input[str],
                 allow_options: Optional[pulumi.Input[bool]] = None,
                 cname: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 hidden: Optional[pulumi.Input[bool]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 local_domain: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 trust_untrusted_cert: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] application_port: Port for the BA app.
        :param pulumi.Input[str] application_protocol: Protocol for the BA app. Supported values: `HTTP` and `HTTPS`
        :param pulumi.Input[str] name: Name of the application.
        :param pulumi.Input[bool] allow_options: If you want ZPA to forward unauthenticated HTTP preflight OPTIONS requests from the browser to the app.. Supported values: `true` and `false`
        :param pulumi.Input[str] cname: (Optional)
        :param pulumi.Input[str] description: (Optional) Description of the application.
        :param pulumi.Input[str] domain: Domain name or IP address of the BA app.
        :param pulumi.Input[bool] enabled: (Optional) - Whether this app is enabled or not.
        :param pulumi.Input[bool] hidden: (Optional)
        :param pulumi.Input[str] local_domain: (Optional)
        :param pulumi.Input[str] path: (Optional)
        :param pulumi.Input[bool] trust_untrusted_cert: (Optional)
        """
        pulumi.set(__self__, "application_port", application_port)
        pulumi.set(__self__, "application_protocol", application_protocol)
        pulumi.set(__self__, "certificate_id", certificate_id)
        pulumi.set(__self__, "name", name)
        if allow_options is not None:
            pulumi.set(__self__, "allow_options", allow_options)
        if cname is not None:
            pulumi.set(__self__, "cname", cname)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if local_domain is not None:
            pulumi.set(__self__, "local_domain", local_domain)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if trust_untrusted_cert is not None:
            pulumi.set(__self__, "trust_untrusted_cert", trust_untrusted_cert)

    @property
    @pulumi.getter(name="applicationPort")
    def application_port(self) -> pulumi.Input[str]:
        """
        Port for the BA app.
        """
        return pulumi.get(self, "application_port")

    @application_port.setter
    def application_port(self, value: pulumi.Input[str]):
        pulumi.set(self, "application_port", value)

    @property
    @pulumi.getter(name="applicationProtocol")
    def application_protocol(self) -> pulumi.Input[str]:
        """
        Protocol for the BA app. Supported values: `HTTP` and `HTTPS`
        """
        return pulumi.get(self, "application_protocol")

    @application_protocol.setter
    def application_protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "application_protocol", value)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "certificate_id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the application.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="allowOptions")
    def allow_options(self) -> Optional[pulumi.Input[bool]]:
        """
        If you want ZPA to forward unauthenticated HTTP preflight OPTIONS requests from the browser to the app.. Supported values: `true` and `false`
        """
        return pulumi.get(self, "allow_options")

    @allow_options.setter
    def allow_options(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_options", value)

    @property
    @pulumi.getter
    def cname(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional)
        """
        return pulumi.get(self, "cname")

    @cname.setter
    def cname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cname", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Description of the application.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name or IP address of the BA app.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) - Whether this app is enabled or not.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def hidden(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional)
        """
        return pulumi.get(self, "hidden")

    @hidden.setter
    def hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hidden", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="localDomain")
    def local_domain(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional)
        """
        return pulumi.get(self, "local_domain")

    @local_domain.setter
    def local_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_domain", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional)
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="trustUntrustedCert")
    def trust_untrusted_cert(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional)
        """
        return pulumi.get(self, "trust_untrusted_cert")

    @trust_untrusted_cert.setter
    def trust_untrusted_cert(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "trust_untrusted_cert", value)


@pulumi.input_type
class ApplicationSegmentBrowserAccessServerGroupArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class ApplicationSegmentInspectionCommonAppsDtoArgs:
    def __init__(__self__, *,
                 apps_configs: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSegmentInspectionCommonAppsDtoAppsConfigArgs']]]] = None):
        if apps_configs is not None:
            pulumi.set(__self__, "apps_configs", apps_configs)

    @property
    @pulumi.getter(name="appsConfigs")
    def apps_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSegmentInspectionCommonAppsDtoAppsConfigArgs']]]]:
        return pulumi.get(self, "apps_configs")

    @apps_configs.setter
    def apps_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSegmentInspectionCommonAppsDtoAppsConfigArgs']]]]):
        pulumi.set(self, "apps_configs", value)


@pulumi.input_type
class ApplicationSegmentInspectionCommonAppsDtoAppsConfigArgs:
    def __init__(__self__, *,
                 allow_options: Optional[pulumi.Input[bool]] = None,
                 app_id: Optional[pulumi.Input[str]] = None,
                 app_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 application_port: Optional[pulumi.Input[str]] = None,
                 application_protocol: Optional[pulumi.Input[str]] = None,
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 certificate_name: Optional[pulumi.Input[str]] = None,
                 cname: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 hidden: Optional[pulumi.Input[bool]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 local_domain: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 portal: Optional[pulumi.Input[bool]] = None,
                 trust_untrusted_cert: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] app_types: Indicates the type of application as inspection. Supported value: `INSPECT`
        :param pulumi.Input[str] application_port: Port for the Inspection Application Segment.
        :param pulumi.Input[str] application_protocol: Protocol for the Inspection Application Segment.. Supported values: `HTTP` and `HTTPS`
        :param pulumi.Input[str] certificate_id: ID of the signing certificate. This field is required if the applicationProtocol is set to `HTTPS`. The certificateId is not supported if the applicationProtocol is set to `HTTP`.
        :param pulumi.Input[str] description: (Optional) Description of the application.
        :param pulumi.Input[str] domain: Domain name of the Inspection Application Segment.
        :param pulumi.Input[bool] enabled: Whether this application is enabled or not
        :param pulumi.Input[str] name: Name of the Inspection Application Segment.
        """
        if allow_options is not None:
            pulumi.set(__self__, "allow_options", allow_options)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if app_types is not None:
            pulumi.set(__self__, "app_types", app_types)
        if application_port is not None:
            pulumi.set(__self__, "application_port", application_port)
        if application_protocol is not None:
            pulumi.set(__self__, "application_protocol", application_protocol)
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if certificate_name is not None:
            pulumi.set(__self__, "certificate_name", certificate_name)
        if cname is not None:
            pulumi.set(__self__, "cname", cname)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if local_domain is not None:
            pulumi.set(__self__, "local_domain", local_domain)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if portal is not None:
            pulumi.set(__self__, "portal", portal)
        if trust_untrusted_cert is not None:
            pulumi.set(__self__, "trust_untrusted_cert", trust_untrusted_cert)

    @property
    @pulumi.getter(name="allowOptions")
    def allow_options(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_options")

    @allow_options.setter
    def allow_options(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_options", value)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter(name="appTypes")
    def app_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Indicates the type of application as inspection. Supported value: `INSPECT`
        """
        return pulumi.get(self, "app_types")

    @app_types.setter
    def app_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "app_types", value)

    @property
    @pulumi.getter(name="applicationPort")
    def application_port(self) -> Optional[pulumi.Input[str]]:
        """
        Port for the Inspection Application Segment.
        """
        return pulumi.get(self, "application_port")

    @application_port.setter
    def application_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_port", value)

    @property
    @pulumi.getter(name="applicationProtocol")
    def application_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol for the Inspection Application Segment.. Supported values: `HTTP` and `HTTPS`
        """
        return pulumi.get(self, "application_protocol")

    @application_protocol.setter
    def application_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_protocol", value)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the signing certificate. This field is required if the applicationProtocol is set to `HTTPS`. The certificateId is not supported if the applicationProtocol is set to `HTTP`.
        """
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_id", value)

    @property
    @pulumi.getter(name="certificateName")
    def certificate_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_name")

    @certificate_name.setter
    def certificate_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_name", value)

    @property
    @pulumi.getter
    def cname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cname")

    @cname.setter
    def cname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cname", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Description of the application.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name of the Inspection Application Segment.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this application is enabled or not
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def hidden(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "hidden")

    @hidden.setter
    def hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hidden", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="localDomain")
    def local_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_domain")

    @local_domain.setter
    def local_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_domain", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Inspection Application Segment.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def portal(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "portal")

    @portal.setter
    def portal(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "portal", value)

    @property
    @pulumi.getter(name="trustUntrustedCert")
    def trust_untrusted_cert(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "trust_untrusted_cert")

    @trust_untrusted_cert.setter
    def trust_untrusted_cert(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "trust_untrusted_cert", value)


@pulumi.input_type
class ApplicationSegmentInspectionServerGroupArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class ApplicationSegmentPRACommonAppsDtoArgs:
    def __init__(__self__, *,
                 apps_configs: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSegmentPRACommonAppsDtoAppsConfigArgs']]]] = None):
        if apps_configs is not None:
            pulumi.set(__self__, "apps_configs", apps_configs)

    @property
    @pulumi.getter(name="appsConfigs")
    def apps_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSegmentPRACommonAppsDtoAppsConfigArgs']]]]:
        return pulumi.get(self, "apps_configs")

    @apps_configs.setter
    def apps_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSegmentPRACommonAppsDtoAppsConfigArgs']]]]):
        pulumi.set(self, "apps_configs", value)


@pulumi.input_type
class ApplicationSegmentPRACommonAppsDtoAppsConfigArgs:
    def __init__(__self__, *,
                 allow_options: Optional[pulumi.Input[bool]] = None,
                 app_id: Optional[pulumi.Input[str]] = None,
                 app_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 application_port: Optional[pulumi.Input[str]] = None,
                 application_protocol: Optional[pulumi.Input[str]] = None,
                 cname: Optional[pulumi.Input[str]] = None,
                 connection_security: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 hidden: Optional[pulumi.Input[bool]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 local_domain: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 portal: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] app_types: Indicates the type of application as Privileged Remote Access. Supported value: `SECURE_REMOTE_ACCESS`
        :param pulumi.Input[str] application_port: Port for the Privileged Remote Access
        :param pulumi.Input[str] application_protocol: Protocol for the Privileged Remote Access. Supported values: `RDP` and `SSH`
        :param pulumi.Input[str] connection_security: Parameter required when `application_protocol` is of type `RDP`
        :param pulumi.Input[str] description: (Optional) Description of the application.
        :param pulumi.Input[str] domain: Domain name of the Privileged Remote Access
        :param pulumi.Input[bool] enabled: Whether this application is enabled or not
        :param pulumi.Input[str] name: Name of the Privileged Remote Access
        """
        if allow_options is not None:
            pulumi.set(__self__, "allow_options", allow_options)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if app_types is not None:
            pulumi.set(__self__, "app_types", app_types)
        if application_port is not None:
            pulumi.set(__self__, "application_port", application_port)
        if application_protocol is not None:
            pulumi.set(__self__, "application_protocol", application_protocol)
        if cname is not None:
            pulumi.set(__self__, "cname", cname)
        if connection_security is not None:
            pulumi.set(__self__, "connection_security", connection_security)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if local_domain is not None:
            pulumi.set(__self__, "local_domain", local_domain)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if portal is not None:
            pulumi.set(__self__, "portal", portal)

    @property
    @pulumi.getter(name="allowOptions")
    def allow_options(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_options")

    @allow_options.setter
    def allow_options(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_options", value)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter(name="appTypes")
    def app_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Indicates the type of application as Privileged Remote Access. Supported value: `SECURE_REMOTE_ACCESS`
        """
        return pulumi.get(self, "app_types")

    @app_types.setter
    def app_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "app_types", value)

    @property
    @pulumi.getter(name="applicationPort")
    def application_port(self) -> Optional[pulumi.Input[str]]:
        """
        Port for the Privileged Remote Access
        """
        return pulumi.get(self, "application_port")

    @application_port.setter
    def application_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_port", value)

    @property
    @pulumi.getter(name="applicationProtocol")
    def application_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol for the Privileged Remote Access. Supported values: `RDP` and `SSH`
        """
        return pulumi.get(self, "application_protocol")

    @application_protocol.setter
    def application_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_protocol", value)

    @property
    @pulumi.getter
    def cname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cname")

    @cname.setter
    def cname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cname", value)

    @property
    @pulumi.getter(name="connectionSecurity")
    def connection_security(self) -> Optional[pulumi.Input[str]]:
        """
        Parameter required when `application_protocol` is of type `RDP`
        """
        return pulumi.get(self, "connection_security")

    @connection_security.setter
    def connection_security(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_security", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Description of the application.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name of the Privileged Remote Access
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this application is enabled or not
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def hidden(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "hidden")

    @hidden.setter
    def hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hidden", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="localDomain")
    def local_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_domain")

    @local_domain.setter
    def local_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_domain", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Privileged Remote Access
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def portal(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "portal")

    @portal.setter
    def portal(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "portal", value)


@pulumi.input_type
class ApplicationSegmentPRAServerGroupArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class ApplicationSegmentServerGroupArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class BrowserAccessClientlessAppArgs:
    def __init__(__self__, *,
                 application_port: pulumi.Input[str],
                 application_protocol: pulumi.Input[str],
                 certificate_id: pulumi.Input[str],
                 name: pulumi.Input[str],
                 allow_options: Optional[pulumi.Input[bool]] = None,
                 cname: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 hidden: Optional[pulumi.Input[bool]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 local_domain: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 trust_untrusted_cert: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "application_port", application_port)
        pulumi.set(__self__, "application_protocol", application_protocol)
        pulumi.set(__self__, "certificate_id", certificate_id)
        pulumi.set(__self__, "name", name)
        if allow_options is not None:
            pulumi.set(__self__, "allow_options", allow_options)
        if cname is not None:
            pulumi.set(__self__, "cname", cname)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if local_domain is not None:
            pulumi.set(__self__, "local_domain", local_domain)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if trust_untrusted_cert is not None:
            pulumi.set(__self__, "trust_untrusted_cert", trust_untrusted_cert)

    @property
    @pulumi.getter(name="applicationPort")
    def application_port(self) -> pulumi.Input[str]:
        return pulumi.get(self, "application_port")

    @application_port.setter
    def application_port(self, value: pulumi.Input[str]):
        pulumi.set(self, "application_port", value)

    @property
    @pulumi.getter(name="applicationProtocol")
    def application_protocol(self) -> pulumi.Input[str]:
        return pulumi.get(self, "application_protocol")

    @application_protocol.setter
    def application_protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "application_protocol", value)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "certificate_id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="allowOptions")
    def allow_options(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_options")

    @allow_options.setter
    def allow_options(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_options", value)

    @property
    @pulumi.getter
    def cname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cname")

    @cname.setter
    def cname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cname", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def hidden(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "hidden")

    @hidden.setter
    def hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hidden", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="localDomain")
    def local_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_domain")

    @local_domain.setter
    def local_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_domain", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="trustUntrustedCert")
    def trust_untrusted_cert(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "trust_untrusted_cert")

    @trust_untrusted_cert.setter
    def trust_untrusted_cert(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "trust_untrusted_cert", value)


@pulumi.input_type
class BrowserAccessServerGroupArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class GetApplicationSegmentBrowserAccessTcpPortRangeArgs:
    def __init__(__self__, *,
                 from_: Optional[str] = None,
                 to: Optional[str] = None):
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[str]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> Optional[str]:
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: Optional[str]):
        pulumi.set(self, "to", value)


@pulumi.input_type
class GetApplicationSegmentBrowserAccessUdpPortRangeArgs:
    def __init__(__self__, *,
                 from_: Optional[str] = None,
                 to: Optional[str] = None):
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[str]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> Optional[str]:
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: Optional[str]):
        pulumi.set(self, "to", value)


@pulumi.input_type
class GetApplicationSegmentInspectionTcpPortRangeArgs:
    def __init__(__self__, *,
                 from_: Optional[str] = None,
                 to: Optional[str] = None):
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[str]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> Optional[str]:
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: Optional[str]):
        pulumi.set(self, "to", value)


@pulumi.input_type
class GetApplicationSegmentInspectionUdpPortRangeArgs:
    def __init__(__self__, *,
                 from_: Optional[str] = None,
                 to: Optional[str] = None):
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[str]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> Optional[str]:
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: Optional[str]):
        pulumi.set(self, "to", value)


@pulumi.input_type
class GetApplicationSegmentPRATcpPortRangeArgs:
    def __init__(__self__, *,
                 from_: Optional[str] = None,
                 to: Optional[str] = None):
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[str]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> Optional[str]:
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: Optional[str]):
        pulumi.set(self, "to", value)


@pulumi.input_type
class GetApplicationSegmentPRAUdpPortRangeArgs:
    def __init__(__self__, *,
                 from_: Optional[str] = None,
                 to: Optional[str] = None):
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[str]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> Optional[str]:
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: Optional[str]):
        pulumi.set(self, "to", value)


@pulumi.input_type
class GetApplicationSegmentTcpPortRangeArgs:
    def __init__(__self__, *,
                 from_: Optional[str] = None,
                 to: Optional[str] = None):
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[str]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> Optional[str]:
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: Optional[str]):
        pulumi.set(self, "to", value)


@pulumi.input_type
class GetApplicationSegmentUdpPortRangeArgs:
    def __init__(__self__, *,
                 from_: Optional[str] = None,
                 to: Optional[str] = None):
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[str]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> Optional[str]:
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: Optional[str]):
        pulumi.set(self, "to", value)


