# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ApplicationSegmentBrowserAccessClientlessApp',
    'ApplicationSegmentBrowserAccessServerGroup',
    'ApplicationSegmentInspectionCommonAppsDto',
    'ApplicationSegmentInspectionCommonAppsDtoAppsConfig',
    'ApplicationSegmentInspectionServerGroup',
    'ApplicationSegmentPRACommonAppsDto',
    'ApplicationSegmentPRACommonAppsDtoAppsConfig',
    'ApplicationSegmentPRAServerGroup',
    'ApplicationSegmentServerGroup',
    'BrowserAccessClientlessApp',
    'BrowserAccessServerGroup',
    'GetApplicationSegmentBrowserAccessClientlessAppResult',
    'GetApplicationSegmentBrowserAccessServerGroupResult',
    'GetApplicationSegmentInspectionInspectionAppResult',
    'GetApplicationSegmentInspectionServerGroupResult',
    'GetApplicationSegmentPRAServerGroupResult',
    'GetApplicationSegmentPRASraAppResult',
    'GetApplicationSegmentServerGroupResult',
]

@pulumi.output_type
class ApplicationSegmentBrowserAccessClientlessApp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationPort":
            suggest = "application_port"
        elif key == "applicationProtocol":
            suggest = "application_protocol"
        elif key == "certificateId":
            suggest = "certificate_id"
        elif key == "allowOptions":
            suggest = "allow_options"
        elif key == "localDomain":
            suggest = "local_domain"
        elif key == "trustUntrustedCert":
            suggest = "trust_untrusted_cert"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSegmentBrowserAccessClientlessApp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSegmentBrowserAccessClientlessApp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSegmentBrowserAccessClientlessApp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 application_port: str,
                 application_protocol: str,
                 certificate_id: str,
                 name: str,
                 allow_options: Optional[bool] = None,
                 cname: Optional[str] = None,
                 description: Optional[str] = None,
                 domain: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 hidden: Optional[bool] = None,
                 id: Optional[str] = None,
                 local_domain: Optional[str] = None,
                 path: Optional[str] = None,
                 trust_untrusted_cert: Optional[bool] = None):
        """
        :param str application_port: Port for the BA app.
        :param str application_protocol: Protocol for the BA app. Supported values: `HTTP` and `HTTPS`
        :param str name: Name of the application.
        :param bool allow_options: If you want ZPA to forward unauthenticated HTTP preflight OPTIONS requests from the browser to the app.. Supported values: `true` and `false`
        :param str cname: (Optional)
        :param str description: (Optional) Description of the application.
        :param str domain: Domain name or IP address of the BA app.
        :param bool enabled: (Optional) - Whether this app is enabled or not.
        :param bool hidden: (Optional)
        :param str local_domain: (Optional)
        :param str path: (Optional)
        :param bool trust_untrusted_cert: (Optional)
        """
        pulumi.set(__self__, "application_port", application_port)
        pulumi.set(__self__, "application_protocol", application_protocol)
        pulumi.set(__self__, "certificate_id", certificate_id)
        pulumi.set(__self__, "name", name)
        if allow_options is not None:
            pulumi.set(__self__, "allow_options", allow_options)
        if cname is not None:
            pulumi.set(__self__, "cname", cname)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if local_domain is not None:
            pulumi.set(__self__, "local_domain", local_domain)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if trust_untrusted_cert is not None:
            pulumi.set(__self__, "trust_untrusted_cert", trust_untrusted_cert)

    @property
    @pulumi.getter(name="applicationPort")
    def application_port(self) -> str:
        """
        Port for the BA app.
        """
        return pulumi.get(self, "application_port")

    @property
    @pulumi.getter(name="applicationProtocol")
    def application_protocol(self) -> str:
        """
        Protocol for the BA app. Supported values: `HTTP` and `HTTPS`
        """
        return pulumi.get(self, "application_protocol")

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> str:
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the application.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="allowOptions")
    def allow_options(self) -> Optional[bool]:
        """
        If you want ZPA to forward unauthenticated HTTP preflight OPTIONS requests from the browser to the app.. Supported values: `true` and `false`
        """
        return pulumi.get(self, "allow_options")

    @property
    @pulumi.getter
    def cname(self) -> Optional[str]:
        """
        (Optional)
        """
        return pulumi.get(self, "cname")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        (Optional) Description of the application.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        """
        Domain name or IP address of the BA app.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        (Optional) - Whether this app is enabled or not.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def hidden(self) -> Optional[bool]:
        """
        (Optional)
        """
        return pulumi.get(self, "hidden")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="localDomain")
    def local_domain(self) -> Optional[str]:
        """
        (Optional)
        """
        return pulumi.get(self, "local_domain")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        (Optional)
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="trustUntrustedCert")
    def trust_untrusted_cert(self) -> Optional[bool]:
        """
        (Optional)
        """
        return pulumi.get(self, "trust_untrusted_cert")


@pulumi.output_type
class ApplicationSegmentBrowserAccessServerGroup(dict):
    def __init__(__self__, *,
                 ids: Sequence[str]):
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[str]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class ApplicationSegmentInspectionCommonAppsDto(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appsConfigs":
            suggest = "apps_configs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSegmentInspectionCommonAppsDto. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSegmentInspectionCommonAppsDto.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSegmentInspectionCommonAppsDto.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apps_configs: Optional[Sequence['outputs.ApplicationSegmentInspectionCommonAppsDtoAppsConfig']] = None):
        if apps_configs is not None:
            pulumi.set(__self__, "apps_configs", apps_configs)

    @property
    @pulumi.getter(name="appsConfigs")
    def apps_configs(self) -> Optional[Sequence['outputs.ApplicationSegmentInspectionCommonAppsDtoAppsConfig']]:
        return pulumi.get(self, "apps_configs")


@pulumi.output_type
class ApplicationSegmentInspectionCommonAppsDtoAppsConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowOptions":
            suggest = "allow_options"
        elif key == "appId":
            suggest = "app_id"
        elif key == "appTypes":
            suggest = "app_types"
        elif key == "applicationPort":
            suggest = "application_port"
        elif key == "applicationProtocol":
            suggest = "application_protocol"
        elif key == "certificateId":
            suggest = "certificate_id"
        elif key == "certificateName":
            suggest = "certificate_name"
        elif key == "localDomain":
            suggest = "local_domain"
        elif key == "trustUntrustedCert":
            suggest = "trust_untrusted_cert"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSegmentInspectionCommonAppsDtoAppsConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSegmentInspectionCommonAppsDtoAppsConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSegmentInspectionCommonAppsDtoAppsConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_options: Optional[bool] = None,
                 app_id: Optional[str] = None,
                 app_types: Optional[Sequence[str]] = None,
                 application_port: Optional[str] = None,
                 application_protocol: Optional[str] = None,
                 certificate_id: Optional[str] = None,
                 certificate_name: Optional[str] = None,
                 cname: Optional[str] = None,
                 description: Optional[str] = None,
                 domain: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 hidden: Optional[bool] = None,
                 id: Optional[str] = None,
                 local_domain: Optional[str] = None,
                 name: Optional[str] = None,
                 portal: Optional[bool] = None,
                 trust_untrusted_cert: Optional[bool] = None):
        """
        :param Sequence[str] app_types: Indicates the type of application as inspection. Supported value: `INSPECT`
        :param str application_port: Port for the Inspection Application Segment.
        :param str application_protocol: Protocol for the Inspection Application Segment.. Supported values: `HTTP` and `HTTPS`
        :param str certificate_id: ID of the signing certificate. This field is required if the applicationProtocol is set to `HTTPS`. The certificateId is not supported if the applicationProtocol is set to `HTTP`.
        :param str description: (Optional) Description of the application.
        :param str domain: Domain name of the Inspection Application Segment.
        :param bool enabled: Whether this application is enabled or not
        :param str name: Name of the Inspection Application Segment.
        """
        if allow_options is not None:
            pulumi.set(__self__, "allow_options", allow_options)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if app_types is not None:
            pulumi.set(__self__, "app_types", app_types)
        if application_port is not None:
            pulumi.set(__self__, "application_port", application_port)
        if application_protocol is not None:
            pulumi.set(__self__, "application_protocol", application_protocol)
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if certificate_name is not None:
            pulumi.set(__self__, "certificate_name", certificate_name)
        if cname is not None:
            pulumi.set(__self__, "cname", cname)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if local_domain is not None:
            pulumi.set(__self__, "local_domain", local_domain)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if portal is not None:
            pulumi.set(__self__, "portal", portal)
        if trust_untrusted_cert is not None:
            pulumi.set(__self__, "trust_untrusted_cert", trust_untrusted_cert)

    @property
    @pulumi.getter(name="allowOptions")
    def allow_options(self) -> Optional[bool]:
        return pulumi.get(self, "allow_options")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[str]:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="appTypes")
    def app_types(self) -> Optional[Sequence[str]]:
        """
        Indicates the type of application as inspection. Supported value: `INSPECT`
        """
        return pulumi.get(self, "app_types")

    @property
    @pulumi.getter(name="applicationPort")
    def application_port(self) -> Optional[str]:
        """
        Port for the Inspection Application Segment.
        """
        return pulumi.get(self, "application_port")

    @property
    @pulumi.getter(name="applicationProtocol")
    def application_protocol(self) -> Optional[str]:
        """
        Protocol for the Inspection Application Segment.. Supported values: `HTTP` and `HTTPS`
        """
        return pulumi.get(self, "application_protocol")

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[str]:
        """
        ID of the signing certificate. This field is required if the applicationProtocol is set to `HTTPS`. The certificateId is not supported if the applicationProtocol is set to `HTTP`.
        """
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="certificateName")
    def certificate_name(self) -> Optional[str]:
        return pulumi.get(self, "certificate_name")

    @property
    @pulumi.getter
    def cname(self) -> Optional[str]:
        return pulumi.get(self, "cname")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        (Optional) Description of the application.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        """
        Domain name of the Inspection Application Segment.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether this application is enabled or not
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def hidden(self) -> Optional[bool]:
        return pulumi.get(self, "hidden")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="localDomain")
    def local_domain(self) -> Optional[str]:
        return pulumi.get(self, "local_domain")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the Inspection Application Segment.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def portal(self) -> Optional[bool]:
        return pulumi.get(self, "portal")

    @property
    @pulumi.getter(name="trustUntrustedCert")
    def trust_untrusted_cert(self) -> Optional[bool]:
        return pulumi.get(self, "trust_untrusted_cert")


@pulumi.output_type
class ApplicationSegmentInspectionServerGroup(dict):
    def __init__(__self__, *,
                 ids: Sequence[str]):
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[str]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class ApplicationSegmentPRACommonAppsDto(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appsConfigs":
            suggest = "apps_configs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSegmentPRACommonAppsDto. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSegmentPRACommonAppsDto.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSegmentPRACommonAppsDto.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apps_configs: Optional[Sequence['outputs.ApplicationSegmentPRACommonAppsDtoAppsConfig']] = None):
        if apps_configs is not None:
            pulumi.set(__self__, "apps_configs", apps_configs)

    @property
    @pulumi.getter(name="appsConfigs")
    def apps_configs(self) -> Optional[Sequence['outputs.ApplicationSegmentPRACommonAppsDtoAppsConfig']]:
        return pulumi.get(self, "apps_configs")


@pulumi.output_type
class ApplicationSegmentPRACommonAppsDtoAppsConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowOptions":
            suggest = "allow_options"
        elif key == "appId":
            suggest = "app_id"
        elif key == "appTypes":
            suggest = "app_types"
        elif key == "applicationPort":
            suggest = "application_port"
        elif key == "applicationProtocol":
            suggest = "application_protocol"
        elif key == "connectionSecurity":
            suggest = "connection_security"
        elif key == "localDomain":
            suggest = "local_domain"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSegmentPRACommonAppsDtoAppsConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSegmentPRACommonAppsDtoAppsConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSegmentPRACommonAppsDtoAppsConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_options: Optional[bool] = None,
                 app_id: Optional[str] = None,
                 app_types: Optional[Sequence[str]] = None,
                 application_port: Optional[str] = None,
                 application_protocol: Optional[str] = None,
                 cname: Optional[str] = None,
                 connection_security: Optional[str] = None,
                 description: Optional[str] = None,
                 domain: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 hidden: Optional[bool] = None,
                 id: Optional[str] = None,
                 local_domain: Optional[str] = None,
                 name: Optional[str] = None,
                 portal: Optional[bool] = None):
        """
        :param Sequence[str] app_types: Indicates the type of application as Privileged Remote Access. Supported value: `SECURE_REMOTE_ACCESS`
        :param str application_port: Port for the Privileged Remote Access
        :param str application_protocol: Protocol for the Privileged Remote Access. Supported values: `RDP` and `SSH`
        :param str connection_security: Parameter required when `application_protocol` is of type `RDP`
        :param str description: (Optional) Description of the application.
        :param str domain: Domain name of the Privileged Remote Access
        :param bool enabled: Whether this application is enabled or not
        :param str name: Name of the Privileged Remote Access
        """
        if allow_options is not None:
            pulumi.set(__self__, "allow_options", allow_options)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if app_types is not None:
            pulumi.set(__self__, "app_types", app_types)
        if application_port is not None:
            pulumi.set(__self__, "application_port", application_port)
        if application_protocol is not None:
            pulumi.set(__self__, "application_protocol", application_protocol)
        if cname is not None:
            pulumi.set(__self__, "cname", cname)
        if connection_security is not None:
            pulumi.set(__self__, "connection_security", connection_security)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if local_domain is not None:
            pulumi.set(__self__, "local_domain", local_domain)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if portal is not None:
            pulumi.set(__self__, "portal", portal)

    @property
    @pulumi.getter(name="allowOptions")
    def allow_options(self) -> Optional[bool]:
        return pulumi.get(self, "allow_options")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[str]:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="appTypes")
    def app_types(self) -> Optional[Sequence[str]]:
        """
        Indicates the type of application as Privileged Remote Access. Supported value: `SECURE_REMOTE_ACCESS`
        """
        return pulumi.get(self, "app_types")

    @property
    @pulumi.getter(name="applicationPort")
    def application_port(self) -> Optional[str]:
        """
        Port for the Privileged Remote Access
        """
        return pulumi.get(self, "application_port")

    @property
    @pulumi.getter(name="applicationProtocol")
    def application_protocol(self) -> Optional[str]:
        """
        Protocol for the Privileged Remote Access. Supported values: `RDP` and `SSH`
        """
        return pulumi.get(self, "application_protocol")

    @property
    @pulumi.getter
    def cname(self) -> Optional[str]:
        return pulumi.get(self, "cname")

    @property
    @pulumi.getter(name="connectionSecurity")
    def connection_security(self) -> Optional[str]:
        """
        Parameter required when `application_protocol` is of type `RDP`
        """
        return pulumi.get(self, "connection_security")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        (Optional) Description of the application.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        """
        Domain name of the Privileged Remote Access
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether this application is enabled or not
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def hidden(self) -> Optional[bool]:
        return pulumi.get(self, "hidden")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="localDomain")
    def local_domain(self) -> Optional[str]:
        return pulumi.get(self, "local_domain")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the Privileged Remote Access
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def portal(self) -> Optional[bool]:
        return pulumi.get(self, "portal")


@pulumi.output_type
class ApplicationSegmentPRAServerGroup(dict):
    def __init__(__self__, *,
                 ids: Sequence[str]):
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[str]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class ApplicationSegmentServerGroup(dict):
    def __init__(__self__, *,
                 ids: Sequence[str]):
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[str]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class BrowserAccessClientlessApp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationPort":
            suggest = "application_port"
        elif key == "applicationProtocol":
            suggest = "application_protocol"
        elif key == "certificateId":
            suggest = "certificate_id"
        elif key == "allowOptions":
            suggest = "allow_options"
        elif key == "localDomain":
            suggest = "local_domain"
        elif key == "trustUntrustedCert":
            suggest = "trust_untrusted_cert"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BrowserAccessClientlessApp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BrowserAccessClientlessApp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BrowserAccessClientlessApp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 application_port: str,
                 application_protocol: str,
                 certificate_id: str,
                 name: str,
                 allow_options: Optional[bool] = None,
                 cname: Optional[str] = None,
                 description: Optional[str] = None,
                 domain: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 hidden: Optional[bool] = None,
                 id: Optional[str] = None,
                 local_domain: Optional[str] = None,
                 path: Optional[str] = None,
                 trust_untrusted_cert: Optional[bool] = None):
        pulumi.set(__self__, "application_port", application_port)
        pulumi.set(__self__, "application_protocol", application_protocol)
        pulumi.set(__self__, "certificate_id", certificate_id)
        pulumi.set(__self__, "name", name)
        if allow_options is not None:
            pulumi.set(__self__, "allow_options", allow_options)
        if cname is not None:
            pulumi.set(__self__, "cname", cname)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if local_domain is not None:
            pulumi.set(__self__, "local_domain", local_domain)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if trust_untrusted_cert is not None:
            pulumi.set(__self__, "trust_untrusted_cert", trust_untrusted_cert)

    @property
    @pulumi.getter(name="applicationPort")
    def application_port(self) -> str:
        return pulumi.get(self, "application_port")

    @property
    @pulumi.getter(name="applicationProtocol")
    def application_protocol(self) -> str:
        return pulumi.get(self, "application_protocol")

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> str:
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="allowOptions")
    def allow_options(self) -> Optional[bool]:
        return pulumi.get(self, "allow_options")

    @property
    @pulumi.getter
    def cname(self) -> Optional[str]:
        return pulumi.get(self, "cname")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def hidden(self) -> Optional[bool]:
        return pulumi.get(self, "hidden")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="localDomain")
    def local_domain(self) -> Optional[str]:
        return pulumi.get(self, "local_domain")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="trustUntrustedCert")
    def trust_untrusted_cert(self) -> Optional[bool]:
        return pulumi.get(self, "trust_untrusted_cert")


@pulumi.output_type
class BrowserAccessServerGroup(dict):
    def __init__(__self__, *,
                 ids: Sequence[str]):
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[str]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class GetApplicationSegmentBrowserAccessClientlessAppResult(dict):
    def __init__(__self__, *,
                 allow_options: bool,
                 app_id: str,
                 application_port: str,
                 application_protocol: str,
                 certificate_id: str,
                 certificate_name: str,
                 cname: str,
                 description: str,
                 domain: str,
                 enabled: bool,
                 hidden: bool,
                 id: str,
                 local_domain: str,
                 name: str,
                 path: str,
                 trust_untrusted_cert: bool):
        """
        :param bool allow_options: (bool)
        :param str application_port: (string)
        :param str application_protocol: (string)
        :param str certificate_id: (string)
        :param str certificate_name: (string)
        :param str cname: (string)
        :param str description: (string)
        :param str domain: (string)
        :param bool enabled: (bool)
        :param bool hidden: (bool)
        :param str id: This field defines the id of the application server.
        :param str local_domain: (string)
        :param str name: This field defines the name of the server.
        :param str path: (string)
        :param bool trust_untrusted_cert: (bool)
        """
        pulumi.set(__self__, "allow_options", allow_options)
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "application_port", application_port)
        pulumi.set(__self__, "application_protocol", application_protocol)
        pulumi.set(__self__, "certificate_id", certificate_id)
        pulumi.set(__self__, "certificate_name", certificate_name)
        pulumi.set(__self__, "cname", cname)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "hidden", hidden)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "local_domain", local_domain)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "trust_untrusted_cert", trust_untrusted_cert)

    @property
    @pulumi.getter(name="allowOptions")
    def allow_options(self) -> bool:
        """
        (bool)
        """
        return pulumi.get(self, "allow_options")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> str:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="applicationPort")
    def application_port(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "application_port")

    @property
    @pulumi.getter(name="applicationProtocol")
    def application_protocol(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "application_protocol")

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="certificateName")
    def certificate_name(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "certificate_name")

    @property
    @pulumi.getter
    def cname(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "cname")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        (bool)
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def hidden(self) -> bool:
        """
        (bool)
        """
        return pulumi.get(self, "hidden")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        This field defines the id of the application server.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="localDomain")
    def local_domain(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "local_domain")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        This field defines the name of the server.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="trustUntrustedCert")
    def trust_untrusted_cert(self) -> bool:
        """
        (bool)
        """
        return pulumi.get(self, "trust_untrusted_cert")


@pulumi.output_type
class GetApplicationSegmentBrowserAccessServerGroupResult(dict):
    def __init__(__self__, *,
                 ids: Sequence[str]):
        """
        :param Sequence[str] ids: This field defines the id of the application server.
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[str]:
        """
        This field defines the id of the application server.
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class GetApplicationSegmentInspectionInspectionAppResult(dict):
    def __init__(__self__, *,
                 app_id: str,
                 application_port: str,
                 application_protocol: str,
                 certificate_id: str,
                 certificate_name: str,
                 description: str,
                 domain: str,
                 enabled: bool,
                 id: str,
                 name: str):
        """
        :param str application_port: (string) TCP/UDP Port for ZPA Inspection.
        :param str application_protocol: (string) Protocol for the Inspection Application. Supported values: `HTTP` and `HTTPS`
        :param str certificate_id: (string) - ID of the signing certificate. This field is required if the applicationProtocol is set to `HTTPS`. The certificateId is not supported if the applicationProtocol is set to `HTTP`.
        :param str certificate_name: (string) - Parameter required when `application_protocol` is of type `HTTPS`
        :param str description: (string) Description of the application.
        :param bool enabled: (bool) Whether this application is enabled or not
        :param str id: The ID of the Inspection Application Segment to be exported.
        :param str name: The name of the Inspection Application Segment to be exported.
        """
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "application_port", application_port)
        pulumi.set(__self__, "application_protocol", application_protocol)
        pulumi.set(__self__, "certificate_id", certificate_id)
        pulumi.set(__self__, "certificate_name", certificate_name)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> str:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="applicationPort")
    def application_port(self) -> str:
        """
        (string) TCP/UDP Port for ZPA Inspection.
        """
        return pulumi.get(self, "application_port")

    @property
    @pulumi.getter(name="applicationProtocol")
    def application_protocol(self) -> str:
        """
        (string) Protocol for the Inspection Application. Supported values: `HTTP` and `HTTPS`
        """
        return pulumi.get(self, "application_protocol")

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> str:
        """
        (string) - ID of the signing certificate. This field is required if the applicationProtocol is set to `HTTPS`. The certificateId is not supported if the applicationProtocol is set to `HTTP`.
        """
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="certificateName")
    def certificate_name(self) -> str:
        """
        (string) - Parameter required when `application_protocol` is of type `HTTPS`
        """
        return pulumi.get(self, "certificate_name")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        (string) Description of the application.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        (bool) Whether this application is enabled or not
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Inspection Application Segment to be exported.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Inspection Application Segment to be exported.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetApplicationSegmentInspectionServerGroupResult(dict):
    def __init__(__self__, *,
                 ids: Sequence[str]):
        """
        :param Sequence[str] ids: The ID of the Inspection Application Segment to be exported.
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[str]:
        """
        The ID of the Inspection Application Segment to be exported.
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class GetApplicationSegmentPRAServerGroupResult(dict):
    def __init__(__self__, *,
                 ids: Sequence[str]):
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[str]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class GetApplicationSegmentPRASraAppResult(dict):
    def __init__(__self__, *,
                 app_id: str,
                 application_port: str,
                 application_protocol: str,
                 certificate_id: str,
                 certificate_name: str,
                 connection_security: str,
                 description: str,
                 domain: str,
                 enabled: bool,
                 hidden: bool,
                 id: str,
                 name: str,
                 portal: bool):
        """
        :param str application_port: (string) Port for the Privileged Remote Accessvalues: `RDP` and `SSH`
        :param str application_protocol: (string) Protocol for the Privileged Remote Access. Supported values: `RDP` and `SSH`
        :param str connection_security: (string) - Parameter required when `application_protocol` is of type `RDP`
        :param str description: (string) Description of the application.
        :param bool enabled: (bool) Whether this application is enabled or not
        :param str name: The name of the PRA Application Segment to be exported.
        """
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "application_port", application_port)
        pulumi.set(__self__, "application_protocol", application_protocol)
        pulumi.set(__self__, "certificate_id", certificate_id)
        pulumi.set(__self__, "certificate_name", certificate_name)
        pulumi.set(__self__, "connection_security", connection_security)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "hidden", hidden)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "portal", portal)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> str:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="applicationPort")
    def application_port(self) -> str:
        """
        (string) Port for the Privileged Remote Accessvalues: `RDP` and `SSH`
        """
        return pulumi.get(self, "application_port")

    @property
    @pulumi.getter(name="applicationProtocol")
    def application_protocol(self) -> str:
        """
        (string) Protocol for the Privileged Remote Access. Supported values: `RDP` and `SSH`
        """
        return pulumi.get(self, "application_protocol")

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> str:
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="certificateName")
    def certificate_name(self) -> str:
        return pulumi.get(self, "certificate_name")

    @property
    @pulumi.getter(name="connectionSecurity")
    def connection_security(self) -> str:
        """
        (string) - Parameter required when `application_protocol` is of type `RDP`
        """
        return pulumi.get(self, "connection_security")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        (string) Description of the application.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        (bool) Whether this application is enabled or not
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def hidden(self) -> bool:
        return pulumi.get(self, "hidden")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the PRA Application Segment to be exported.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def portal(self) -> bool:
        return pulumi.get(self, "portal")


@pulumi.output_type
class GetApplicationSegmentServerGroupResult(dict):
    def __init__(__self__, *,
                 config_space: str,
                 creation_time: str,
                 description: str,
                 dynamic_discovery: bool,
                 enabled: bool,
                 id: str,
                 modified_time: str,
                 modifiedby: str,
                 name: str):
        """
        :param str description: Description of the application.
        :param bool enabled: Whether this application is enabled or not. Default: false. Supported values: `true`, `false`.
        :param str name: Name of the application.
        """
        pulumi.set(__self__, "config_space", config_space)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "dynamic_discovery", dynamic_discovery)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "modifiedby", modifiedby)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="configSpace")
    def config_space(self) -> str:
        return pulumi.get(self, "config_space")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of the application.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dynamicDiscovery")
    def dynamic_discovery(self) -> bool:
        return pulumi.get(self, "dynamic_discovery")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Whether this application is enabled or not. Default: false. Supported values: `true`, `false`.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def modifiedby(self) -> str:
        return pulumi.get(self, "modifiedby")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the application.
        """
        return pulumi.get(self, "name")


