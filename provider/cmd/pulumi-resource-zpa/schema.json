{
    "name": "zpa",
    "displayName": "Zscaler Private Access",
    "description": "A Pulumi package for creating and managing zpa cloud resources.",
    "keywords": [
        "pulumi",
        "zpa",
        "zscaler",
        "category/cloud"
    ],
    "homepage": "https://www.zscaler.com",
    "license": "MIT",
    "attribution": "This Pulumi package is based on the [`zpa` Terraform Provider](https://github.com/zscaler/terraform-provider-zpa).",
    "repository": "https://github.com/zscaler/pulumi-zpa",
    "logoUrl": "https://www.zscaler.com/themes/custom/zscaler/logo.svg",
    "publisher": "Zscaler",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "rootNamespace": "zscaler.PulumiPackage"
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/zscaler/pulumi-zpa/sdk/go/zpa"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing zpa cloud resources.",
            "packageName": "@zscaler/pulumi-zpa",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/zscaler/terraform-provider-zpa)\n\u003e distributed under [MIT](https://mit-license.org/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-zpa` repo](https://github.com/zscaler/pulumi-zpa/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-zpa` repo](https://github.com/zscaler/terraform-provider-zpa/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "packageName": "zscaler_pulumi_zpa",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/zscaler/terraform-provider-zpa)\n\u003e distributed under [MIT](https://mit-license.org/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-zpa` repo](https://github.com/zscaler/pulumi-zpa/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-zpa` repo](https://github.com/zscaler/terraform-provider-zpa/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    },
    "config": {
        "variables": {
            "zpaClientId": {
                "type": "string",
                "description": "zpa client id\n",
                "defaultInfo": {
                    "environment": [
                        "ZPA_CLIENT_ID"
                    ]
                }
            },
            "zpaClientSecret": {
                "type": "string",
                "description": "zpa client secret\n",
                "defaultInfo": {
                    "environment": [
                        "ZPA_CLIENT_SECRET"
                    ]
                },
                "secret": true
            },
            "zpaCloud": {
                "type": "string",
                "description": "Cloud to use PRODUCTION, BETA, GOV or PREVIEW\n",
                "defaultInfo": {
                    "environment": [
                        "ZPA_CLOUD"
                    ]
                }
            },
            "zpaCustomerId": {
                "type": "string",
                "description": "zpa customer id\n",
                "defaultInfo": {
                    "environment": [
                        "ZPA_CUSTOMER_ID"
                    ]
                },
                "secret": true
            }
        }
    },
    "types": {
        "zpa:index/ZPAApplicationSegmentBrowserAccessClientlessApp:ZPAApplicationSegmentBrowserAccessClientlessApp": {
            "properties": {
                "allowOptions": {
                    "type": "boolean",
                    "description": "If you want ZPA to forward unauthenticated HTTP preflight OPTIONS requests from the browser to the app.. Supported values: `true` and `false`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "applicationPort": {
                    "type": "string",
                    "description": "Port for the BA app.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "applicationProtocol": {
                    "type": "string",
                    "description": "Protocol for the BA app. Supported values: `HTTP` and `HTTPS`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "certificateId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cname": {
                    "type": "string",
                    "description": "(Optional)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "(Optional) Description of the application.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "domain": {
                    "type": "string",
                    "description": "Domain name or IP address of the BA app.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(Optional) - Whether this app is enabled or not.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hidden": {
                    "type": "boolean",
                    "description": "(Optional)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "localDomain": {
                    "type": "string",
                    "description": "(Optional)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the application.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "description": "(Optional)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "trustUntrustedCert": {
                    "type": "boolean",
                    "description": "(Optional)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "applicationPort",
                "applicationProtocol",
                "certificateId",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "applicationPort",
                        "applicationProtocol",
                        "certificateId",
                        "cname",
                        "enabled",
                        "hidden",
                        "id",
                        "name",
                        "trustUntrustedCert"
                    ]
                }
            }
        },
        "zpa:index/ZPAApplicationSegmentBrowserAccessServerGroup:ZPAApplicationSegmentBrowserAccessServerGroup": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zpa:index/ZPAApplicationSegmentBrowserAccessTcpPortRange:ZPAApplicationSegmentBrowserAccessTcpPortRange": {
            "properties": {
                "from": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "to": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "zpa:index/ZPAApplicationSegmentBrowserAccessUdpPortRange:ZPAApplicationSegmentBrowserAccessUdpPortRange": {
            "properties": {
                "from": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "to": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "zpa:index/ZPAApplicationSegmentInspectionCommonAppsDto:ZPAApplicationSegmentInspectionCommonAppsDto": {
            "properties": {
                "appsConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPAApplicationSegmentInspectionCommonAppsDtoAppsConfig:ZPAApplicationSegmentInspectionCommonAppsDtoAppsConfig"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "appsConfigs"
                    ]
                }
            }
        },
        "zpa:index/ZPAApplicationSegmentInspectionCommonAppsDtoAppsConfig:ZPAApplicationSegmentInspectionCommonAppsDtoAppsConfig": {
            "properties": {
                "allowOptions": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "appId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "appTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Indicates the type of application as inspection. Supported value: `INSPECT`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "applicationPort": {
                    "type": "string",
                    "description": "Port for the Inspection Application Segment.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "applicationProtocol": {
                    "type": "string",
                    "description": "Protocol for the Inspection Application Segment.. Supported values: `HTTP` and `HTTPS`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certificateId": {
                    "type": "string",
                    "description": "ID of the signing certificate. This field is required if the applicationProtocol is set to `HTTPS`. The certificateId is not supported if the applicationProtocol is set to `HTTP`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certificateName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cname": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "(Optional) Description of the application.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "domain": {
                    "type": "string",
                    "description": "Domain name of the Inspection Application Segment.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether this application is enabled or not\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hidden": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "localDomain": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Inspection Application Segment.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "portal": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "trustUntrustedCert": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowOptions",
                        "appId",
                        "appTypes",
                        "applicationPort",
                        "applicationProtocol",
                        "certificateId",
                        "certificateName",
                        "cname",
                        "description",
                        "domain",
                        "enabled",
                        "hidden",
                        "id",
                        "localDomain",
                        "name",
                        "portal",
                        "trustUntrustedCert"
                    ]
                }
            }
        },
        "zpa:index/ZPAApplicationSegmentInspectionServerGroup:ZPAApplicationSegmentInspectionServerGroup": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zpa:index/ZPAApplicationSegmentInspectionTcpPortRange:ZPAApplicationSegmentInspectionTcpPortRange": {
            "properties": {
                "from": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "to": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "zpa:index/ZPAApplicationSegmentInspectionUdpPortRange:ZPAApplicationSegmentInspectionUdpPortRange": {
            "properties": {
                "from": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "to": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "zpa:index/ZPAApplicationSegmentPRACommonAppsDto:ZPAApplicationSegmentPRACommonAppsDto": {
            "properties": {
                "appsConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPAApplicationSegmentPRACommonAppsDtoAppsConfig:ZPAApplicationSegmentPRACommonAppsDtoAppsConfig"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "appsConfigs"
                    ]
                }
            }
        },
        "zpa:index/ZPAApplicationSegmentPRACommonAppsDtoAppsConfig:ZPAApplicationSegmentPRACommonAppsDtoAppsConfig": {
            "properties": {
                "allowOptions": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "appId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "appTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Indicates the type of application as Privileged Remote Access. Supported value: `SECURE_REMOTE_ACCESS`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "applicationPort": {
                    "type": "string",
                    "description": "Port for the Privileged Remote Access\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "applicationProtocol": {
                    "type": "string",
                    "description": "Protocol for the Privileged Remote Access. Supported values: `RDP` and `SSH`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cname": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connectionSecurity": {
                    "type": "string",
                    "description": "Parameter required when `application_protocol` is of type `RDP`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "(Optional) Description of the application.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "domain": {
                    "type": "string",
                    "description": "Domain name of the Privileged Remote Access\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether this application is enabled or not\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hidden": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "localDomain": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Privileged Remote Access\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "portal": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowOptions",
                        "appId",
                        "appTypes",
                        "applicationPort",
                        "applicationProtocol",
                        "cname",
                        "connectionSecurity",
                        "description",
                        "domain",
                        "enabled",
                        "hidden",
                        "id",
                        "localDomain",
                        "name",
                        "portal"
                    ]
                }
            }
        },
        "zpa:index/ZPAApplicationSegmentPRAServerGroup:ZPAApplicationSegmentPRAServerGroup": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zpa:index/ZPAApplicationSegmentPRATcpPortRange:ZPAApplicationSegmentPRATcpPortRange": {
            "properties": {
                "from": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "to": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "zpa:index/ZPAApplicationSegmentPRAUdpPortRange:ZPAApplicationSegmentPRAUdpPortRange": {
            "properties": {
                "from": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "to": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "zpa:index/ZPAApplicationSegmentServerGroup:ZPAApplicationSegmentServerGroup": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zpa:index/ZPAApplicationSegmentTcpPortRange:ZPAApplicationSegmentTcpPortRange": {
            "properties": {
                "from": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "to": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "zpa:index/ZPAApplicationSegmentUdpPortRange:ZPAApplicationSegmentUdpPortRange": {
            "properties": {
                "from": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "to": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "zpa:index/ZPABrowserAccessClientlessApp:ZPABrowserAccessClientlessApp": {
            "properties": {
                "allowOptions": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "applicationPort": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "applicationProtocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "certificateId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cname": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "domain": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hidden": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "localDomain": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "trustUntrustedCert": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "applicationPort",
                "applicationProtocol",
                "certificateId",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "applicationPort",
                        "applicationProtocol",
                        "certificateId",
                        "cname",
                        "enabled",
                        "hidden",
                        "id",
                        "name",
                        "trustUntrustedCert"
                    ]
                }
            }
        },
        "zpa:index/ZPABrowserAccessServerGroup:ZPABrowserAccessServerGroup": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zpa:index/ZPABrowserAccessTcpPortRange:ZPABrowserAccessTcpPortRange": {
            "properties": {
                "from": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "to": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "zpa:index/ZPABrowserAccessUdpPortRange:ZPABrowserAccessUdpPortRange": {
            "properties": {
                "from": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "to": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "zpa:index/ZPAInspectionCustomControlsAssociatedInspectionProfileName:ZPAInspectionCustomControlsAssociatedInspectionProfileName": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ids"
                    ]
                }
            }
        },
        "zpa:index/ZPAInspectionCustomControlsRule:ZPAInspectionCustomControlsRule": {
            "properties": {
                "conditions": {
                    "$ref": "#/types/zpa:index/ZPAInspectionCustomControlsRuleConditions:ZPAInspectionCustomControlsRuleConditions",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "conditions",
                        "names",
                        "type"
                    ]
                }
            }
        },
        "zpa:index/ZPAInspectionCustomControlsRuleConditions:ZPAInspectionCustomControlsRuleConditions": {
            "properties": {
                "lhs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "op": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rhs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "lhs",
                        "op",
                        "rhs"
                    ]
                }
            }
        },
        "zpa:index/ZPAInspectionProfileControlsInfo:ZPAInspectionProfileControlsInfo": {
            "properties": {
                "controlType": {
                    "type": "string",
                    "description": "(Optional) Control types. Supported Values: `CUSTOM`, `PREDEFINED`, `ZSCALER`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "count": {
                    "type": "string",
                    "description": "(Optional) Control information counts `Long`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "controlType",
                        "count"
                    ]
                }
            }
        },
        "zpa:index/ZPAInspectionProfileCustomControl:ZPAInspectionProfileCustomControl": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The action of the predefined control. Supported values: `PASS`, `BLOCK` and `REDIRECT`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "actionValue": {
                    "type": "string",
                    "description": "Value for the predefined controls action. This field is only required if the action is set to REDIRECT. This field is only required if the action is set to `REDIRECT`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "ID of the predefined control\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action",
                "id"
            ]
        },
        "zpa:index/ZPAInspectionProfilePredefinedControl:ZPAInspectionProfilePredefinedControl": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The action of the predefined control. Supported values: `PASS`, `BLOCK` and `REDIRECT`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "actionValue": {
                    "type": "string",
                    "description": "Value for the predefined controls action. This field is only required if the action is set to REDIRECT. This field is only required if the action is set to `REDIRECT`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "ID of the predefined control\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action",
                "id"
            ]
        },
        "zpa:index/ZPALSSConfigControllerConfig:ZPALSSConfigControllerConfig": {
            "properties": {
                "auditMessage": {
                    "type": "string",
                    "description": "(Optional)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "(Optional)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(Optional)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "format": {
                    "type": "string",
                    "description": "The format of the LSS resource. The supported formats are: `JSON`, `CSV`, and `TSV`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "App Connector Group ID(s) where logs will be forwarded to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lssHost": {
                    "type": "string",
                    "description": "The IP or FQDN of the SIEM (Log Receiver) where logs will be forwarded to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lssPort": {
                    "type": "string",
                    "description": "The destination port of the SIEM (Log Receiver) where logs will be forwarded to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(Optional)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceLogType": {
                    "type": "string",
                    "description": "Refer to the log type documentation\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useTls": {
                    "type": "boolean",
                    "description": "(Optional)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "format",
                "lssHost",
                "lssPort",
                "name",
                "sourceLogType"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "auditMessage",
                        "format",
                        "id",
                        "lssHost",
                        "lssPort",
                        "name",
                        "sourceLogType"
                    ]
                }
            }
        },
        "zpa:index/ZPALSSConfigControllerConnectorGroup:ZPALSSConfigControllerConnectorGroup": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "App Connector Group ID(s) where logs will be forwarded to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "zpa:index/ZPALSSConfigControllerPolicyRuleResource:ZPALSSConfigControllerPolicyRuleResource": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "(Optional)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "actionId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bypassDefaultRule": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPALSSConfigControllerPolicyRuleResourceCondition:ZPALSSConfigControllerPolicyRuleResourceCondition"
                    },
                    "description": "(Optional)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customMsg": {
                    "type": "string",
                    "description": "(Optional)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "defaultRule": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "(Optional)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "App Connector Group ID(s) where logs will be forwarded to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lssDefaultRule": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(Optional)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operator": {
                    "type": "string",
                    "description": "(Optional) - Supported values are: `AND` or `OR`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "policySetId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "policyType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reauthDefaultRule": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reauthIdleTimeout": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "reauthTimeout": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "ruleOrder": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zpnInspectionProfileId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "name",
                        "operator",
                        "policyType",
                        "priority",
                        "ruleOrder"
                    ]
                }
            }
        },
        "zpa:index/ZPALSSConfigControllerPolicyRuleResourceCondition:ZPALSSConfigControllerPolicyRuleResourceCondition": {
            "properties": {
                "negated": {
                    "type": "boolean",
                    "description": "(Optional)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPALSSConfigControllerPolicyRuleResourceConditionOperand:ZPALSSConfigControllerPolicyRuleResourceConditionOperand"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operator": {
                    "type": "string",
                    "description": "(Optional) - Supported values are: `AND` or `OR`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "zpa:index/ZPALSSConfigControllerPolicyRuleResourceConditionOperand:ZPALSSConfigControllerPolicyRuleResourceConditionOperand": {
            "properties": {
                "objectType": {
                    "type": "string",
                    "description": "(Optional) This is for specifying the policy critiera. Supported values: `APP`, `APP_GROUP`, `CLIENT_TYPE`, `TRUSTED_NETWORK`, `SAML`, `SCIM`, `SCIM_GROUP`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional) The below values are supported when choosing `object_type` of type `CLIENT_TYPE`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "objectType"
            ]
        },
        "zpa:index/ZPAPolicyAccessForwardingRuleCondition:ZPAPolicyAccessForwardingRuleCondition": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "negated": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPAPolicyAccessForwardingRuleConditionOperand:ZPAPolicyAccessForwardingRuleConditionOperand"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "operator"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "negated",
                        "operands",
                        "operator"
                    ]
                }
            }
        },
        "zpa:index/ZPAPolicyAccessForwardingRuleConditionOperand:ZPAPolicyAccessForwardingRuleConditionOperand": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "idpId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lhs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "objectType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rhs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rhsLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "lhs",
                "objectType"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "idpId",
                        "lhs",
                        "name",
                        "objectType"
                    ]
                }
            }
        },
        "zpa:index/ZPAPolicyAccessInspectionRuleCondition:ZPAPolicyAccessInspectionRuleCondition": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "negated": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPAPolicyAccessInspectionRuleConditionOperand:ZPAPolicyAccessInspectionRuleConditionOperand"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "operator"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "negated",
                        "operands",
                        "operator"
                    ]
                }
            }
        },
        "zpa:index/ZPAPolicyAccessInspectionRuleConditionOperand:ZPAPolicyAccessInspectionRuleConditionOperand": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "idpId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lhs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "objectType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rhs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rhsLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "lhs",
                "objectType"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "idpId",
                        "lhs",
                        "name",
                        "objectType"
                    ]
                }
            }
        },
        "zpa:index/ZPAPolicyAccessRuleAppConnectorGroup:ZPAPolicyAccessRuleAppConnectorGroup": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional) The ID of a server group resource\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "zpa:index/ZPAPolicyAccessRuleAppServerGroup:ZPAPolicyAccessRuleAppServerGroup": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional) The ID of a server group resource\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "zpa:index/ZPAPolicyAccessRuleCondition:ZPAPolicyAccessRuleCondition": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "(Optional) The ID of a server group resource\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "negated": {
                    "type": "boolean",
                    "description": "(Optional) Supported values: ``true`` or ``false``\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPAPolicyAccessRuleConditionOperand:ZPAPolicyAccessRuleConditionOperand"
                    },
                    "description": "(Optional) - Operands block must be repeated if multiple per `object_type` conditions are to be added to the rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operator": {
                    "type": "string",
                    "description": "(Optional) Supported values: ``AND``, and ``OR``\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "operator"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "negated",
                        "operands",
                        "operator"
                    ]
                }
            }
        },
        "zpa:index/ZPAPolicyAccessRuleConditionOperand:ZPAPolicyAccessRuleConditionOperand": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "(Optional) The ID of a server group resource\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "idpId": {
                    "type": "string",
                    "description": "(Optional)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lhs": {
                    "type": "string",
                    "description": "(Optional) LHS must always carry the string value ``id`` or the attribute ID of the resource being associated with the rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(Optional)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "objectType": {
                    "type": "string",
                    "description": "(Optional) This is for specifying the policy critiera. Supported values: `APP`, `APP_GROUP`, `SAML`, `IDP`, `CLIENT_TYPE`, `TRUSTED_NETWORK`, `POSTURE`, `SCIM`, `SCIM_GROUP`, and `CLOUD_CONNECTOR_GROUP`. `TRUSTED_NETWORK`, and `CLIENT_TYPE`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rhs": {
                    "type": "string",
                    "description": "(Optional) RHS is either the ID attribute of a resource or fixed string value. Refer to the chart below for further details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rhsLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "lhs",
                "objectType"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "idpId",
                        "lhs",
                        "name",
                        "objectType"
                    ]
                }
            }
        },
        "zpa:index/ZPAPolicyAccessTimeOutRuleCondition:ZPAPolicyAccessTimeOutRuleCondition": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "negated": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPAPolicyAccessTimeOutRuleConditionOperand:ZPAPolicyAccessTimeOutRuleConditionOperand"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "operator"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "negated",
                        "operands",
                        "operator"
                    ]
                }
            }
        },
        "zpa:index/ZPAPolicyAccessTimeOutRuleConditionOperand:ZPAPolicyAccessTimeOutRuleConditionOperand": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "idpId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lhs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "objectType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rhs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rhsLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "lhs",
                "objectType"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "idpId",
                        "lhs",
                        "name",
                        "objectType"
                    ]
                }
            }
        },
        "zpa:index/ZPASegmentGroupApplication:ZPASegmentGroupApplication": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "zpa:index/ZPAServerGroupAppConnectorGroup:ZPAServerGroupAppConnectorGroup": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "zpa:index/ZPAServerGroupApplication:ZPAServerGroupApplication": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "zpa:index/ZPAServerGroupServer:ZPAServerGroupServer": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "zpa:index/ZPAServiceEdgeGroupServiceEdge:ZPAServiceEdgeGroupServiceEdge": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "zpa:index/ZPAServiceEdgeGroupTrustedNetwork:ZPAServiceEdgeGroupTrustedNetwork": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "zpa:index/getZPAAppConnectorGroupConnector:getZPAAppConnectorGroupConnector": {
            "properties": {
                "appconnectorGroupId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "appconnectorGroupName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "applicationStartTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "controlChannelStatus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "creationTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ctrlBrokerName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "currentVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "(String) Description of the App Connector Group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(String) Whether this App Connector Group is enabled or not. Default value: `true`. Supported values: `true`, `false`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enrollmentCert": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expectedUpgradeTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expectedVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fingerprint": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "ID of the App Connector Group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipacl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "issuedCertId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastBrokerConnectTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastBrokerConnectTimeDuration": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastBrokerDisconnectTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastBrokerDisconnectTimeDuration": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastUpgradeTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "latitude": {
                    "type": "string",
                    "description": "(String) Latitude of the App Connector Group. Integer or decimal. With values in the range of `-90` to `90`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "location": {
                    "type": "string",
                    "description": "(String) Location of the App Connector Group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "longitude": {
                    "type": "string",
                    "description": "(String) Longitude of the App Connector Group. Integer or decimal. With values in the range of `-180` to `180`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifiedTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifiedby": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the App Connector Group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "platform": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "previousVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "provisioningKeyId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "provisioningKeyName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sargeVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "upgradeAttempt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "upgradeStatus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "appconnectorGroupId",
                "appconnectorGroupName",
                "applicationStartTime",
                "controlChannelStatus",
                "creationTime",
                "ctrlBrokerName",
                "currentVersion",
                "description",
                "enabled",
                "enrollmentCert",
                "expectedUpgradeTime",
                "expectedVersion",
                "fingerprint",
                "id",
                "ipacl",
                "issuedCertId",
                "lastBrokerConnectTime",
                "lastBrokerConnectTimeDuration",
                "lastBrokerDisconnectTime",
                "lastBrokerDisconnectTimeDuration",
                "lastUpgradeTime",
                "latitude",
                "location",
                "longitude",
                "modifiedTime",
                "modifiedby",
                "name",
                "platform",
                "previousVersion",
                "privateIp",
                "provisioningKeyId",
                "provisioningKeyName",
                "publicIp",
                "sargeVersion",
                "upgradeAttempt",
                "upgradeStatus"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getZPAAppConnectorGroupServerGroup:getZPAAppConnectorGroupServerGroup": {
            "properties": {
                "configSpace": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "creationTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "(String) Description of the App Connector Group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dynamicDiscovery": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(String) Whether this App Connector Group is enabled or not. Default value: `true`. Supported values: `true`, `false`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "ID of the App Connector Group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifiedTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifiedby": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the App Connector Group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "configSpace",
                "creationTime",
                "description",
                "dynamicDiscovery",
                "enabled",
                "id",
                "modifiedTime",
                "modifiedby",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getZPAApplicationSegmentBrowserAccessClientlessApp:getZPAApplicationSegmentBrowserAccessClientlessApp": {
            "properties": {
                "allowOptions": {
                    "type": "boolean",
                    "description": "(bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "appId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "applicationPort": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "applicationProtocol": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certificateId": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certificateName": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cname": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "domain": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hidden": {
                    "type": "boolean",
                    "description": "(bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "This field defines the id of the application server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "localDomain": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "This field defines the name of the server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "trustUntrustedCert": {
                    "type": "boolean",
                    "description": "(bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allowOptions",
                "appId",
                "applicationPort",
                "applicationProtocol",
                "certificateId",
                "certificateName",
                "cname",
                "description",
                "domain",
                "enabled",
                "hidden",
                "id",
                "localDomain",
                "name",
                "path",
                "trustUntrustedCert"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getZPAApplicationSegmentBrowserAccessServerGroup:getZPAApplicationSegmentBrowserAccessServerGroup": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "This field defines the id of the application server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getZPAApplicationSegmentBrowserAccessTcpPortRange:getZPAApplicationSegmentBrowserAccessTcpPortRange": {
            "properties": {
                "from": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "to": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "zpa:index/getZPAApplicationSegmentBrowserAccessUdpPortRange:getZPAApplicationSegmentBrowserAccessUdpPortRange": {
            "properties": {
                "from": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "to": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "zpa:index/getZPAApplicationSegmentInspectionInspectionApp:getZPAApplicationSegmentInspectionInspectionApp": {
            "properties": {
                "appId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "applicationPort": {
                    "type": "string",
                    "description": "(string) TCP/UDP Port for ZPA Inspection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "applicationProtocol": {
                    "type": "string",
                    "description": "(string) Protocol for the Inspection Application. Supported values: `HTTP` and `HTTPS`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certificateId": {
                    "type": "string",
                    "description": "(string) - ID of the signing certificate. This field is required if the applicationProtocol is set to `HTTPS`. The certificateId is not supported if the applicationProtocol is set to `HTTP`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certificateName": {
                    "type": "string",
                    "description": "(string) - Parameter required when `application_protocol` is of type `HTTPS`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "(string) Description of the application.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "domain": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(bool) Whether this application is enabled or not\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the Inspection Application Segment to be exported.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Inspection Application Segment to be exported.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "appId",
                "applicationPort",
                "applicationProtocol",
                "certificateId",
                "certificateName",
                "description",
                "domain",
                "enabled",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getZPAApplicationSegmentInspectionServerGroup:getZPAApplicationSegmentInspectionServerGroup": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The ID of the Inspection Application Segment to be exported.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getZPAApplicationSegmentInspectionTcpPortRange:getZPAApplicationSegmentInspectionTcpPortRange": {
            "properties": {
                "from": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "to": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "zpa:index/getZPAApplicationSegmentInspectionUdpPortRange:getZPAApplicationSegmentInspectionUdpPortRange": {
            "properties": {
                "from": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "to": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "zpa:index/getZPAApplicationSegmentPRAServerGroup:getZPAApplicationSegmentPRAServerGroup": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getZPAApplicationSegmentPRASraApp:getZPAApplicationSegmentPRASraApp": {
            "properties": {
                "appId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "applicationPort": {
                    "type": "string",
                    "description": "(string) Port for the Privileged Remote Accessvalues: `RDP` and `SSH`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "applicationProtocol": {
                    "type": "string",
                    "description": "(string) Protocol for the Privileged Remote Access. Supported values: `RDP` and `SSH`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certificateId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certificateName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connectionSecurity": {
                    "type": "string",
                    "description": "(string) - Parameter required when `application_protocol` is of type `RDP`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "(string) Description of the application.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "domain": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(bool) Whether this application is enabled or not\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hidden": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the PRA Application Segment to be exported.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "portal": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "appId",
                "applicationPort",
                "applicationProtocol",
                "certificateId",
                "certificateName",
                "connectionSecurity",
                "description",
                "domain",
                "enabled",
                "hidden",
                "id",
                "name",
                "portal"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getZPAApplicationSegmentPRATcpPortRange:getZPAApplicationSegmentPRATcpPortRange": {
            "properties": {
                "from": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "to": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "zpa:index/getZPAApplicationSegmentPRAUdpPortRange:getZPAApplicationSegmentPRAUdpPortRange": {
            "properties": {
                "from": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "to": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "zpa:index/getZPAApplicationSegmentServerGroup:getZPAApplicationSegmentServerGroup": {
            "properties": {
                "configSpace": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "creationTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "Description of the application.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dynamicDiscovery": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether this application is enabled or not. Default: false. Supported values: `true`, `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifiedTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifiedby": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the application.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "configSpace",
                "creationTime",
                "description",
                "dynamicDiscovery",
                "enabled",
                "id",
                "modifiedTime",
                "modifiedby",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getZPAApplicationSegmentTcpPortRange:getZPAApplicationSegmentTcpPortRange": {
            "properties": {
                "from": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "to": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "zpa:index/getZPAApplicationSegmentUdpPortRange:getZPAApplicationSegmentUdpPortRange": {
            "properties": {
                "from": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "to": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "zpa:index/getZPACloudConnectorGroupCloudConnector:getZPACloudConnectorGroupCloudConnector": {
            "properties": {
                "creationTime": {
                    "type": "string",
                    "description": "(string) - Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "(string) - Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(bool) - Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fingerprint": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "This field defines the id of the cloud connector group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipacls": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "issuedCertId": {
                    "type": "string",
                    "description": "(string) - Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifiedTime": {
                    "type": "string",
                    "description": "(string)- Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifiedby": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "This field defines the name of the cloud connector group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "signingCert": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "creationTime",
                "description",
                "enabled",
                "fingerprint",
                "id",
                "ipacls",
                "issuedCertId",
                "modifiedTime",
                "modifiedby",
                "name",
                "signingCert"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getZPAIdPControllerAdminMetadata:getZPAIdPControllerAdminMetadata": {
            "properties": {
                "certificateUrl": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "spBaseUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "spEntityId": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "spMetadataUrl": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "spPostUrl": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "certificateUrl",
                "spBaseUrl",
                "spEntityId",
                "spMetadataUrl",
                "spPostUrl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getZPAIdPControllerUserMetadata:getZPAIdPControllerUserMetadata": {
            "properties": {
                "certificateUrl": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "spBaseUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "spEntityId": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "spMetadataUrl": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "spPostUrl": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "certificateUrl",
                "spBaseUrl",
                "spEntityId",
                "spMetadataUrl",
                "spPostUrl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getZPAInspectionAllPredefinedControlsList:getZPAInspectionAllPredefinedControlsList": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "actionValue": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "associatedInspectionProfileNames": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/getZPAInspectionAllPredefinedControlsListAssociatedInspectionProfileName:getZPAInspectionAllPredefinedControlsListAssociatedInspectionProfileName"
                    },
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "attachment": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "controlGroup": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "controlNumber": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "creationTime": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "defaultAction": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "defaultActionValue": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifiedTime": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifiedby": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "paranoiaLevel": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "severity": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "description": "The version of the predefined control, the default is: `OWASP_CRS/3.3.0`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action",
                "actionValue",
                "associatedInspectionProfileNames",
                "attachment",
                "controlGroup",
                "controlNumber",
                "creationTime",
                "defaultAction",
                "defaultActionValue",
                "description",
                "id",
                "modifiedTime",
                "modifiedby",
                "name",
                "paranoiaLevel",
                "severity",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getZPAInspectionAllPredefinedControlsListAssociatedInspectionProfileName:getZPAInspectionAllPredefinedControlsListAssociatedInspectionProfileName": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getZPAInspectionCustomControlsRule:getZPAInspectionCustomControlsRule": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/getZPAInspectionCustomControlsRuleCondition:getZPAInspectionCustomControlsRuleCondition"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "conditions",
                "names",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getZPAInspectionCustomControlsRuleCondition:getZPAInspectionCustomControlsRuleCondition": {
            "properties": {
                "lhs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "op": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rhs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "lhs",
                "op",
                "rhs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getZPAInspectionPredefinedControlsAssociatedInspectionProfileName:getZPAInspectionPredefinedControlsAssociatedInspectionProfileName": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "(Computed)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the predefined control.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getZPAInspectionProfileControlsInfo:getZPAInspectionProfileControlsInfo": {
            "properties": {
                "controlType": {
                    "type": "string",
                    "description": "(string) Control types. Supported Values: `CUSTOM`, `PREDEFINED`, `ZSCALER`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "count": {
                    "type": "string",
                    "description": "(string) Control information counts `Long`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "controlType",
                "count"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getZPAInspectionProfileCustomControl:getZPAInspectionProfileCustomControl": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "(string) The action of the predefined control. Supported values: `PASS`, `BLOCK` and `REDIRECT`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "actionValue": {
                    "type": "string",
                    "description": "(string) Value for the predefined controls action. This field is only required if the action is set to REDIRECT. This field is only required if the action is set to `REDIRECT`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "associatedInspectionProfileNames": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/getZPAInspectionProfileCustomControlAssociatedInspectionProfileName:getZPAInspectionProfileCustomControlAssociatedInspectionProfileName"
                    },
                    "description": "(string) Name of the inspection profile\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "controlNumber": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "controlRuleJson": {
                    "type": "string",
                    "description": "(string) Custom controls string in JSON format\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "creationTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "defaultAction": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "defaultActionValue": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "(string) Description of the inspection profile.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "This field defines the id of the application server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifiedBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifiedTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "This field defines the name of the server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "paranoiaLevel": {
                    "type": "string",
                    "description": "(string) OWASP Predefined Paranoia Level. Range: [1-4], inclusive\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/getZPAInspectionProfileCustomControlRule:getZPAInspectionProfileCustomControlRule"
                    },
                    "description": "(string) Rules of the custom controls applied as conditions `JSON`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "severity": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "(string) Type value for the rules\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "description": "(string) The version of the predefined control, the default is: `OWASP_CRS/3.3.0`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action",
                "actionValue",
                "associatedInspectionProfileNames",
                "controlNumber",
                "controlRuleJson",
                "creationTime",
                "defaultAction",
                "defaultActionValue",
                "description",
                "id",
                "modifiedBy",
                "modifiedTime",
                "name",
                "paranoiaLevel",
                "rules",
                "severity",
                "type",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getZPAInspectionProfileCustomControlAssociatedInspectionProfileName:getZPAInspectionProfileCustomControlAssociatedInspectionProfileName": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "This field defines the id of the application server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "This field defines the name of the server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getZPAInspectionProfileCustomControlRule:getZPAInspectionProfileCustomControlRule": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/getZPAInspectionProfileCustomControlRuleCondition:getZPAInspectionProfileCustomControlRuleCondition"
                    },
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "names": {
                    "type": "string",
                    "description": "(string) Name of the rules. If rules.type is set to `REQUEST_HEADERS`, `REQUEST_COOKIES`, or `RESPONSE_HEADERS`, the rules.name field is required.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "(string) Type value for the rules\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "conditions",
                "names",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getZPAInspectionProfileCustomControlRuleCondition:getZPAInspectionProfileCustomControlRuleCondition": {
            "properties": {
                "lhs": {
                    "type": "string",
                    "description": "(string) Signifies the key for the object type Supported values: `SIZE`, `VALUE`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "op": {
                    "type": "string",
                    "description": "(string) If lhs is set to SIZE, then the user may pass one of the following: `EQ: Equals`, `LE: Less than or equal to`, `GE: Greater than or equal to`. If the lhs is set to `VALUE`, then the user may pass one of the following: `CONTAINS`, `STARTS_WITH`, `ENDS_WITH`, `RX`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rhs": {
                    "type": "string",
                    "description": "(string) Denotes the value for the given object type. Its value depends on the key. If rules.type is set to REQUEST_METHOD, the conditions.rhs field must have one of the following values: `GET`,`HEAD`, `POST`, `OPTIONS`, `PUT`, `DELETE`, `TRACE`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "lhs",
                "op",
                "rhs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getZPAInspectionProfilePredefinedControl:getZPAInspectionProfilePredefinedControl": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "(string) The action of the predefined control. Supported values: `PASS`, `BLOCK` and `REDIRECT`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "actionValue": {
                    "type": "string",
                    "description": "(string) Value for the predefined controls action. This field is only required if the action is set to REDIRECT. This field is only required if the action is set to `REDIRECT`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "associatedInspectionProfileNames": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/getZPAInspectionProfilePredefinedControlAssociatedInspectionProfileName:getZPAInspectionProfilePredefinedControlAssociatedInspectionProfileName"
                    },
                    "description": "(string) Name of the inspection profile\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "attachment": {
                    "type": "string",
                    "description": "(string) Control attachment\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "controlGroup": {
                    "type": "string",
                    "description": "(string) Control group\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "controlNumber": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "creationTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "defaultAction": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "defaultActionValue": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "(string) Description of the inspection profile.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "This field defines the id of the application server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifiedBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifiedTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "This field defines the name of the server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "paranoiaLevel": {
                    "type": "string",
                    "description": "(string) OWASP Predefined Paranoia Level. Range: [1-4], inclusive\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "severity": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "description": "(string) The version of the predefined control, the default is: `OWASP_CRS/3.3.0`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action",
                "actionValue",
                "associatedInspectionProfileNames",
                "attachment",
                "controlGroup",
                "controlNumber",
                "creationTime",
                "defaultAction",
                "defaultActionValue",
                "description",
                "id",
                "modifiedBy",
                "modifiedTime",
                "name",
                "paranoiaLevel",
                "severity",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getZPAInspectionProfilePredefinedControlAssociatedInspectionProfileName:getZPAInspectionProfilePredefinedControlAssociatedInspectionProfileName": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "This field defines the id of the application server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "This field defines the name of the server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getZPALSSConfigControllerConfig:getZPALSSConfigControllerConfig": {
            "properties": {
                "auditMessage": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "format": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "This field defines the name of the log streaming resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lssHost": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lssPort": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "This field defines the name of the log streaming resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceLogType": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useTls": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "auditMessage",
                "description",
                "enabled",
                "filters",
                "format",
                "id",
                "lssHost",
                "lssPort",
                "name",
                "sourceLogType",
                "useTls"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getZPALSSConfigControllerConnectorGroup:getZPALSSConfigControllerConnectorGroup": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "This field defines the name of the log streaming resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getZPALSSConfigControllerPolicyRule:getZPALSSConfigControllerPolicyRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "actionId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bypassDefaultRule": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/getZPALSSConfigControllerPolicyRuleCondition:getZPALSSConfigControllerPolicyRuleCondition"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "creationTime": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customMsg": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "defaultRule": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "This field defines the name of the log streaming resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isolationDefaultRule": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lssDefaultRule": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifiedTime": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifiedby": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "This field defines the name of the log streaming resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "policySetId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "policyType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reauthDefaultRule": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reauthIdleTimeout": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reauthTimeout": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ruleOrder": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zpnCbiProfileId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zpnInspectionProfileId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zpnInspectionProfileName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action",
                "actionId",
                "bypassDefaultRule",
                "conditions",
                "creationTime",
                "customMsg",
                "defaultRule",
                "description",
                "id",
                "isolationDefaultRule",
                "lssDefaultRule",
                "modifiedTime",
                "modifiedby",
                "name",
                "operator",
                "policySetId",
                "policyType",
                "priority",
                "reauthDefaultRule",
                "reauthIdleTimeout",
                "reauthTimeout",
                "ruleOrder",
                "zpnCbiProfileId",
                "zpnInspectionProfileId",
                "zpnInspectionProfileName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getZPALSSConfigControllerPolicyRuleCondition:getZPALSSConfigControllerPolicyRuleCondition": {
            "properties": {
                "creationTime": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "This field defines the name of the log streaming resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifiedTime": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifiedby": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "negated": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/getZPALSSConfigControllerPolicyRuleConditionOperand:getZPALSSConfigControllerPolicyRuleConditionOperand"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "creationTime",
                "id",
                "modifiedTime",
                "modifiedby",
                "negated",
                "operands",
                "operator"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getZPALSSConfigControllerPolicyRuleConditionOperand:getZPALSSConfigControllerPolicyRuleConditionOperand": {
            "properties": {
                "creationTime": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "This field defines the name of the log streaming resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "idpId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lhs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifiedTime": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifiedby": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "This field defines the name of the log streaming resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "objectType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rhs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "creationTime",
                "id",
                "idpId",
                "lhs",
                "modifiedTime",
                "modifiedby",
                "name",
                "objectType",
                "operator",
                "rhs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getZPAMachineGroupMachine:getZPAMachineGroupMachine": {
            "properties": {
                "creationTime": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fingerprint": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the machine group to be exported.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "issuedCertId": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "machineGroupId": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "machineGroupName": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "machineTokenId": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifiedBy": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifiedTime": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the machine group to be exported.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "signingCert": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "creationTime",
                "description",
                "fingerprint",
                "id",
                "issuedCertId",
                "machineGroupId",
                "machineGroupName",
                "machineTokenId",
                "modifiedBy",
                "modifiedTime",
                "name",
                "signingCert"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getZPAPolicyTypeRule:getZPAPolicyTypeRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "actionId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bypassDefaultRule": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/getZPAPolicyTypeRuleCondition:getZPAPolicyTypeRuleCondition"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "creationTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customMsg": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isolationDefaultRule": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifiedBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifiedTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "policySetId": {
                    "type": "string",
                    "description": "The ID of the global policy set.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "policyType": {
                    "type": "string",
                    "description": "The value for differentiating the policy types.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reauthDefaultRule": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reauthIdleTimeout": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reauthTimeout": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ruleOrder": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zpnCbiProfileId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zpnInspectionProfileId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action",
                "actionId",
                "bypassDefaultRule",
                "conditions",
                "creationTime",
                "customMsg",
                "description",
                "id",
                "isolationDefaultRule",
                "modifiedBy",
                "modifiedTime",
                "name",
                "operator",
                "policySetId",
                "policyType",
                "priority",
                "reauthDefaultRule",
                "reauthIdleTimeout",
                "reauthTimeout",
                "ruleOrder",
                "zpnCbiProfileId",
                "zpnInspectionProfileId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getZPAPolicyTypeRuleCondition:getZPAPolicyTypeRuleCondition": {
            "properties": {
                "creationTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifiedBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifiedTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "negated": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/getZPAPolicyTypeRuleConditionOperand:getZPAPolicyTypeRuleConditionOperand"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "creationTime",
                "id",
                "modifiedBy",
                "modifiedTime",
                "negated",
                "operands",
                "operator"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getZPAPolicyTypeRuleConditionOperand:getZPAPolicyTypeRuleConditionOperand": {
            "properties": {
                "creationTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "idpId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lhs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifiedBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifiedTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "objectType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rhs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "creationTime",
                "id",
                "idpId",
                "lhs",
                "modifiedBy",
                "modifiedTime",
                "name",
                "objectType",
                "operator",
                "rhs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getZPASegmentGroupApplication:getZPASegmentGroupApplication": {
            "properties": {
                "bypassType": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "configSpace": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "creationTime": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "defaultIdleTimeout": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "defaultMaxAge": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "domainName": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "doubleEncrypt": {
                    "type": "boolean",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "healthCheckType": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the segment group to be exported.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAnchored": {
                    "type": "boolean",
                    "description": "(bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logFeatures": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifiedBy": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifiedTime": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the segment group to be exported.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "passiveHealthEnabled": {
                    "type": "boolean",
                    "description": "(bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/getZPASegmentGroupApplicationServerGroup:getZPASegmentGroupApplicationServerGroup"
                    },
                    "description": "(Computed)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tcpPortRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tcpPortsIns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tcpPortsOuts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "udpPortRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bypassType",
                "configSpace",
                "creationTime",
                "defaultIdleTimeout",
                "defaultMaxAge",
                "description",
                "domainName",
                "domainNames",
                "doubleEncrypt",
                "enabled",
                "healthCheckType",
                "id",
                "ipAnchored",
                "logFeatures",
                "modifiedBy",
                "modifiedTime",
                "name",
                "passiveHealthEnabled",
                "serverGroups",
                "tcpPortRanges",
                "tcpPortsIns",
                "tcpPortsOuts",
                "udpPortRanges"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getZPASegmentGroupApplicationServerGroup:getZPASegmentGroupApplicationServerGroup": {
            "properties": {
                "configSpace": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "creationTime": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dynamicDiscovery": {
                    "type": "boolean",
                    "description": "(bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the segment group to be exported.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifiedBy": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifiedTime": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the segment group to be exported.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "configSpace",
                "creationTime",
                "description",
                "dynamicDiscovery",
                "enabled",
                "id",
                "modifiedBy",
                "modifiedTime",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getZPAServerGroupAppConnectorGroup:getZPAServerGroupAppConnectorGroup": {
            "properties": {
                "cityCountry": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connectors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/getZPAServerGroupAppConnectorGroupConnector:getZPAServerGroupAppConnectorGroupConnector"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "countryCode": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "creationTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "(string) This field is the description of the server group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dnsQueryType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(bool) This field defines if the server group is enabled or disabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "geolocationId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the server group to be exported.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "latitude": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "location": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "longitude": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifiedTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifiedby": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the server group to be exported.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/getZPAServerGroupAppConnectorGroupServerGroup:getZPAServerGroupAppConnectorGroupServerGroup"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "siemAppConnectorGroup": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "upgradeDay": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "upgradeTimeInSecs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "versionProfileId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cityCountry",
                "connectors",
                "countryCode",
                "creationTime",
                "description",
                "dnsQueryType",
                "enabled",
                "geolocationId",
                "id",
                "latitude",
                "location",
                "longitude",
                "modifiedTime",
                "modifiedby",
                "name",
                "serverGroups",
                "siemAppConnectorGroup",
                "upgradeDay",
                "upgradeTimeInSecs",
                "versionProfileId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getZPAServerGroupAppConnectorGroupConnector:getZPAServerGroupAppConnectorGroupConnector": {
            "properties": {
                "creationTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "(string) This field is the description of the server group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(bool) This field defines if the server group is enabled or disabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fingerprint": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the server group to be exported.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "issuedCertId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifiedTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifiedby": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the server group to be exported.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "upgradeAttempt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "creationTime",
                "description",
                "enabled",
                "fingerprint",
                "id",
                "issuedCertId",
                "modifiedTime",
                "modifiedby",
                "upgradeAttempt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getZPAServerGroupAppConnectorGroupServerGroup:getZPAServerGroupAppConnectorGroupServerGroup": {
            "properties": {
                "configSpace": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "creationTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "(string) This field is the description of the server group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dynamicDiscovery": {
                    "type": "boolean",
                    "description": "(bool) This field controls dynamic discovery of the servers.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(bool) This field defines if the server group is enabled or disabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the server group to be exported.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifiedTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifiedby": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the server group to be exported.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "configSpace",
                "creationTime",
                "description",
                "dynamicDiscovery",
                "enabled",
                "id",
                "modifiedTime",
                "modifiedby"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getZPAServerGroupApplication:getZPAServerGroupApplication": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the server group to be exported.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the server group to be exported.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getZPAServerGroupServer:getZPAServerGroupServer": {
            "properties": {
                "address": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "appServerGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "configSpace": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "creationTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "(string) This field is the description of the server group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(bool) This field defines if the server group is enabled or disabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the server group to be exported.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifiedTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifiedby": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the server group to be exported.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "address",
                "appServerGroupIds",
                "configSpace",
                "creationTime",
                "description",
                "enabled",
                "id",
                "modifiedTime",
                "modifiedby",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getZPAServiceEdgeGroupServiceEdge:getZPAServiceEdgeGroupServiceEdge": {
            "properties": {
                "applicationStartTime": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "controlChannelStatus": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "creationTime": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ctrlBrokerName": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "currentVersion": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "(string) Description of the Service Edge Group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(bool) Whether this App Connector Group is enabled or not. Default value: `true`. Supported values: `true`, `false`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enrollmentCert": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expectedUpgradeTime": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expectedVersion": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fingerprint": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the service edge group to be exported.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipacl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "issuedCertId": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastBrokerConnectTime": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastBrokerConnectTimeDuration": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastBrokerDisconnectTime": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastBrokerDisconnectTimeDuration": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastUpgradeTime": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "latitude": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "listenIps": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "location": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "longitude": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifiedTime": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifiedby": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service edge group to be exported.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "platform": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "previousVersion": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateIp": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "provisioningKeyId": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "provisioningKeyName": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicIp": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publishIps": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sargeVersion": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceEdgeGroupId": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceEdgeGroupName": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "upgradeAttempt": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "upgradeStatus": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "applicationStartTime",
                "controlChannelStatus",
                "creationTime",
                "ctrlBrokerName",
                "currentVersion",
                "description",
                "enabled",
                "enrollmentCert",
                "expectedUpgradeTime",
                "expectedVersion",
                "fingerprint",
                "id",
                "ipacl",
                "issuedCertId",
                "lastBrokerConnectTime",
                "lastBrokerConnectTimeDuration",
                "lastBrokerDisconnectTime",
                "lastBrokerDisconnectTimeDuration",
                "lastUpgradeTime",
                "latitude",
                "listenIps",
                "location",
                "longitude",
                "modifiedTime",
                "modifiedby",
                "name",
                "platform",
                "previousVersion",
                "privateIp",
                "provisioningKeyId",
                "provisioningKeyName",
                "publicIp",
                "publishIps",
                "sargeVersion",
                "serviceEdgeGroupId",
                "serviceEdgeGroupName",
                "upgradeAttempt",
                "upgradeStatus"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getZPAServiceEdgeGroupTrustedNetwork:getZPAServiceEdgeGroupTrustedNetwork": {
            "properties": {
                "creationTime": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "domain": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the service edge group to be exported.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "masterCustomerId": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifiedTime": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifiedby": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service edge group to be exported.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkId": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zscalerCloud": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "creationTime",
                "domain",
                "id",
                "masterCustomerId",
                "modifiedTime",
                "modifiedby",
                "name",
                "networkId",
                "zscalerCloud"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the zpa package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "zpaClientId": {
                "type": "string",
                "description": "zpa client id\n"
            },
            "zpaClientSecret": {
                "type": "string",
                "description": "zpa client secret\n",
                "secret": true
            },
            "zpaCloud": {
                "type": "string",
                "description": "Cloud to use PRODUCTION, BETA, GOV or PREVIEW\n"
            },
            "zpaCustomerId": {
                "type": "string",
                "description": "zpa customer id\n",
                "secret": true
            }
        },
        "inputProperties": {
            "zpaClientId": {
                "type": "string",
                "description": "zpa client id\n",
                "defaultInfo": {
                    "environment": [
                        "ZPA_CLIENT_ID"
                    ]
                }
            },
            "zpaClientSecret": {
                "type": "string",
                "description": "zpa client secret\n",
                "defaultInfo": {
                    "environment": [
                        "ZPA_CLIENT_SECRET"
                    ]
                },
                "secret": true
            },
            "zpaCloud": {
                "type": "string",
                "description": "Cloud to use PRODUCTION, BETA, GOV or PREVIEW\n",
                "defaultInfo": {
                    "environment": [
                        "ZPA_CLOUD"
                    ]
                }
            },
            "zpaCustomerId": {
                "type": "string",
                "description": "zpa customer id\n",
                "defaultInfo": {
                    "environment": [
                        "ZPA_CUSTOMER_ID"
                    ]
                },
                "secret": true
            }
        }
    },
    "resources": {
        "zpa:index/zPAAppConnectorGroup:ZPAAppConnectorGroup": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@zscaler/pulumi-zpa\";\n\n// Create a App Connector Group\nconst example = new zpa.ZPAAppConnectorGroup(\"example\", {\n    cityCountry: \"San Jose, CA\",\n    countryCode: \"US\",\n    description: \"Example\",\n    dnsQueryType: \"IPV4_IPV6\",\n    enabled: true,\n    latitude: \"37.338\",\n    location: \"San Jose, CA, US\",\n    longitude: \"-121.8863\",\n    overrideVersionProfile: true,\n    upgradeDay: \"SUNDAY\",\n    upgradeTimeInSecs: \"66600\",\n    versionProfileName: \"New Release\",\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zpa as zpa\n\n# Create a App Connector Group\nexample = zpa.ZPAAppConnectorGroup(\"example\",\n    city_country=\"San Jose, CA\",\n    country_code=\"US\",\n    description=\"Example\",\n    dns_query_type=\"IPV4_IPV6\",\n    enabled=True,\n    latitude=\"37.338\",\n    location=\"San Jose, CA, US\",\n    longitude=\"-121.8863\",\n    override_version_profile=True,\n    upgrade_day=\"SUNDAY\",\n    upgrade_time_in_secs=\"66600\",\n    version_profile_name=\"New Release\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = zscaler.PulumiPackage.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a App Connector Group\n    var example = new Zpa.ZPAAppConnectorGroup(\"example\", new()\n    {\n        CityCountry = \"San Jose, CA\",\n        CountryCode = \"US\",\n        Description = \"Example\",\n        DnsQueryType = \"IPV4_IPV6\",\n        Enabled = true,\n        Latitude = \"37.338\",\n        Location = \"San Jose, CA, US\",\n        Longitude = \"-121.8863\",\n        OverrideVersionProfile = true,\n        UpgradeDay = \"SUNDAY\",\n        UpgradeTimeInSecs = \"66600\",\n        VersionProfileName = \"New Release\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.NewZPAAppConnectorGroup(ctx, \"example\", \u0026zpa.ZPAAppConnectorGroupArgs{\n\t\t\tCityCountry:            pulumi.String(\"San Jose, CA\"),\n\t\t\tCountryCode:            pulumi.String(\"US\"),\n\t\t\tDescription:            pulumi.String(\"Example\"),\n\t\t\tDnsQueryType:           pulumi.String(\"IPV4_IPV6\"),\n\t\t\tEnabled:                pulumi.Bool(true),\n\t\t\tLatitude:               pulumi.String(\"37.338\"),\n\t\t\tLocation:               pulumi.String(\"San Jose, CA, US\"),\n\t\t\tLongitude:              pulumi.String(\"-121.8863\"),\n\t\t\tOverrideVersionProfile: pulumi.Bool(true),\n\t\t\tUpgradeDay:             pulumi.String(\"SUNDAY\"),\n\t\t\tUpgradeTimeInSecs:      pulumi.String(\"66600\"),\n\t\t\tVersionProfileName:     pulumi.String(\"New Release\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZPAAppConnectorGroup;\nimport com.pulumi.zpa.ZPAAppConnectorGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ZPAAppConnectorGroup(\"example\", ZPAAppConnectorGroupArgs.builder()        \n            .cityCountry(\"San Jose, CA\")\n            .countryCode(\"US\")\n            .description(\"Example\")\n            .dnsQueryType(\"IPV4_IPV6\")\n            .enabled(true)\n            .latitude(\"37.338\")\n            .location(\"San Jose, CA, US\")\n            .longitude(\"-121.8863\")\n            .overrideVersionProfile(true)\n            .upgradeDay(\"SUNDAY\")\n            .upgradeTimeInSecs(\"66600\")\n            .versionProfileName(\"New Release\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a App Connector Group\n  example:\n    type: zpa:ZPAAppConnectorGroup\n    properties:\n      cityCountry: San Jose, CA\n      countryCode: US\n      description: Example\n      dnsQueryType: IPV4_IPV6\n      enabled: true\n      latitude: '37.338'\n      location: San Jose, CA, US\n      longitude: '-121.8863'\n      overrideVersionProfile: true\n      upgradeDay: SUNDAY\n      upgradeTimeInSecs: '66600'\n      versionProfileName: New Release\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language. [Visit](https://github.com/zscaler/zscaler-terraformer) App Connector Group can be imported by using `\u003cAPP CONNECTOR GROUP ID\u003e` or `\u003cAPP CONNECTOR GROUP NAME\u003e`as the import ID.\n\n```sh\n $ pulumi import zpa:index/zPAAppConnectorGroup:ZPAAppConnectorGroup example \u003capp_connector_group_id\u003e\n```\n\n or\n\n```sh\n $ pulumi import zpa:index/zPAAppConnectorGroup:ZPAAppConnectorGroup example \u003capp_connector_group_name\u003e\n```\n\n ",
            "properties": {
                "cityCountry": {
                    "type": "string",
                    "description": "Whether Double Encryption is enabled or disabled for the app. i.e ``\"San Jose, US\"``\n"
                },
                "countryCode": {
                    "type": "string",
                    "description": "i.e ``\"US\"``, ``\"CA\"``\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the App Connector Group.\n"
                },
                "dnsQueryType": {
                    "type": "string",
                    "description": "Supported values are:\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether this App Connector Group is enabled or not. Default value: `true`. Supported values: `true`, `false`\n"
                },
                "latitude": {
                    "type": "string",
                    "description": "Latitude of the App Connector Group. Integer or decimal. With values in the range of `-90` to `90`\n"
                },
                "location": {
                    "type": "string",
                    "description": "Location of the App Connector Group. i.e ``\"San Jose, CA, USA\"``\n"
                },
                "longitude": {
                    "type": "string",
                    "description": "Longitude of the App Connector Group. Integer or decimal. With values in the range of `-180` to `180`\n"
                },
                "lssAppConnectorGroup": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the App Connector Group.\n"
                },
                "overrideVersionProfile": {
                    "type": "boolean",
                    "description": "Whether the default version profile of the App Connector Group is applied or overridden. Default: `false` Supported values: `true`, `false`\n"
                },
                "tcpQuickAckApp": {
                    "type": "boolean",
                    "description": "Whether TCP Quick Acknowledgement is enabled or disabled for the application. The tcpQuickAckApp, tcpQuickAckAssistant, and tcpQuickAckReadAssistant fields must all share the same value. Supported values: `true`, `false`\n"
                },
                "tcpQuickAckAssistant": {
                    "type": "boolean",
                    "description": "Whether TCP Quick Acknowledgement is enabled or disabled for the application. The tcpQuickAckApp, tcpQuickAckAssistant, and tcpQuickAckReadAssistant fields must all share the same value. Supported values: `true`, `false`\n"
                },
                "tcpQuickAckReadAssistant": {
                    "type": "boolean",
                    "description": "Whether TCP Quick Acknowledgement is enabled or disabled for the application. The tcpQuickAckApp, tcpQuickAckAssistant, and tcpQuickAckReadAssistant fields must all share the same value. Supported values: `true`, `false`\n"
                },
                "upgradeDay": {
                    "type": "string",
                    "description": "App Connectors in this group will attempt to update to a newer version of the software during this specified day i.e ``SUNDAY``\n"
                },
                "upgradeTimeInSecs": {
                    "type": "string",
                    "description": "App Connectors in this group will attempt to update to a newer version of the software during this specified time. Default value: `66600`. Integer in seconds (i.e., `-66600`). The integer should be greater than or equal to `0` and less than `86400`, in `15` minute intervals\n"
                },
                "useInDrMode": {
                    "type": "boolean",
                    "description": "Supported values: `true`, `false`\n"
                },
                "versionProfileId": {
                    "type": "string",
                    "description": "ID of the version profile. To learn more, see Version Profile Use Cases. Supported values are:\n"
                },
                "versionProfileName": {
                    "type": "string",
                    "description": "Name of the version profile. To learn more, see Version Profile Use Cases. This value is required, if the value for\noverrideVersionProfile is set to true\n"
                }
            },
            "required": [
                "cityCountry",
                "countryCode",
                "enabled",
                "latitude",
                "location",
                "longitude",
                "lssAppConnectorGroup",
                "name",
                "overrideVersionProfile",
                "tcpQuickAckApp",
                "tcpQuickAckAssistant",
                "tcpQuickAckReadAssistant",
                "useInDrMode",
                "versionProfileId",
                "versionProfileName"
            ],
            "inputProperties": {
                "cityCountry": {
                    "type": "string",
                    "description": "Whether Double Encryption is enabled or disabled for the app. i.e ``\"San Jose, US\"``\n"
                },
                "countryCode": {
                    "type": "string",
                    "description": "i.e ``\"US\"``, ``\"CA\"``\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the App Connector Group.\n"
                },
                "dnsQueryType": {
                    "type": "string",
                    "description": "Supported values are:\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether this App Connector Group is enabled or not. Default value: `true`. Supported values: `true`, `false`\n"
                },
                "latitude": {
                    "type": "string",
                    "description": "Latitude of the App Connector Group. Integer or decimal. With values in the range of `-90` to `90`\n"
                },
                "location": {
                    "type": "string",
                    "description": "Location of the App Connector Group. i.e ``\"San Jose, CA, USA\"``\n"
                },
                "longitude": {
                    "type": "string",
                    "description": "Longitude of the App Connector Group. Integer or decimal. With values in the range of `-180` to `180`\n"
                },
                "lssAppConnectorGroup": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the App Connector Group.\n"
                },
                "overrideVersionProfile": {
                    "type": "boolean",
                    "description": "Whether the default version profile of the App Connector Group is applied or overridden. Default: `false` Supported values: `true`, `false`\n"
                },
                "tcpQuickAckApp": {
                    "type": "boolean",
                    "description": "Whether TCP Quick Acknowledgement is enabled or disabled for the application. The tcpQuickAckApp, tcpQuickAckAssistant, and tcpQuickAckReadAssistant fields must all share the same value. Supported values: `true`, `false`\n"
                },
                "tcpQuickAckAssistant": {
                    "type": "boolean",
                    "description": "Whether TCP Quick Acknowledgement is enabled or disabled for the application. The tcpQuickAckApp, tcpQuickAckAssistant, and tcpQuickAckReadAssistant fields must all share the same value. Supported values: `true`, `false`\n"
                },
                "tcpQuickAckReadAssistant": {
                    "type": "boolean",
                    "description": "Whether TCP Quick Acknowledgement is enabled or disabled for the application. The tcpQuickAckApp, tcpQuickAckAssistant, and tcpQuickAckReadAssistant fields must all share the same value. Supported values: `true`, `false`\n"
                },
                "upgradeDay": {
                    "type": "string",
                    "description": "App Connectors in this group will attempt to update to a newer version of the software during this specified day i.e ``SUNDAY``\n"
                },
                "upgradeTimeInSecs": {
                    "type": "string",
                    "description": "App Connectors in this group will attempt to update to a newer version of the software during this specified time. Default value: `66600`. Integer in seconds (i.e., `-66600`). The integer should be greater than or equal to `0` and less than `86400`, in `15` minute intervals\n"
                },
                "useInDrMode": {
                    "type": "boolean",
                    "description": "Supported values: `true`, `false`\n"
                },
                "versionProfileId": {
                    "type": "string",
                    "description": "ID of the version profile. To learn more, see Version Profile Use Cases. Supported values are:\n"
                },
                "versionProfileName": {
                    "type": "string",
                    "description": "Name of the version profile. To learn more, see Version Profile Use Cases. This value is required, if the value for\noverrideVersionProfile is set to true\n"
                }
            },
            "requiredInputs": [
                "latitude",
                "location",
                "longitude"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ZPAAppConnectorGroup resources.\n",
                "properties": {
                    "cityCountry": {
                        "type": "string",
                        "description": "Whether Double Encryption is enabled or disabled for the app. i.e ``\"San Jose, US\"``\n"
                    },
                    "countryCode": {
                        "type": "string",
                        "description": "i.e ``\"US\"``, ``\"CA\"``\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the App Connector Group.\n"
                    },
                    "dnsQueryType": {
                        "type": "string",
                        "description": "Supported values are:\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether this App Connector Group is enabled or not. Default value: `true`. Supported values: `true`, `false`\n"
                    },
                    "latitude": {
                        "type": "string",
                        "description": "Latitude of the App Connector Group. Integer or decimal. With values in the range of `-90` to `90`\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "Location of the App Connector Group. i.e ``\"San Jose, CA, USA\"``\n"
                    },
                    "longitude": {
                        "type": "string",
                        "description": "Longitude of the App Connector Group. Integer or decimal. With values in the range of `-180` to `180`\n"
                    },
                    "lssAppConnectorGroup": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the App Connector Group.\n"
                    },
                    "overrideVersionProfile": {
                        "type": "boolean",
                        "description": "Whether the default version profile of the App Connector Group is applied or overridden. Default: `false` Supported values: `true`, `false`\n"
                    },
                    "tcpQuickAckApp": {
                        "type": "boolean",
                        "description": "Whether TCP Quick Acknowledgement is enabled or disabled for the application. The tcpQuickAckApp, tcpQuickAckAssistant, and tcpQuickAckReadAssistant fields must all share the same value. Supported values: `true`, `false`\n"
                    },
                    "tcpQuickAckAssistant": {
                        "type": "boolean",
                        "description": "Whether TCP Quick Acknowledgement is enabled or disabled for the application. The tcpQuickAckApp, tcpQuickAckAssistant, and tcpQuickAckReadAssistant fields must all share the same value. Supported values: `true`, `false`\n"
                    },
                    "tcpQuickAckReadAssistant": {
                        "type": "boolean",
                        "description": "Whether TCP Quick Acknowledgement is enabled or disabled for the application. The tcpQuickAckApp, tcpQuickAckAssistant, and tcpQuickAckReadAssistant fields must all share the same value. Supported values: `true`, `false`\n"
                    },
                    "upgradeDay": {
                        "type": "string",
                        "description": "App Connectors in this group will attempt to update to a newer version of the software during this specified day i.e ``SUNDAY``\n"
                    },
                    "upgradeTimeInSecs": {
                        "type": "string",
                        "description": "App Connectors in this group will attempt to update to a newer version of the software during this specified time. Default value: `66600`. Integer in seconds (i.e., `-66600`). The integer should be greater than or equal to `0` and less than `86400`, in `15` minute intervals\n"
                    },
                    "useInDrMode": {
                        "type": "boolean",
                        "description": "Supported values: `true`, `false`\n"
                    },
                    "versionProfileId": {
                        "type": "string",
                        "description": "ID of the version profile. To learn more, see Version Profile Use Cases. Supported values are:\n"
                    },
                    "versionProfileName": {
                        "type": "string",
                        "description": "Name of the version profile. To learn more, see Version Profile Use Cases. This value is required, if the value for\noverrideVersionProfile is set to true\n"
                    }
                },
                "type": "object"
            }
        },
        "zpa:index/zPAApplicationSegment:ZPAApplicationSegment": {
            "description": "\n\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language. [Visit](https://github.com/zscaler/zscaler-terraformer) Application Segment can be imported by using `\u003cAPPLICATION SEGMENT ID\u003e` or `\u003cAPPLICATION SEGMENT NAME\u003e` as the import ID.\n\n```sh\n $ pulumi import zpa:index/zPAApplicationSegment:ZPAApplicationSegment example \u003capplication_segment_id\u003e\n```\n\n or\n\n```sh\n $ pulumi import zpa:index/zPAApplicationSegment:ZPAApplicationSegment example \u003capplication_segment_name\u003e\n```\n\n ",
            "properties": {
                "bypassType": {
                    "type": "string",
                    "description": "(Optional) Indicates whether users can bypass ZPA to access applications.\n"
                },
                "configSpace": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "defaultIdleTimeout": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "(Optional) Description of the application.\n"
                },
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of domains and IPs.\n"
                },
                "doubleEncrypt": {
                    "type": "boolean",
                    "description": "(Optional) Whether Double Encryption is enabled or disabled for the app.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(Optional) Whether this application is enabled or not.\n"
                },
                "healthCheckType": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "healthReporting": {
                    "type": "string",
                    "description": "(Optional) Whether health reporting for the app is Continuous or On Access. Supported values: `NONE`, `ON_ACCESS`, `CONTINUOUS`.\n"
                },
                "icmpAccessType": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "ipAnchored": {
                    "type": "boolean",
                    "description": "(Optional)\n"
                },
                "isCnameEnabled": {
                    "type": "boolean",
                    "description": "(Optional) Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name. The name of the App Connector Group to be exported.\n"
                },
                "passiveHealthEnabled": {
                    "type": "boolean",
                    "description": "(Optional)\n"
                },
                "segmentGroupId": {
                    "type": "string",
                    "description": "List of Segment Group IDs\n"
                },
                "segmentGroupName": {
                    "type": "string"
                },
                "serverGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPAApplicationSegmentServerGroup:ZPAApplicationSegmentServerGroup"
                    },
                    "description": "List of Server Group IDs\n"
                },
                "tcpPortRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "TCP port ranges used to access the app.\n"
                },
                "udpPortRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "UDP port ranges used to access the app.\n"
                }
            },
            "required": [
                "bypassType",
                "defaultIdleTimeout",
                "domainNames",
                "isCnameEnabled",
                "name",
                "passiveHealthEnabled",
                "segmentGroupId",
                "segmentGroupName",
                "serverGroups",
                "tcpPortRanges",
                "tcpPortRanges",
                "udpPortRanges",
                "udpPortRanges"
            ],
            "inputProperties": {
                "bypassType": {
                    "type": "string",
                    "description": "(Optional) Indicates whether users can bypass ZPA to access applications.\n"
                },
                "configSpace": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "defaultIdleTimeout": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "(Optional) Description of the application.\n"
                },
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of domains and IPs.\n"
                },
                "doubleEncrypt": {
                    "type": "boolean",
                    "description": "(Optional) Whether Double Encryption is enabled or disabled for the app.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(Optional) Whether this application is enabled or not.\n"
                },
                "healthCheckType": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "healthReporting": {
                    "type": "string",
                    "description": "(Optional) Whether health reporting for the app is Continuous or On Access. Supported values: `NONE`, `ON_ACCESS`, `CONTINUOUS`.\n"
                },
                "icmpAccessType": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "ipAnchored": {
                    "type": "boolean",
                    "description": "(Optional)\n"
                },
                "isCnameEnabled": {
                    "type": "boolean",
                    "description": "(Optional) Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name. The name of the App Connector Group to be exported.\n"
                },
                "passiveHealthEnabled": {
                    "type": "boolean",
                    "description": "(Optional)\n"
                },
                "segmentGroupId": {
                    "type": "string",
                    "description": "List of Segment Group IDs\n"
                },
                "segmentGroupName": {
                    "type": "string"
                },
                "serverGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPAApplicationSegmentServerGroup:ZPAApplicationSegmentServerGroup"
                    },
                    "description": "List of Server Group IDs\n"
                },
                "tcpPortRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "TCP port ranges used to access the app.\n"
                },
                "udpPortRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "UDP port ranges used to access the app.\n"
                }
            },
            "requiredInputs": [
                "domainNames",
                "serverGroups"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ZPAApplicationSegment resources.\n",
                "properties": {
                    "bypassType": {
                        "type": "string",
                        "description": "(Optional) Indicates whether users can bypass ZPA to access applications.\n"
                    },
                    "configSpace": {
                        "type": "string",
                        "description": "(Optional)\n"
                    },
                    "defaultIdleTimeout": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "(Optional) Description of the application.\n"
                    },
                    "domainNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of domains and IPs.\n"
                    },
                    "doubleEncrypt": {
                        "type": "boolean",
                        "description": "(Optional) Whether Double Encryption is enabled or disabled for the app.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(Optional) Whether this application is enabled or not.\n"
                    },
                    "healthCheckType": {
                        "type": "string",
                        "description": "(Optional)\n"
                    },
                    "healthReporting": {
                        "type": "string",
                        "description": "(Optional) Whether health reporting for the app is Continuous or On Access. Supported values: `NONE`, `ON_ACCESS`, `CONTINUOUS`.\n"
                    },
                    "icmpAccessType": {
                        "type": "string",
                        "description": "(Optional)\n"
                    },
                    "ipAnchored": {
                        "type": "boolean",
                        "description": "(Optional)\n"
                    },
                    "isCnameEnabled": {
                        "type": "boolean",
                        "description": "(Optional) Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name. The name of the App Connector Group to be exported.\n"
                    },
                    "passiveHealthEnabled": {
                        "type": "boolean",
                        "description": "(Optional)\n"
                    },
                    "segmentGroupId": {
                        "type": "string",
                        "description": "List of Segment Group IDs\n"
                    },
                    "segmentGroupName": {
                        "type": "string"
                    },
                    "serverGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/ZPAApplicationSegmentServerGroup:ZPAApplicationSegmentServerGroup"
                        },
                        "description": "List of Server Group IDs\n"
                    },
                    "tcpPortRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "TCP port ranges used to access the app.\n"
                    },
                    "udpPortRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "UDP port ranges used to access the app.\n"
                    }
                },
                "type": "object"
            }
        },
        "zpa:index/zPAApplicationSegmentBrowserAccess:ZPAApplicationSegmentBrowserAccess": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\nimport * as zpa from \"@zscaler/pulumi-zpa\";\n\nconst testCert = zpa.getZPABaCertificate({\n    name: \"sales.acme.com\",\n});\n// ZPA Segment Group resource\nconst exampleZPASegmentGroup = new zpa.ZPASegmentGroup(\"exampleZPASegmentGroup\", {\n    description: \"Example\",\n    enabled: true,\n});\nconst exampleZPAAppConnectorGroup = zpa.getZPAAppConnectorGroup({\n    name: \"AWS-Connector\",\n});\n// ZPA Server Group resource\nconst exampleZPAServerGroup = new zpa.ZPAServerGroup(\"exampleZPAServerGroup\", {\n    description: \"Example\",\n    enabled: true,\n    dynamicDiscovery: true,\n    appConnectorGroups: [{\n        ids: [exampleZPAAppConnectorGroup.then(exampleZPAAppConnectorGroup =\u003e exampleZPAAppConnectorGroup.id)],\n    }],\n});\n// Create Browser Access Application\nconst browserAccessApps = new zpa.ZPAApplicationSegmentBrowserAccess(\"browserAccessApps\", {\n    description: \"Browser Access Apps\",\n    enabled: true,\n    healthReporting: \"ON_ACCESS\",\n    bypassType: \"NEVER\",\n    tcpPortRanges: [\n        \"80\",\n        \"80\",\n    ],\n    domainNames: [\"sales.acme.com\"],\n    segmentGroupId: exampleZPASegmentGroup.id,\n    clientlessApps: [{\n        name: \"sales.acme.com\",\n        applicationProtocol: \"HTTP\",\n        applicationPort: \"80\",\n        certificateId: testCert.then(testCert =\u003e testCert.id),\n        trustUntrustedCert: true,\n        enabled: true,\n        domain: \"sales.acme.com\",\n    }],\n    serverGroups: [{\n        ids: [exampleZPAServerGroup.id],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\nimport zscaler_pulumi_zpa as zpa\n\ntest_cert = zpa.get_zpa_ba_certificate(name=\"sales.acme.com\")\n# ZPA Segment Group resource\nexample_zpa_segment_group = zpa.ZPASegmentGroup(\"exampleZPASegmentGroup\",\n    description=\"Example\",\n    enabled=True)\nexample_zpa_app_connector_group = zpa.get_zpa_app_connector_group(name=\"AWS-Connector\")\n# ZPA Server Group resource\nexample_zpa_server_group = zpa.ZPAServerGroup(\"exampleZPAServerGroup\",\n    description=\"Example\",\n    enabled=True,\n    dynamic_discovery=True,\n    app_connector_groups=[zpa.ZPAServerGroupAppConnectorGroupArgs(\n        ids=[example_zpa_app_connector_group.id],\n    )])\n# Create Browser Access Application\nbrowser_access_apps = zpa.ZPAApplicationSegmentBrowserAccess(\"browserAccessApps\",\n    description=\"Browser Access Apps\",\n    enabled=True,\n    health_reporting=\"ON_ACCESS\",\n    bypass_type=\"NEVER\",\n    tcp_port_ranges=[\n        \"80\",\n        \"80\",\n    ],\n    domain_names=[\"sales.acme.com\"],\n    segment_group_id=example_zpa_segment_group.id,\n    clientless_apps=[zpa.ZPAApplicationSegmentBrowserAccessClientlessAppArgs(\n        name=\"sales.acme.com\",\n        application_protocol=\"HTTP\",\n        application_port=\"80\",\n        certificate_id=test_cert.id,\n        trust_untrusted_cert=True,\n        enabled=True,\n        domain=\"sales.acme.com\",\n    )],\n    server_groups=[zpa.ZPAApplicationSegmentBrowserAccessServerGroupArgs(\n        ids=[example_zpa_server_group.id],\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\nusing Zpa = zscaler.PulumiPackage.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testCert = Zpa.GetZPABaCertificate.Invoke(new()\n    {\n        Name = \"sales.acme.com\",\n    });\n\n    // ZPA Segment Group resource\n    var exampleZPASegmentGroup = new Zpa.ZPASegmentGroup(\"exampleZPASegmentGroup\", new()\n    {\n        Description = \"Example\",\n        Enabled = true,\n    });\n\n    var exampleZPAAppConnectorGroup = Zpa.GetZPAAppConnectorGroup.Invoke(new()\n    {\n        Name = \"AWS-Connector\",\n    });\n\n    // ZPA Server Group resource\n    var exampleZPAServerGroup = new Zpa.ZPAServerGroup(\"exampleZPAServerGroup\", new()\n    {\n        Description = \"Example\",\n        Enabled = true,\n        DynamicDiscovery = true,\n        AppConnectorGroups = new[]\n        {\n            new Zpa.Inputs.ZPAServerGroupAppConnectorGroupArgs\n            {\n                Ids = new[]\n                {\n                    exampleZPAAppConnectorGroup.Apply(getZPAAppConnectorGroupResult =\u003e getZPAAppConnectorGroupResult.Id),\n                },\n            },\n        },\n    });\n\n    // Create Browser Access Application\n    var browserAccessApps = new Zpa.ZPAApplicationSegmentBrowserAccess(\"browserAccessApps\", new()\n    {\n        Description = \"Browser Access Apps\",\n        Enabled = true,\n        HealthReporting = \"ON_ACCESS\",\n        BypassType = \"NEVER\",\n        TcpPortRanges = new[]\n        {\n            \"80\",\n            \"80\",\n        },\n        DomainNames = new[]\n        {\n            \"sales.acme.com\",\n        },\n        SegmentGroupId = exampleZPASegmentGroup.Id,\n        ClientlessApps = new[]\n        {\n            new Zpa.Inputs.ZPAApplicationSegmentBrowserAccessClientlessAppArgs\n            {\n                Name = \"sales.acme.com\",\n                ApplicationProtocol = \"HTTP\",\n                ApplicationPort = \"80\",\n                CertificateId = testCert.Apply(getZPABaCertificateResult =\u003e getZPABaCertificateResult.Id),\n                TrustUntrustedCert = true,\n                Enabled = true,\n                Domain = \"sales.acme.com\",\n            },\n        },\n        ServerGroups = new[]\n        {\n            new Zpa.Inputs.ZPAApplicationSegmentBrowserAccessServerGroupArgs\n            {\n                Ids = new[]\n                {\n                    exampleZPAServerGroup.Id,\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestCert, err := zpa.GetZPABaCertificate(ctx, \u0026zpa.GetZPABaCertificateArgs{\n\t\t\tName: pulumi.StringRef(\"sales.acme.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleZPASegmentGroup, err := zpa.NewZPASegmentGroup(ctx, \"exampleZPASegmentGroup\", \u0026zpa.ZPASegmentGroupArgs{\n\t\t\tDescription: pulumi.String(\"Example\"),\n\t\t\tEnabled:     pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleZPAAppConnectorGroup, err := zpa.LookupZPAAppConnectorGroup(ctx, \u0026zpa.LookupZPAAppConnectorGroupArgs{\n\t\t\tName: pulumi.StringRef(\"AWS-Connector\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleZPAServerGroup, err := zpa.NewZPAServerGroup(ctx, \"exampleZPAServerGroup\", \u0026zpa.ZPAServerGroupArgs{\n\t\t\tDescription:      pulumi.String(\"Example\"),\n\t\t\tEnabled:          pulumi.Bool(true),\n\t\t\tDynamicDiscovery: pulumi.Bool(true),\n\t\t\tAppConnectorGroups: zpa.ZPAServerGroupAppConnectorGroupArray{\n\t\t\t\t\u0026zpa.ZPAServerGroupAppConnectorGroupArgs{\n\t\t\t\t\tIds: pulumi.StringArray{\n\t\t\t\t\t\t*pulumi.String(exampleZPAAppConnectorGroup.Id),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = zpa.NewZPAApplicationSegmentBrowserAccess(ctx, \"browserAccessApps\", \u0026zpa.ZPAApplicationSegmentBrowserAccessArgs{\n\t\t\tDescription:     pulumi.String(\"Browser Access Apps\"),\n\t\t\tEnabled:         pulumi.Bool(true),\n\t\t\tHealthReporting: pulumi.String(\"ON_ACCESS\"),\n\t\t\tBypassType:      pulumi.String(\"NEVER\"),\n\t\t\tTcpPortRanges: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"80\"),\n\t\t\t\tpulumi.String(\"80\"),\n\t\t\t},\n\t\t\tDomainNames: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"sales.acme.com\"),\n\t\t\t},\n\t\t\tSegmentGroupId: exampleZPASegmentGroup.ID(),\n\t\t\tClientlessApps: zpa.ZPAApplicationSegmentBrowserAccessClientlessAppArray{\n\t\t\t\t\u0026zpa.ZPAApplicationSegmentBrowserAccessClientlessAppArgs{\n\t\t\t\t\tName:                pulumi.String(\"sales.acme.com\"),\n\t\t\t\t\tApplicationProtocol: pulumi.String(\"HTTP\"),\n\t\t\t\t\tApplicationPort:     pulumi.String(\"80\"),\n\t\t\t\t\tCertificateId:       *pulumi.String(testCert.Id),\n\t\t\t\t\tTrustUntrustedCert:  pulumi.Bool(true),\n\t\t\t\t\tEnabled:             pulumi.Bool(true),\n\t\t\t\t\tDomain:              pulumi.String(\"sales.acme.com\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tServerGroups: zpa.ZPAApplicationSegmentBrowserAccessServerGroupArray{\n\t\t\t\t\u0026zpa.ZPAApplicationSegmentBrowserAccessServerGroupArgs{\n\t\t\t\t\tIds: pulumi.StringArray{\n\t\t\t\t\t\texampleZPAServerGroup.ID(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPABaCertificateArgs;\nimport com.pulumi.zpa.ZPASegmentGroup;\nimport com.pulumi.zpa.ZPASegmentGroupArgs;\nimport com.pulumi.zpa.inputs.GetZPAAppConnectorGroupArgs;\nimport com.pulumi.zpa.ZPAServerGroup;\nimport com.pulumi.zpa.ZPAServerGroupArgs;\nimport com.pulumi.zpa.inputs.ZPAServerGroupAppConnectorGroupArgs;\nimport com.pulumi.zpa.ZPAApplicationSegmentBrowserAccess;\nimport com.pulumi.zpa.ZPAApplicationSegmentBrowserAccessArgs;\nimport com.pulumi.zpa.inputs.ZPAApplicationSegmentBrowserAccessClientlessAppArgs;\nimport com.pulumi.zpa.inputs.ZPAApplicationSegmentBrowserAccessServerGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var testCert = ZpaFunctions.getZPABaCertificate(GetZPABaCertificateArgs.builder()\n            .name(\"sales.acme.com\")\n            .build());\n\n        var exampleZPASegmentGroup = new ZPASegmentGroup(\"exampleZPASegmentGroup\", ZPASegmentGroupArgs.builder()        \n            .description(\"Example\")\n            .enabled(true)\n            .build());\n\n        final var exampleZPAAppConnectorGroup = ZpaFunctions.getZPAAppConnectorGroup(GetZPAAppConnectorGroupArgs.builder()\n            .name(\"AWS-Connector\")\n            .build());\n\n        var exampleZPAServerGroup = new ZPAServerGroup(\"exampleZPAServerGroup\", ZPAServerGroupArgs.builder()        \n            .description(\"Example\")\n            .enabled(true)\n            .dynamicDiscovery(true)\n            .appConnectorGroups(ZPAServerGroupAppConnectorGroupArgs.builder()\n                .ids(exampleZPAAppConnectorGroup.applyValue(getZPAAppConnectorGroupResult -\u003e getZPAAppConnectorGroupResult.id()))\n                .build())\n            .build());\n\n        var browserAccessApps = new ZPAApplicationSegmentBrowserAccess(\"browserAccessApps\", ZPAApplicationSegmentBrowserAccessArgs.builder()        \n            .description(\"Browser Access Apps\")\n            .enabled(true)\n            .healthReporting(\"ON_ACCESS\")\n            .bypassType(\"NEVER\")\n            .tcpPortRanges(            \n                \"80\",\n                \"80\")\n            .domainNames(\"sales.acme.com\")\n            .segmentGroupId(exampleZPASegmentGroup.id())\n            .clientlessApps(ZPAApplicationSegmentBrowserAccessClientlessAppArgs.builder()\n                .name(\"sales.acme.com\")\n                .applicationProtocol(\"HTTP\")\n                .applicationPort(\"80\")\n                .certificateId(testCert.applyValue(getZPABaCertificateResult -\u003e getZPABaCertificateResult.id()))\n                .trustUntrustedCert(true)\n                .enabled(true)\n                .domain(\"sales.acme.com\")\n                .build())\n            .serverGroups(ZPAApplicationSegmentBrowserAccessServerGroupArgs.builder()\n                .ids(exampleZPAServerGroup.id())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create Browser Access Application\n  browserAccessApps:\n    type: zpa:ZPAApplicationSegmentBrowserAccess\n    properties:\n      description: Browser Access Apps\n      enabled: true\n      healthReporting: ON_ACCESS\n      bypassType: NEVER\n      tcpPortRanges:\n        - '80'\n        - '80'\n      domainNames:\n        - sales.acme.com\n      segmentGroupId: ${exampleZPASegmentGroup.id}\n      clientlessApps:\n        - name: sales.acme.com\n          applicationProtocol: HTTP\n          applicationPort: '80'\n          certificateId: ${testCert.id}\n          trustUntrustedCert: true\n          enabled: true\n          domain: sales.acme.com\n      serverGroups:\n        - ids:\n            - ${exampleZPAServerGroup.id}\n  # ZPA Segment Group resource\n  exampleZPASegmentGroup:\n    type: zpa:ZPASegmentGroup\n    properties:\n      description: Example\n      enabled: true\n  # ZPA Server Group resource\n  exampleZPAServerGroup:\n    type: zpa:ZPAServerGroup\n    properties:\n      description: Example\n      enabled: true\n      dynamicDiscovery: true\n      appConnectorGroups:\n        - ids:\n            - ${exampleZPAAppConnectorGroup.id}\nvariables:\n  testCert:\n    fn::invoke:\n      Function: zpa:getZPABaCertificate\n      Arguments:\n        name: sales.acme.com\n  exampleZPAAppConnectorGroup:\n    fn::invoke:\n      Function: zpa:getZPAAppConnectorGroup\n      Arguments:\n        name: AWS-Connector\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language. [Visit](https://github.com/zscaler/zscaler-terraformer) **zpa_application_segment_browser_access** Application Segment Browser Access can be imported by using \u003c`BROWSER ACCESS ID`\u003e or `\u003c\u003cBROWSER ACCESS NAME\u003e` as the import ID. For example\n\n```sh\n $ pulumi import zpa:index/zPAApplicationSegmentBrowserAccess:ZPAApplicationSegmentBrowserAccess example \u003cbrowser_access_id\u003e.\n```\n\n or\n\n```sh\n $ pulumi import zpa:index/zPAApplicationSegmentBrowserAccess:ZPAApplicationSegmentBrowserAccess example \u003cbrowser_access_name\u003e\n```\n\n ",
            "properties": {
                "bypassType": {
                    "type": "string",
                    "description": "(Optional) Indicates whether users can bypass ZPA to access applications. Default value is: `NEVER` and supported values are: `ALWAYS`, `NEVER` and `ON_NET`. The value `NEVER` indicates the use of the client forwarding policy.\n"
                },
                "clientlessApps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPAApplicationSegmentBrowserAccessClientlessApp:ZPAApplicationSegmentBrowserAccessClientlessApp"
                    }
                },
                "configSpace": {
                    "type": "string",
                    "description": "(Optional) Default: `DEFAULT`. Supported values: `DEFAULT`, `SIEM`\n"
                },
                "description": {
                    "type": "string",
                    "description": "(Optional) Description of the application.\n"
                },
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of domains and IPs.\n"
                },
                "doubleEncrypt": {
                    "type": "boolean",
                    "description": "(Optional) Whether Double Encryption is enabled or disabled for the app.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(Optional) - Whether this app is enabled or not.\n"
                },
                "healthCheckType": {
                    "type": "string",
                    "description": "(Optional) Default: `DEFAULT`. Supported values: `DEFAULT`, `NONE`\n"
                },
                "healthReporting": {
                    "type": "string",
                    "description": "(Optional) Whether health reporting for the app is Continuous or On Access. Supported values: `NONE`, `ON_ACCESS`, `CONTINUOUS`.\n"
                },
                "icmpAccessType": {
                    "type": "string"
                },
                "ipAnchored": {
                    "type": "boolean",
                    "description": "(Optional) - If Source IP Anchoring for use with ZIA, is enabled or disabled for the app. Supported values are `true` and `false`\n"
                },
                "isCnameEnabled": {
                    "type": "boolean",
                    "description": "(Optional) Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the application.\n"
                },
                "passiveHealthEnabled": {
                    "type": "boolean"
                },
                "segmentGroupId": {
                    "type": "string",
                    "description": "List of Segment Group IDs\n"
                },
                "segmentGroupName": {
                    "type": "string"
                },
                "serverGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPAApplicationSegmentBrowserAccessServerGroup:ZPAApplicationSegmentBrowserAccessServerGroup"
                    },
                    "description": "List of Server Group IDs\n"
                },
                "tcpPortRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "TCP port ranges used to access the app.\n"
                },
                "udpPortRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "UDP port ranges used to access the app.\n"
                }
            },
            "required": [
                "clientlessApps",
                "domainNames",
                "enabled",
                "healthCheckType",
                "healthReporting",
                "name",
                "passiveHealthEnabled",
                "segmentGroupId",
                "segmentGroupName",
                "serverGroups",
                "tcpPortRanges",
                "tcpPortRanges",
                "udpPortRanges",
                "udpPortRanges"
            ],
            "inputProperties": {
                "bypassType": {
                    "type": "string",
                    "description": "(Optional) Indicates whether users can bypass ZPA to access applications. Default value is: `NEVER` and supported values are: `ALWAYS`, `NEVER` and `ON_NET`. The value `NEVER` indicates the use of the client forwarding policy.\n"
                },
                "clientlessApps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPAApplicationSegmentBrowserAccessClientlessApp:ZPAApplicationSegmentBrowserAccessClientlessApp"
                    }
                },
                "configSpace": {
                    "type": "string",
                    "description": "(Optional) Default: `DEFAULT`. Supported values: `DEFAULT`, `SIEM`\n"
                },
                "description": {
                    "type": "string",
                    "description": "(Optional) Description of the application.\n"
                },
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of domains and IPs.\n"
                },
                "doubleEncrypt": {
                    "type": "boolean",
                    "description": "(Optional) Whether Double Encryption is enabled or disabled for the app.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(Optional) - Whether this app is enabled or not.\n"
                },
                "healthCheckType": {
                    "type": "string",
                    "description": "(Optional) Default: `DEFAULT`. Supported values: `DEFAULT`, `NONE`\n"
                },
                "healthReporting": {
                    "type": "string",
                    "description": "(Optional) Whether health reporting for the app is Continuous or On Access. Supported values: `NONE`, `ON_ACCESS`, `CONTINUOUS`.\n"
                },
                "icmpAccessType": {
                    "type": "string"
                },
                "ipAnchored": {
                    "type": "boolean",
                    "description": "(Optional) - If Source IP Anchoring for use with ZIA, is enabled or disabled for the app. Supported values are `true` and `false`\n"
                },
                "isCnameEnabled": {
                    "type": "boolean",
                    "description": "(Optional) Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the application.\n"
                },
                "passiveHealthEnabled": {
                    "type": "boolean"
                },
                "segmentGroupId": {
                    "type": "string",
                    "description": "List of Segment Group IDs\n"
                },
                "segmentGroupName": {
                    "type": "string"
                },
                "serverGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPAApplicationSegmentBrowserAccessServerGroup:ZPAApplicationSegmentBrowserAccessServerGroup"
                    },
                    "description": "List of Server Group IDs\n"
                },
                "tcpPortRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "TCP port ranges used to access the app.\n"
                },
                "udpPortRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "UDP port ranges used to access the app.\n"
                }
            },
            "requiredInputs": [
                "clientlessApps",
                "domainNames",
                "segmentGroupId",
                "serverGroups"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ZPAApplicationSegmentBrowserAccess resources.\n",
                "properties": {
                    "bypassType": {
                        "type": "string",
                        "description": "(Optional) Indicates whether users can bypass ZPA to access applications. Default value is: `NEVER` and supported values are: `ALWAYS`, `NEVER` and `ON_NET`. The value `NEVER` indicates the use of the client forwarding policy.\n"
                    },
                    "clientlessApps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/ZPAApplicationSegmentBrowserAccessClientlessApp:ZPAApplicationSegmentBrowserAccessClientlessApp"
                        }
                    },
                    "configSpace": {
                        "type": "string",
                        "description": "(Optional) Default: `DEFAULT`. Supported values: `DEFAULT`, `SIEM`\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(Optional) Description of the application.\n"
                    },
                    "domainNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of domains and IPs.\n"
                    },
                    "doubleEncrypt": {
                        "type": "boolean",
                        "description": "(Optional) Whether Double Encryption is enabled or disabled for the app.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(Optional) - Whether this app is enabled or not.\n"
                    },
                    "healthCheckType": {
                        "type": "string",
                        "description": "(Optional) Default: `DEFAULT`. Supported values: `DEFAULT`, `NONE`\n"
                    },
                    "healthReporting": {
                        "type": "string",
                        "description": "(Optional) Whether health reporting for the app is Continuous or On Access. Supported values: `NONE`, `ON_ACCESS`, `CONTINUOUS`.\n"
                    },
                    "icmpAccessType": {
                        "type": "string"
                    },
                    "ipAnchored": {
                        "type": "boolean",
                        "description": "(Optional) - If Source IP Anchoring for use with ZIA, is enabled or disabled for the app. Supported values are `true` and `false`\n"
                    },
                    "isCnameEnabled": {
                        "type": "boolean",
                        "description": "(Optional) Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the application.\n"
                    },
                    "passiveHealthEnabled": {
                        "type": "boolean"
                    },
                    "segmentGroupId": {
                        "type": "string",
                        "description": "List of Segment Group IDs\n"
                    },
                    "segmentGroupName": {
                        "type": "string"
                    },
                    "serverGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/ZPAApplicationSegmentBrowserAccessServerGroup:ZPAApplicationSegmentBrowserAccessServerGroup"
                        },
                        "description": "List of Server Group IDs\n"
                    },
                    "tcpPortRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "TCP port ranges used to access the app.\n"
                    },
                    "udpPortRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "UDP port ranges used to access the app.\n"
                    }
                },
                "type": "object"
            }
        },
        "zpa:index/zPAApplicationSegmentInspection:ZPAApplicationSegmentInspection": {
            "description": "The **zpa_application_segment_inspection** resource creates an inspection application segment in the Zscaler Private Access cloud. This resource can then be referenced in an access policy inspection rule. This resource supports Inspection for both `HTTP` and `HTTPS`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\nimport * as zpa from \"@zscaler/pulumi-zpa\";\n\nconst jenkins = zpa.getZPABaCertificate({\n    name: \"jenkins.securitygeek.io\",\n});\nconst _this = new zpa.ZPAApplicationSegmentInspection(\"this\", {\n    description: \"ZPA_Inspection_Example\",\n    enabled: true,\n    healthReporting: \"ON_ACCESS\",\n    bypassType: \"NEVER\",\n    isCnameEnabled: true,\n    tcpPortRanges: [\n        \"443\",\n        \"443\",\n    ],\n    domainNames: [\"jenkins.example.com\"],\n    segmentGroupId: zpa_segment_group[\"this\"].id,\n    serverGroups: [{\n        ids: [zpa_server_group[\"this\"].id],\n    }],\n    commonAppsDto: {\n        appsConfigs: [{\n            name: \"jenkins.example.com\",\n            domain: \"jenkins.example.com\",\n            applicationProtocol: \"HTTPS\",\n            applicationPort: \"443\",\n            certificateId: jenkins.then(jenkins =\u003e jenkins.id),\n            enabled: true,\n            appTypes: [\"INSPECT\"],\n        }],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\nimport zscaler_pulumi_zpa as zpa\n\njenkins = zpa.get_zpa_ba_certificate(name=\"jenkins.securitygeek.io\")\nthis = zpa.ZPAApplicationSegmentInspection(\"this\",\n    description=\"ZPA_Inspection_Example\",\n    enabled=True,\n    health_reporting=\"ON_ACCESS\",\n    bypass_type=\"NEVER\",\n    is_cname_enabled=True,\n    tcp_port_ranges=[\n        \"443\",\n        \"443\",\n    ],\n    domain_names=[\"jenkins.example.com\"],\n    segment_group_id=zpa_segment_group[\"this\"][\"id\"],\n    server_groups=[zpa.ZPAApplicationSegmentInspectionServerGroupArgs(\n        ids=[zpa_server_group[\"this\"][\"id\"]],\n    )],\n    common_apps_dto=zpa.ZPAApplicationSegmentInspectionCommonAppsDtoArgs(\n        apps_configs=[zpa.ZPAApplicationSegmentInspectionCommonAppsDtoAppsConfigArgs(\n            name=\"jenkins.example.com\",\n            domain=\"jenkins.example.com\",\n            application_protocol=\"HTTPS\",\n            application_port=\"443\",\n            certificate_id=jenkins.id,\n            enabled=True,\n            app_types=[\"INSPECT\"],\n        )],\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\nusing Zpa = zscaler.PulumiPackage.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var jenkins = Zpa.GetZPABaCertificate.Invoke(new()\n    {\n        Name = \"jenkins.securitygeek.io\",\n    });\n\n    var @this = new Zpa.ZPAApplicationSegmentInspection(\"this\", new()\n    {\n        Description = \"ZPA_Inspection_Example\",\n        Enabled = true,\n        HealthReporting = \"ON_ACCESS\",\n        BypassType = \"NEVER\",\n        IsCnameEnabled = true,\n        TcpPortRanges = new[]\n        {\n            \"443\",\n            \"443\",\n        },\n        DomainNames = new[]\n        {\n            \"jenkins.example.com\",\n        },\n        SegmentGroupId = zpa_segment_group.This.Id,\n        ServerGroups = new[]\n        {\n            new Zpa.Inputs.ZPAApplicationSegmentInspectionServerGroupArgs\n            {\n                Ids = new[]\n                {\n                    zpa_server_group.This.Id,\n                },\n            },\n        },\n        CommonAppsDto = new Zpa.Inputs.ZPAApplicationSegmentInspectionCommonAppsDtoArgs\n        {\n            AppsConfigs = new[]\n            {\n                new Zpa.Inputs.ZPAApplicationSegmentInspectionCommonAppsDtoAppsConfigArgs\n                {\n                    Name = \"jenkins.example.com\",\n                    Domain = \"jenkins.example.com\",\n                    ApplicationProtocol = \"HTTPS\",\n                    ApplicationPort = \"443\",\n                    CertificateId = jenkins.Apply(getZPABaCertificateResult =\u003e getZPABaCertificateResult.Id),\n                    Enabled = true,\n                    AppTypes = new[]\n                    {\n                        \"INSPECT\",\n                    },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tjenkins, err := zpa.GetZPABaCertificate(ctx, \u0026zpa.GetZPABaCertificateArgs{\n\t\t\tName: pulumi.StringRef(\"jenkins.securitygeek.io\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = zpa.NewZPAApplicationSegmentInspection(ctx, \"this\", \u0026zpa.ZPAApplicationSegmentInspectionArgs{\n\t\t\tDescription:     pulumi.String(\"ZPA_Inspection_Example\"),\n\t\t\tEnabled:         pulumi.Bool(true),\n\t\t\tHealthReporting: pulumi.String(\"ON_ACCESS\"),\n\t\t\tBypassType:      pulumi.String(\"NEVER\"),\n\t\t\tIsCnameEnabled:  pulumi.Bool(true),\n\t\t\tTcpPortRanges: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"443\"),\n\t\t\t\tpulumi.String(\"443\"),\n\t\t\t},\n\t\t\tDomainNames: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"jenkins.example.com\"),\n\t\t\t},\n\t\t\tSegmentGroupId: pulumi.Any(zpa_segment_group.This.Id),\n\t\t\tServerGroups: zpa.ZPAApplicationSegmentInspectionServerGroupArray{\n\t\t\t\t\u0026zpa.ZPAApplicationSegmentInspectionServerGroupArgs{\n\t\t\t\t\tIds: pulumi.StringArray{\n\t\t\t\t\t\tzpa_server_group.This.Id,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tCommonAppsDto: \u0026zpa.ZPAApplicationSegmentInspectionCommonAppsDtoArgs{\n\t\t\t\tAppsConfigs: zpa.ZPAApplicationSegmentInspectionCommonAppsDtoAppsConfigArray{\n\t\t\t\t\t\u0026zpa.ZPAApplicationSegmentInspectionCommonAppsDtoAppsConfigArgs{\n\t\t\t\t\t\tName:                pulumi.String(\"jenkins.example.com\"),\n\t\t\t\t\t\tDomain:              pulumi.String(\"jenkins.example.com\"),\n\t\t\t\t\t\tApplicationProtocol: pulumi.String(\"HTTPS\"),\n\t\t\t\t\t\tApplicationPort:     pulumi.String(\"443\"),\n\t\t\t\t\t\tCertificateId:       *pulumi.String(jenkins.Id),\n\t\t\t\t\t\tEnabled:             pulumi.Bool(true),\n\t\t\t\t\t\tAppTypes: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"INSPECT\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPABaCertificateArgs;\nimport com.pulumi.zpa.ZPAApplicationSegmentInspection;\nimport com.pulumi.zpa.ZPAApplicationSegmentInspectionArgs;\nimport com.pulumi.zpa.inputs.ZPAApplicationSegmentInspectionServerGroupArgs;\nimport com.pulumi.zpa.inputs.ZPAApplicationSegmentInspectionCommonAppsDtoArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var jenkins = ZpaFunctions.getZPABaCertificate(GetZPABaCertificateArgs.builder()\n            .name(\"jenkins.securitygeek.io\")\n            .build());\n\n        var this_ = new ZPAApplicationSegmentInspection(\"this\", ZPAApplicationSegmentInspectionArgs.builder()        \n            .description(\"ZPA_Inspection_Example\")\n            .enabled(true)\n            .healthReporting(\"ON_ACCESS\")\n            .bypassType(\"NEVER\")\n            .isCnameEnabled(true)\n            .tcpPortRanges(            \n                \"443\",\n                \"443\")\n            .domainNames(\"jenkins.example.com\")\n            .segmentGroupId(zpa_segment_group.this().id())\n            .serverGroups(ZPAApplicationSegmentInspectionServerGroupArgs.builder()\n                .ids(zpa_server_group.this().id())\n                .build())\n            .commonAppsDto(ZPAApplicationSegmentInspectionCommonAppsDtoArgs.builder()\n                .appsConfigs(ZPAApplicationSegmentInspectionCommonAppsDtoAppsConfigArgs.builder()\n                    .name(\"jenkins.example.com\")\n                    .domain(\"jenkins.example.com\")\n                    .applicationProtocol(\"HTTPS\")\n                    .applicationPort(\"443\")\n                    .certificateId(jenkins.applyValue(getZPABaCertificateResult -\u003e getZPABaCertificateResult.id()))\n                    .enabled(true)\n                    .appTypes(\"INSPECT\")\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  this:\n    type: zpa:ZPAApplicationSegmentInspection\n    properties:\n      description: ZPA_Inspection_Example\n      enabled: true\n      healthReporting: ON_ACCESS\n      bypassType: NEVER\n      isCnameEnabled: true\n      tcpPortRanges:\n        - '443'\n        - '443'\n      domainNames:\n        - jenkins.example.com\n      segmentGroupId: ${zpa_segment_group.this.id}\n      serverGroups:\n        - ids:\n            - ${zpa_server_group.this.id}\n      commonAppsDto:\n        appsConfigs:\n          - name: jenkins.example.com\n            domain: jenkins.example.com\n            applicationProtocol: HTTPS\n            applicationPort: '443'\n            certificateId: ${jenkins.id}\n            enabled: true\n            appTypes:\n              - INSPECT\nvariables:\n  jenkins:\n    fn::invoke:\n      Function: zpa:getZPABaCertificate\n      Arguments:\n        name: jenkins.securitygeek.io\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language. [Visit](https://github.com/zscaler/zscaler-terraformer) Inspection Application Segment can be imported by using `\u003cAPPLICATION SEGMENT ID\u003e` or `\u003cAPPLICATION SEGMENT NAME\u003e` as the import ID.\n\n```sh\n $ pulumi import zpa:index/zPAApplicationSegmentInspection:ZPAApplicationSegmentInspection example \u003capplication_segment_id\u003e\n```\n\n or\n\n```sh\n $ pulumi import zpa:index/zPAApplicationSegmentInspection:ZPAApplicationSegmentInspection example \u003capplication_segment_name\u003e\n```\n\n ",
            "properties": {
                "bypassType": {
                    "type": "string",
                    "description": "(Optional) Indicates whether users can bypass ZPA to access applications.\n"
                },
                "commonAppsDto": {
                    "$ref": "#/types/zpa:index/ZPAApplicationSegmentInspectionCommonAppsDto:ZPAApplicationSegmentInspectionCommonAppsDto",
                    "description": "List of applications (e.g., Inspection, Browser Access or Privileged Remote Access)\n* `apps_config:` - (Required) List of applications to be configured\n"
                },
                "configSpace": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "description": {
                    "type": "string",
                    "description": "(Optional) Description of the application.\n"
                },
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of domains and IPs.\n"
                },
                "doubleEncrypt": {
                    "type": "boolean",
                    "description": "(Optional) Whether Double Encryption is enabled or disabled for the app.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether this application is enabled or not\n"
                },
                "healthCheckType": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "healthReporting": {
                    "type": "string",
                    "description": "(Optional) Whether health reporting for the app is Continuous or On Access. Supported values: `NONE`, `ON_ACCESS`, `CONTINUOUS`.\n"
                },
                "icmpAccessType": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "ipAnchored": {
                    "type": "boolean",
                    "description": "(Optional)\n"
                },
                "isCnameEnabled": {
                    "type": "boolean",
                    "description": "(Optional) Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Inspection Application Segment.\n"
                },
                "passiveHealthEnabled": {
                    "type": "boolean",
                    "description": "(Optional)\n"
                },
                "segmentGroupId": {
                    "type": "string",
                    "description": "List of Segment Group IDs\n"
                },
                "segmentGroupName": {
                    "type": "string"
                },
                "serverGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPAApplicationSegmentInspectionServerGroup:ZPAApplicationSegmentInspectionServerGroup"
                    },
                    "description": "List of Server Group IDs\n"
                },
                "tcpPortRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "TCP port ranges used to access the app.\n"
                },
                "udpPortRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "UDP port ranges used to access the app.\n"
                }
            },
            "required": [
                "bypassType",
                "commonAppsDto",
                "domainNames",
                "doubleEncrypt",
                "enabled",
                "icmpAccessType",
                "ipAnchored",
                "isCnameEnabled",
                "name",
                "passiveHealthEnabled",
                "segmentGroupId",
                "segmentGroupName",
                "serverGroups",
                "tcpPortRanges",
                "tcpPortRanges",
                "udpPortRanges",
                "udpPortRanges"
            ],
            "inputProperties": {
                "bypassType": {
                    "type": "string",
                    "description": "(Optional) Indicates whether users can bypass ZPA to access applications.\n"
                },
                "commonAppsDto": {
                    "$ref": "#/types/zpa:index/ZPAApplicationSegmentInspectionCommonAppsDto:ZPAApplicationSegmentInspectionCommonAppsDto",
                    "description": "List of applications (e.g., Inspection, Browser Access or Privileged Remote Access)\n* `apps_config:` - (Required) List of applications to be configured\n"
                },
                "configSpace": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "description": {
                    "type": "string",
                    "description": "(Optional) Description of the application.\n"
                },
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of domains and IPs.\n"
                },
                "doubleEncrypt": {
                    "type": "boolean",
                    "description": "(Optional) Whether Double Encryption is enabled or disabled for the app.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether this application is enabled or not\n"
                },
                "healthCheckType": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "healthReporting": {
                    "type": "string",
                    "description": "(Optional) Whether health reporting for the app is Continuous or On Access. Supported values: `NONE`, `ON_ACCESS`, `CONTINUOUS`.\n"
                },
                "icmpAccessType": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "ipAnchored": {
                    "type": "boolean",
                    "description": "(Optional)\n"
                },
                "isCnameEnabled": {
                    "type": "boolean",
                    "description": "(Optional) Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Inspection Application Segment.\n"
                },
                "passiveHealthEnabled": {
                    "type": "boolean",
                    "description": "(Optional)\n"
                },
                "segmentGroupId": {
                    "type": "string",
                    "description": "List of Segment Group IDs\n"
                },
                "segmentGroupName": {
                    "type": "string"
                },
                "serverGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPAApplicationSegmentInspectionServerGroup:ZPAApplicationSegmentInspectionServerGroup"
                    },
                    "description": "List of Server Group IDs\n"
                },
                "tcpPortRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "TCP port ranges used to access the app.\n"
                },
                "udpPortRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "UDP port ranges used to access the app.\n"
                }
            },
            "requiredInputs": [
                "segmentGroupId",
                "serverGroups"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ZPAApplicationSegmentInspection resources.\n",
                "properties": {
                    "bypassType": {
                        "type": "string",
                        "description": "(Optional) Indicates whether users can bypass ZPA to access applications.\n"
                    },
                    "commonAppsDto": {
                        "$ref": "#/types/zpa:index/ZPAApplicationSegmentInspectionCommonAppsDto:ZPAApplicationSegmentInspectionCommonAppsDto",
                        "description": "List of applications (e.g., Inspection, Browser Access or Privileged Remote Access)\n* `apps_config:` - (Required) List of applications to be configured\n"
                    },
                    "configSpace": {
                        "type": "string",
                        "description": "(Optional)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(Optional) Description of the application.\n"
                    },
                    "domainNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of domains and IPs.\n"
                    },
                    "doubleEncrypt": {
                        "type": "boolean",
                        "description": "(Optional) Whether Double Encryption is enabled or disabled for the app.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether this application is enabled or not\n"
                    },
                    "healthCheckType": {
                        "type": "string",
                        "description": "(Optional)\n"
                    },
                    "healthReporting": {
                        "type": "string",
                        "description": "(Optional) Whether health reporting for the app is Continuous or On Access. Supported values: `NONE`, `ON_ACCESS`, `CONTINUOUS`.\n"
                    },
                    "icmpAccessType": {
                        "type": "string",
                        "description": "(Optional)\n"
                    },
                    "ipAnchored": {
                        "type": "boolean",
                        "description": "(Optional)\n"
                    },
                    "isCnameEnabled": {
                        "type": "boolean",
                        "description": "(Optional) Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Inspection Application Segment.\n"
                    },
                    "passiveHealthEnabled": {
                        "type": "boolean",
                        "description": "(Optional)\n"
                    },
                    "segmentGroupId": {
                        "type": "string",
                        "description": "List of Segment Group IDs\n"
                    },
                    "segmentGroupName": {
                        "type": "string"
                    },
                    "serverGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/ZPAApplicationSegmentInspectionServerGroup:ZPAApplicationSegmentInspectionServerGroup"
                        },
                        "description": "List of Server Group IDs\n"
                    },
                    "tcpPortRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "TCP port ranges used to access the app.\n"
                    },
                    "udpPortRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "UDP port ranges used to access the app.\n"
                    }
                },
                "type": "object"
            }
        },
        "zpa:index/zPAApplicationSegmentPRA:ZPAApplicationSegmentPRA": {
            "description": "The **zpa_application_segment_pra** resource creates an application segment for Privileged Remote Access in the Zscaler Private Access cloud. This resource can then be referenced in an access policy rule, access policy timeout rule, access policy client forwarding rule and inspection policy. This resource supports Privileged Remote Access for both `RDP` and `SSH`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@zscaler/pulumi-zpa\";\n\nconst _this = new zpa.ZPAApplicationSegmentPRA(\"this\", {\n    description: \"PRA_Example\",\n    enabled: true,\n    healthReporting: \"ON_ACCESS\",\n    bypassType: \"NEVER\",\n    isCnameEnabled: true,\n    tcpPortRanges: [\n        \"22\",\n        \"22\",\n        \"3389\",\n        \"3389\",\n    ],\n    domainNames: [\n        \"ssh_pra.example.com\",\n        \"rdp_pra.example.com\",\n    ],\n    segmentGroupId: zpa_segment_group[\"this\"].id,\n    serverGroups: [{\n        ids: [zpa_server_group[\"this\"].id],\n    }],\n    commonAppsDto: {\n        appsConfigs: [\n            {\n                name: \"ssh_pra\",\n                domain: \"ssh_pra.example.com\",\n                applicationProtocol: \"SSH\",\n                applicationPort: \"22\",\n                enabled: true,\n                appTypes: [\"SECURE_REMOTE_ACCESS\"],\n            },\n            {\n                name: \"rdp_pra\",\n                domain: \"rdp_pra.example.com\",\n                applicationProtocol: \"RDP\",\n                connectionSecurity: \"ANY\",\n                applicationPort: \"3389\",\n                enabled: true,\n                appTypes: [\"SECURE_REMOTE_ACCESS\"],\n            },\n        ],\n    },\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zpa as zpa\n\nthis = zpa.ZPAApplicationSegmentPRA(\"this\",\n    description=\"PRA_Example\",\n    enabled=True,\n    health_reporting=\"ON_ACCESS\",\n    bypass_type=\"NEVER\",\n    is_cname_enabled=True,\n    tcp_port_ranges=[\n        \"22\",\n        \"22\",\n        \"3389\",\n        \"3389\",\n    ],\n    domain_names=[\n        \"ssh_pra.example.com\",\n        \"rdp_pra.example.com\",\n    ],\n    segment_group_id=zpa_segment_group[\"this\"][\"id\"],\n    server_groups=[zpa.ZPAApplicationSegmentPRAServerGroupArgs(\n        ids=[zpa_server_group[\"this\"][\"id\"]],\n    )],\n    common_apps_dto=zpa.ZPAApplicationSegmentPRACommonAppsDtoArgs(\n        apps_configs=[\n            zpa.ZPAApplicationSegmentPRACommonAppsDtoAppsConfigArgs(\n                name=\"ssh_pra\",\n                domain=\"ssh_pra.example.com\",\n                application_protocol=\"SSH\",\n                application_port=\"22\",\n                enabled=True,\n                app_types=[\"SECURE_REMOTE_ACCESS\"],\n            ),\n            zpa.ZPAApplicationSegmentPRACommonAppsDtoAppsConfigArgs(\n                name=\"rdp_pra\",\n                domain=\"rdp_pra.example.com\",\n                application_protocol=\"RDP\",\n                connection_security=\"ANY\",\n                application_port=\"3389\",\n                enabled=True,\n                app_types=[\"SECURE_REMOTE_ACCESS\"],\n            ),\n        ],\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = zscaler.PulumiPackage.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = new Zpa.ZPAApplicationSegmentPRA(\"this\", new()\n    {\n        Description = \"PRA_Example\",\n        Enabled = true,\n        HealthReporting = \"ON_ACCESS\",\n        BypassType = \"NEVER\",\n        IsCnameEnabled = true,\n        TcpPortRanges = new[]\n        {\n            \"22\",\n            \"22\",\n            \"3389\",\n            \"3389\",\n        },\n        DomainNames = new[]\n        {\n            \"ssh_pra.example.com\",\n            \"rdp_pra.example.com\",\n        },\n        SegmentGroupId = zpa_segment_group.This.Id,\n        ServerGroups = new[]\n        {\n            new Zpa.Inputs.ZPAApplicationSegmentPRAServerGroupArgs\n            {\n                Ids = new[]\n                {\n                    zpa_server_group.This.Id,\n                },\n            },\n        },\n        CommonAppsDto = new Zpa.Inputs.ZPAApplicationSegmentPRACommonAppsDtoArgs\n        {\n            AppsConfigs = new[]\n            {\n                new Zpa.Inputs.ZPAApplicationSegmentPRACommonAppsDtoAppsConfigArgs\n                {\n                    Name = \"ssh_pra\",\n                    Domain = \"ssh_pra.example.com\",\n                    ApplicationProtocol = \"SSH\",\n                    ApplicationPort = \"22\",\n                    Enabled = true,\n                    AppTypes = new[]\n                    {\n                        \"SECURE_REMOTE_ACCESS\",\n                    },\n                },\n                new Zpa.Inputs.ZPAApplicationSegmentPRACommonAppsDtoAppsConfigArgs\n                {\n                    Name = \"rdp_pra\",\n                    Domain = \"rdp_pra.example.com\",\n                    ApplicationProtocol = \"RDP\",\n                    ConnectionSecurity = \"ANY\",\n                    ApplicationPort = \"3389\",\n                    Enabled = true,\n                    AppTypes = new[]\n                    {\n                        \"SECURE_REMOTE_ACCESS\",\n                    },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.NewZPAApplicationSegmentPRA(ctx, \"this\", \u0026zpa.ZPAApplicationSegmentPRAArgs{\n\t\t\tDescription:     pulumi.String(\"PRA_Example\"),\n\t\t\tEnabled:         pulumi.Bool(true),\n\t\t\tHealthReporting: pulumi.String(\"ON_ACCESS\"),\n\t\t\tBypassType:      pulumi.String(\"NEVER\"),\n\t\t\tIsCnameEnabled:  pulumi.Bool(true),\n\t\t\tTcpPortRanges: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"22\"),\n\t\t\t\tpulumi.String(\"22\"),\n\t\t\t\tpulumi.String(\"3389\"),\n\t\t\t\tpulumi.String(\"3389\"),\n\t\t\t},\n\t\t\tDomainNames: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ssh_pra.example.com\"),\n\t\t\t\tpulumi.String(\"rdp_pra.example.com\"),\n\t\t\t},\n\t\t\tSegmentGroupId: pulumi.Any(zpa_segment_group.This.Id),\n\t\t\tServerGroups: zpa.ZPAApplicationSegmentPRAServerGroupArray{\n\t\t\t\t\u0026zpa.ZPAApplicationSegmentPRAServerGroupArgs{\n\t\t\t\t\tIds: pulumi.StringArray{\n\t\t\t\t\t\tzpa_server_group.This.Id,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tCommonAppsDto: \u0026zpa.ZPAApplicationSegmentPRACommonAppsDtoArgs{\n\t\t\t\tAppsConfigs: zpa.ZPAApplicationSegmentPRACommonAppsDtoAppsConfigArray{\n\t\t\t\t\t\u0026zpa.ZPAApplicationSegmentPRACommonAppsDtoAppsConfigArgs{\n\t\t\t\t\t\tName:                pulumi.String(\"ssh_pra\"),\n\t\t\t\t\t\tDomain:              pulumi.String(\"ssh_pra.example.com\"),\n\t\t\t\t\t\tApplicationProtocol: pulumi.String(\"SSH\"),\n\t\t\t\t\t\tApplicationPort:     pulumi.String(\"22\"),\n\t\t\t\t\t\tEnabled:             pulumi.Bool(true),\n\t\t\t\t\t\tAppTypes: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"SECURE_REMOTE_ACCESS\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t\u0026zpa.ZPAApplicationSegmentPRACommonAppsDtoAppsConfigArgs{\n\t\t\t\t\t\tName:                pulumi.String(\"rdp_pra\"),\n\t\t\t\t\t\tDomain:              pulumi.String(\"rdp_pra.example.com\"),\n\t\t\t\t\t\tApplicationProtocol: pulumi.String(\"RDP\"),\n\t\t\t\t\t\tConnectionSecurity:  pulumi.String(\"ANY\"),\n\t\t\t\t\t\tApplicationPort:     pulumi.String(\"3389\"),\n\t\t\t\t\t\tEnabled:             pulumi.Bool(true),\n\t\t\t\t\t\tAppTypes: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"SECURE_REMOTE_ACCESS\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZPAApplicationSegmentPRA;\nimport com.pulumi.zpa.ZPAApplicationSegmentPRAArgs;\nimport com.pulumi.zpa.inputs.ZPAApplicationSegmentPRAServerGroupArgs;\nimport com.pulumi.zpa.inputs.ZPAApplicationSegmentPRACommonAppsDtoArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var this_ = new ZPAApplicationSegmentPRA(\"this\", ZPAApplicationSegmentPRAArgs.builder()        \n            .description(\"PRA_Example\")\n            .enabled(true)\n            .healthReporting(\"ON_ACCESS\")\n            .bypassType(\"NEVER\")\n            .isCnameEnabled(true)\n            .tcpPortRanges(            \n                \"22\",\n                \"22\",\n                \"3389\",\n                \"3389\")\n            .domainNames(            \n                \"ssh_pra.example.com\",\n                \"rdp_pra.example.com\")\n            .segmentGroupId(zpa_segment_group.this().id())\n            .serverGroups(ZPAApplicationSegmentPRAServerGroupArgs.builder()\n                .ids(zpa_server_group.this().id())\n                .build())\n            .commonAppsDto(ZPAApplicationSegmentPRACommonAppsDtoArgs.builder()\n                .appsConfigs(                \n                    ZPAApplicationSegmentPRACommonAppsDtoAppsConfigArgs.builder()\n                        .name(\"ssh_pra\")\n                        .domain(\"ssh_pra.example.com\")\n                        .applicationProtocol(\"SSH\")\n                        .applicationPort(\"22\")\n                        .enabled(true)\n                        .appTypes(\"SECURE_REMOTE_ACCESS\")\n                        .build(),\n                    ZPAApplicationSegmentPRACommonAppsDtoAppsConfigArgs.builder()\n                        .name(\"rdp_pra\")\n                        .domain(\"rdp_pra.example.com\")\n                        .applicationProtocol(\"RDP\")\n                        .connectionSecurity(\"ANY\")\n                        .applicationPort(\"3389\")\n                        .enabled(true)\n                        .appTypes(\"SECURE_REMOTE_ACCESS\")\n                        .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  this:\n    type: zpa:ZPAApplicationSegmentPRA\n    properties:\n      description: PRA_Example\n      enabled: true\n      healthReporting: ON_ACCESS\n      bypassType: NEVER\n      isCnameEnabled: true\n      tcpPortRanges:\n        - '22'\n        - '22'\n        - '3389'\n        - '3389'\n      domainNames:\n        - ssh_pra.example.com\n        - rdp_pra.example.com\n      segmentGroupId: ${zpa_segment_group.this.id}\n      serverGroups:\n        - ids:\n            - ${zpa_server_group.this.id}\n      commonAppsDto:\n        appsConfigs:\n          - name: ssh_pra\n            domain: ssh_pra.example.com\n            applicationProtocol: SSH\n            applicationPort: '22'\n            enabled: true\n            appTypes:\n              - SECURE_REMOTE_ACCESS\n          - name: rdp_pra\n            domain: rdp_pra.example.com\n            applicationProtocol: RDP\n            connectionSecurity: ANY\n            applicationPort: '3389'\n            enabled: true\n            appTypes:\n              - SECURE_REMOTE_ACCESS\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language. [Visit](https://github.com/zscaler/zscaler-terraformer) Application Segment can be imported by using `\u003cAPPLICATION SEGMENT ID\u003e` or `\u003cAPPLICATION SEGMENT NAME\u003e` as the import ID.\n\n```sh\n $ pulumi import zpa:index/zPAApplicationSegmentPRA:ZPAApplicationSegmentPRA example \u003capplication_segment_id\u003e\n```\n\n or\n\n```sh\n $ pulumi import zpa:index/zPAApplicationSegmentPRA:ZPAApplicationSegmentPRA example \u003capplication_segment_name\u003e\n```\n\n ",
            "properties": {
                "bypassType": {
                    "type": "string",
                    "description": "(Optional) Indicates whether users can bypass ZPA to access applications.\n"
                },
                "commonAppsDto": {
                    "$ref": "#/types/zpa:index/ZPAApplicationSegmentPRACommonAppsDto:ZPAApplicationSegmentPRACommonAppsDto",
                    "description": "List of applications (e.g., Inspection, Browser Access or Privileged Remote Access)\n* `apps_config:` - (Required) List of applications to be configured\n"
                },
                "configSpace": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "description": {
                    "type": "string",
                    "description": "(Optional) Description of the application.\n"
                },
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of domains and IPs.\n"
                },
                "doubleEncrypt": {
                    "type": "boolean",
                    "description": "(Optional) Whether Double Encryption is enabled or disabled for the app.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether this application is enabled or not\n"
                },
                "healthCheckType": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "healthReporting": {
                    "type": "string",
                    "description": "(Optional) Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.\n"
                },
                "icmpAccessType": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "ipAnchored": {
                    "type": "boolean",
                    "description": "(Optional)\n"
                },
                "isCnameEnabled": {
                    "type": "boolean",
                    "description": "(Optional) Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Privileged Remote Access\n"
                },
                "passiveHealthEnabled": {
                    "type": "boolean",
                    "description": "(Optional)\n"
                },
                "segmentGroupId": {
                    "type": "string",
                    "description": "List of Segment Group IDs\n"
                },
                "segmentGroupName": {
                    "type": "string"
                },
                "serverGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPAApplicationSegmentPRAServerGroup:ZPAApplicationSegmentPRAServerGroup"
                    },
                    "description": "List of Server Group IDs\n"
                },
                "tcpPortRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "TCP port ranges used to access the app.\n"
                },
                "udpPortRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "UDP port ranges used to access the app.\n"
                }
            },
            "required": [
                "bypassType",
                "commonAppsDto",
                "domainNames",
                "doubleEncrypt",
                "enabled",
                "icmpAccessType",
                "ipAnchored",
                "isCnameEnabled",
                "name",
                "passiveHealthEnabled",
                "segmentGroupId",
                "segmentGroupName",
                "serverGroups",
                "tcpPortRanges",
                "tcpPortRanges",
                "udpPortRanges",
                "udpPortRanges"
            ],
            "inputProperties": {
                "bypassType": {
                    "type": "string",
                    "description": "(Optional) Indicates whether users can bypass ZPA to access applications.\n"
                },
                "commonAppsDto": {
                    "$ref": "#/types/zpa:index/ZPAApplicationSegmentPRACommonAppsDto:ZPAApplicationSegmentPRACommonAppsDto",
                    "description": "List of applications (e.g., Inspection, Browser Access or Privileged Remote Access)\n* `apps_config:` - (Required) List of applications to be configured\n"
                },
                "configSpace": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "description": {
                    "type": "string",
                    "description": "(Optional) Description of the application.\n"
                },
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of domains and IPs.\n"
                },
                "doubleEncrypt": {
                    "type": "boolean",
                    "description": "(Optional) Whether Double Encryption is enabled or disabled for the app.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether this application is enabled or not\n"
                },
                "healthCheckType": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "healthReporting": {
                    "type": "string",
                    "description": "(Optional) Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.\n"
                },
                "icmpAccessType": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "ipAnchored": {
                    "type": "boolean",
                    "description": "(Optional)\n"
                },
                "isCnameEnabled": {
                    "type": "boolean",
                    "description": "(Optional) Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Privileged Remote Access\n"
                },
                "passiveHealthEnabled": {
                    "type": "boolean",
                    "description": "(Optional)\n"
                },
                "segmentGroupId": {
                    "type": "string",
                    "description": "List of Segment Group IDs\n"
                },
                "segmentGroupName": {
                    "type": "string"
                },
                "serverGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPAApplicationSegmentPRAServerGroup:ZPAApplicationSegmentPRAServerGroup"
                    },
                    "description": "List of Server Group IDs\n"
                },
                "tcpPortRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "TCP port ranges used to access the app.\n"
                },
                "udpPortRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "UDP port ranges used to access the app.\n"
                }
            },
            "requiredInputs": [
                "segmentGroupId",
                "serverGroups"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ZPAApplicationSegmentPRA resources.\n",
                "properties": {
                    "bypassType": {
                        "type": "string",
                        "description": "(Optional) Indicates whether users can bypass ZPA to access applications.\n"
                    },
                    "commonAppsDto": {
                        "$ref": "#/types/zpa:index/ZPAApplicationSegmentPRACommonAppsDto:ZPAApplicationSegmentPRACommonAppsDto",
                        "description": "List of applications (e.g., Inspection, Browser Access or Privileged Remote Access)\n* `apps_config:` - (Required) List of applications to be configured\n"
                    },
                    "configSpace": {
                        "type": "string",
                        "description": "(Optional)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(Optional) Description of the application.\n"
                    },
                    "domainNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of domains and IPs.\n"
                    },
                    "doubleEncrypt": {
                        "type": "boolean",
                        "description": "(Optional) Whether Double Encryption is enabled or disabled for the app.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether this application is enabled or not\n"
                    },
                    "healthCheckType": {
                        "type": "string",
                        "description": "(Optional)\n"
                    },
                    "healthReporting": {
                        "type": "string",
                        "description": "(Optional) Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.\n"
                    },
                    "icmpAccessType": {
                        "type": "string",
                        "description": "(Optional)\n"
                    },
                    "ipAnchored": {
                        "type": "boolean",
                        "description": "(Optional)\n"
                    },
                    "isCnameEnabled": {
                        "type": "boolean",
                        "description": "(Optional) Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Privileged Remote Access\n"
                    },
                    "passiveHealthEnabled": {
                        "type": "boolean",
                        "description": "(Optional)\n"
                    },
                    "segmentGroupId": {
                        "type": "string",
                        "description": "List of Segment Group IDs\n"
                    },
                    "segmentGroupName": {
                        "type": "string"
                    },
                    "serverGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/ZPAApplicationSegmentPRAServerGroup:ZPAApplicationSegmentPRAServerGroup"
                        },
                        "description": "List of Server Group IDs\n"
                    },
                    "tcpPortRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "TCP port ranges used to access the app.\n"
                    },
                    "udpPortRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "UDP port ranges used to access the app.\n"
                    }
                },
                "type": "object"
            }
        },
        "zpa:index/zPAApplicationServer:ZPAApplicationServer": {
            "description": "\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language. [Visit](https://github.com/zscaler/zscaler-terraformer) Application Server can be imported by using `\u003cAPPLICATION SERVER ID\u003e` or `\u003cAPPLICATION SERVER NAME\u003e` as the import ID For example\n\n```sh\n $ pulumi import zpa:index/zPAApplicationServer:ZPAApplicationServer example \u003capplication_server_id\u003e\n```\n\n or\n\n```sh\n $ pulumi import zpa:index/zPAApplicationServer:ZPAApplicationServer example \u003capplication_server_name\u003e\n```\n\n ",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "Address. The address of the application server to be exported.\n"
                },
                "appServerGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional) This field defines the list of server group IDs.\n"
                },
                "configSpace": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "description": {
                    "type": "string",
                    "description": "(Optional) This field defines the description of the server.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(Optional) This field defines the status of the server.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name. The name of the application server to be exported.\n"
                }
            },
            "required": [
                "address",
                "appServerGroupIds",
                "description",
                "enabled",
                "name"
            ],
            "inputProperties": {
                "address": {
                    "type": "string",
                    "description": "Address. The address of the application server to be exported.\n"
                },
                "appServerGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional) This field defines the list of server group IDs.\n"
                },
                "configSpace": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "description": {
                    "type": "string",
                    "description": "(Optional) This field defines the description of the server.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(Optional) This field defines the status of the server.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name. The name of the application server to be exported.\n"
                }
            },
            "requiredInputs": [
                "address"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ZPAApplicationServer resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "Address. The address of the application server to be exported.\n"
                    },
                    "appServerGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(Optional) This field defines the list of server group IDs.\n"
                    },
                    "configSpace": {
                        "type": "string",
                        "description": "(Optional)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(Optional) This field defines the description of the server.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(Optional) This field defines the status of the server.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name. The name of the application server to be exported.\n"
                    }
                },
                "type": "object"
            }
        },
        "zpa:index/zPABrowserAccess:ZPABrowserAccess": {
            "properties": {
                "bypassType": {
                    "type": "string",
                    "description": "Indicates whether users can bypass ZPA to access applications. Default: NEVER. Supported values: ALWAYS, NEVER, ON_NET.\nThe value NEVER indicates the use of the client forwarding policy.\n"
                },
                "clientlessApps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPABrowserAccessClientlessApp:ZPABrowserAccessClientlessApp"
                    }
                },
                "configSpace": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the application.\n"
                },
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of domains and IPs.\n"
                },
                "doubleEncrypt": {
                    "type": "boolean",
                    "description": "Whether Double Encryption is enabled or disabled for the app.\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "healthCheckType": {
                    "type": "string"
                },
                "healthReporting": {
                    "type": "string",
                    "description": "Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.\n"
                },
                "icmpAccessType": {
                    "type": "string"
                },
                "ipAnchored": {
                    "type": "boolean"
                },
                "isCnameEnabled": {
                    "type": "boolean",
                    "description": "Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the\nconnectors.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the application.\n"
                },
                "passiveHealthEnabled": {
                    "type": "boolean"
                },
                "segmentGroupId": {
                    "type": "string"
                },
                "segmentGroupName": {
                    "type": "string"
                },
                "serverGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPABrowserAccessServerGroup:ZPABrowserAccessServerGroup"
                    },
                    "description": "List of the server group IDs.\n"
                },
                "tcpPortRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "TCP port ranges used to access the app.\n"
                },
                "udpPortRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "UDP port ranges used to access the app.\n"
                }
            },
            "required": [
                "clientlessApps",
                "domainNames",
                "enabled",
                "healthCheckType",
                "healthReporting",
                "name",
                "passiveHealthEnabled",
                "segmentGroupId",
                "segmentGroupName",
                "serverGroups",
                "tcpPortRanges",
                "tcpPortRanges",
                "udpPortRanges",
                "udpPortRanges"
            ],
            "inputProperties": {
                "bypassType": {
                    "type": "string",
                    "description": "Indicates whether users can bypass ZPA to access applications. Default: NEVER. Supported values: ALWAYS, NEVER, ON_NET.\nThe value NEVER indicates the use of the client forwarding policy.\n"
                },
                "clientlessApps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPABrowserAccessClientlessApp:ZPABrowserAccessClientlessApp"
                    }
                },
                "configSpace": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the application.\n"
                },
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of domains and IPs.\n"
                },
                "doubleEncrypt": {
                    "type": "boolean",
                    "description": "Whether Double Encryption is enabled or disabled for the app.\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "healthCheckType": {
                    "type": "string"
                },
                "healthReporting": {
                    "type": "string",
                    "description": "Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.\n"
                },
                "icmpAccessType": {
                    "type": "string"
                },
                "ipAnchored": {
                    "type": "boolean"
                },
                "isCnameEnabled": {
                    "type": "boolean",
                    "description": "Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the\nconnectors.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the application.\n"
                },
                "passiveHealthEnabled": {
                    "type": "boolean"
                },
                "segmentGroupId": {
                    "type": "string"
                },
                "segmentGroupName": {
                    "type": "string"
                },
                "serverGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPABrowserAccessServerGroup:ZPABrowserAccessServerGroup"
                    },
                    "description": "List of the server group IDs.\n"
                },
                "tcpPortRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "TCP port ranges used to access the app.\n"
                },
                "udpPortRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "UDP port ranges used to access the app.\n"
                }
            },
            "requiredInputs": [
                "clientlessApps",
                "domainNames",
                "segmentGroupId",
                "serverGroups"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ZPABrowserAccess resources.\n",
                "properties": {
                    "bypassType": {
                        "type": "string",
                        "description": "Indicates whether users can bypass ZPA to access applications. Default: NEVER. Supported values: ALWAYS, NEVER, ON_NET.\nThe value NEVER indicates the use of the client forwarding policy.\n"
                    },
                    "clientlessApps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/ZPABrowserAccessClientlessApp:ZPABrowserAccessClientlessApp"
                        }
                    },
                    "configSpace": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the application.\n"
                    },
                    "domainNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of domains and IPs.\n"
                    },
                    "doubleEncrypt": {
                        "type": "boolean",
                        "description": "Whether Double Encryption is enabled or disabled for the app.\n"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "healthCheckType": {
                        "type": "string"
                    },
                    "healthReporting": {
                        "type": "string",
                        "description": "Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.\n"
                    },
                    "icmpAccessType": {
                        "type": "string"
                    },
                    "ipAnchored": {
                        "type": "boolean"
                    },
                    "isCnameEnabled": {
                        "type": "boolean",
                        "description": "Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the\nconnectors.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the application.\n"
                    },
                    "passiveHealthEnabled": {
                        "type": "boolean"
                    },
                    "segmentGroupId": {
                        "type": "string"
                    },
                    "segmentGroupName": {
                        "type": "string"
                    },
                    "serverGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/ZPABrowserAccessServerGroup:ZPABrowserAccessServerGroup"
                        },
                        "description": "List of the server group IDs.\n"
                    },
                    "tcpPortRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "TCP port ranges used to access the app.\n"
                    },
                    "udpPortRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "UDP port ranges used to access the app.\n"
                    }
                },
                "type": "object"
            }
        },
        "zpa:index/zPAInspectionCustomControls:ZPAInspectionCustomControls": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The performed action\n"
                },
                "actionValue": {
                    "type": "string"
                },
                "associatedInspectionProfileNames": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPAInspectionCustomControlsAssociatedInspectionProfileName:ZPAInspectionCustomControlsAssociatedInspectionProfileName"
                    },
                    "description": "Name of the inspection profile\n"
                },
                "controlNumber": {
                    "type": "string"
                },
                "controlRuleJson": {
                    "type": "string",
                    "description": "The control rule in JSON format that has the conditions and type of control for the inspection control\n"
                },
                "defaultAction": {
                    "type": "string",
                    "description": "The performed action\n"
                },
                "defaultActionValue": {
                    "type": "string",
                    "description": "This is used to provide the redirect URL if the default action is set to REDIRECT\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the custom control\n"
                },
                "name": {
                    "type": "string"
                },
                "paranoiaLevel": {
                    "type": "string",
                    "description": "OWASP Predefined Paranoia Level. Range: [1-4], inclusive\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPAInspectionCustomControlsRule:ZPAInspectionCustomControlsRule"
                    },
                    "description": "Rules of the custom controls applied as conditions (JSON)\n"
                },
                "severity": {
                    "type": "string",
                    "description": "Severity of the control number\n"
                },
                "type": {
                    "type": "string",
                    "description": "Rules to be applied to the request or response type\n"
                },
                "version": {
                    "type": "string"
                }
            },
            "required": [
                "action",
                "actionValue",
                "associatedInspectionProfileNames",
                "controlNumber",
                "controlRuleJson",
                "defaultAction",
                "defaultActionValue",
                "description",
                "name",
                "paranoiaLevel",
                "rules",
                "severity",
                "type",
                "version"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "description": "The performed action\n"
                },
                "actionValue": {
                    "type": "string"
                },
                "associatedInspectionProfileNames": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPAInspectionCustomControlsAssociatedInspectionProfileName:ZPAInspectionCustomControlsAssociatedInspectionProfileName"
                    },
                    "description": "Name of the inspection profile\n"
                },
                "controlNumber": {
                    "type": "string"
                },
                "controlRuleJson": {
                    "type": "string",
                    "description": "The control rule in JSON format that has the conditions and type of control for the inspection control\n"
                },
                "defaultAction": {
                    "type": "string",
                    "description": "The performed action\n"
                },
                "defaultActionValue": {
                    "type": "string",
                    "description": "This is used to provide the redirect URL if the default action is set to REDIRECT\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the custom control\n"
                },
                "name": {
                    "type": "string"
                },
                "paranoiaLevel": {
                    "type": "string",
                    "description": "OWASP Predefined Paranoia Level. Range: [1-4], inclusive\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPAInspectionCustomControlsRule:ZPAInspectionCustomControlsRule"
                    },
                    "description": "Rules of the custom controls applied as conditions (JSON)\n"
                },
                "severity": {
                    "type": "string",
                    "description": "Severity of the control number\n"
                },
                "type": {
                    "type": "string",
                    "description": "Rules to be applied to the request or response type\n"
                },
                "version": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "defaultAction",
                "severity",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ZPAInspectionCustomControls resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "The performed action\n"
                    },
                    "actionValue": {
                        "type": "string"
                    },
                    "associatedInspectionProfileNames": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/ZPAInspectionCustomControlsAssociatedInspectionProfileName:ZPAInspectionCustomControlsAssociatedInspectionProfileName"
                        },
                        "description": "Name of the inspection profile\n"
                    },
                    "controlNumber": {
                        "type": "string"
                    },
                    "controlRuleJson": {
                        "type": "string",
                        "description": "The control rule in JSON format that has the conditions and type of control for the inspection control\n"
                    },
                    "defaultAction": {
                        "type": "string",
                        "description": "The performed action\n"
                    },
                    "defaultActionValue": {
                        "type": "string",
                        "description": "This is used to provide the redirect URL if the default action is set to REDIRECT\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the custom control\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "paranoiaLevel": {
                        "type": "string",
                        "description": "OWASP Predefined Paranoia Level. Range: [1-4], inclusive\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/ZPAInspectionCustomControlsRule:ZPAInspectionCustomControlsRule"
                        },
                        "description": "Rules of the custom controls applied as conditions (JSON)\n"
                    },
                    "severity": {
                        "type": "string",
                        "description": "Severity of the control number\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Rules to be applied to the request or response type\n"
                    },
                    "version": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "zpa:index/zPAInspectionProfile:ZPAInspectionProfile": {
            "description": "The  **zpa_inspection_profile** resource creates an inspection profile in the Zscaler Private Access cloud. This resource can then be referenced in an inspection custom control resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPAInspectionAllPredefinedControlsArgs;\nimport com.pulumi.zpa.inputs.GetZPAInspectionPredefinedControlsArgs;\nimport com.pulumi.zpa.ZPAInspectionProfile;\nimport com.pulumi.zpa.ZPAInspectionProfileArgs;\nimport com.pulumi.zpa.inputs.ZPAInspectionProfileControlsInfoArgs;\nimport com.pulumi.zpa.inputs.ZPAInspectionProfilePredefinedControlArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var thisZPAInspectionAllPredefinedControls = ZpaFunctions.getZPAInspectionAllPredefinedControls(GetZPAInspectionAllPredefinedControlsArgs.builder()\n            .version(\"OWASP_CRS/3.3.0\")\n            .groupName(\"Preprocessors\")\n            .build());\n\n        final var thisZPAInspectionPredefinedControls = ZpaFunctions.getZPAInspectionPredefinedControls(GetZPAInspectionPredefinedControlsArgs.builder()\n            .name(\"Failed to parse request body\")\n            .version(\"OWASP_CRS/3.3.0\")\n            .build());\n\n        var thisZPAInspectionProfile = new ZPAInspectionProfile(\"thisZPAInspectionProfile\", ZPAInspectionProfileArgs.builder()        \n            .description(\"Example\")\n            .paranoiaLevel(\"1\")\n            .predefinedControlsVersion(\"OWASP_CRS/3.3.0\")\n            .incarnationNumber(\"6\")\n            .controlsInfos(ZPAInspectionProfileControlsInfoArgs.builder()\n                .controlType(\"PREDEFINED\")\n                .build())\n            .dynamic(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .predefinedControls(ZPAInspectionProfilePredefinedControlArgs.builder()\n                .id(thisZPAInspectionPredefinedControls.applyValue(getZPAInspectionPredefinedControlsResult -\u003e getZPAInspectionPredefinedControlsResult.id()))\n                .action(\"BLOCK\")\n                .build())\n            .globalControlActions(            \n                \"PREDEFINED:PASS\",\n                \"CUSTOM:NONE\",\n                \"OVERRIDE_ACTION:COMMON\")\n            .commonGlobalOverrideActionsConfig(Map.ofEntries(\n                Map.entry(\"PREDEF_CNTRL_GLOBAL_ACTION\", \"PASS\"),\n                Map.entry(\"IS_OVERRIDE_ACTION_COMMON\", \"TRUE\")\n            ))\n            .build());\n\n    }\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language. [Visit](https://github.com/zscaler/zscaler-terraformer) ",
            "properties": {
                "associateAllControls": {
                    "type": "boolean"
                },
                "commonGlobalOverrideActionsConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Optional)\n"
                },
                "controlsInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPAInspectionProfileControlsInfo:ZPAInspectionProfileControlsInfo"
                    },
                    "description": "(Optional) Types for custom controls\n"
                },
                "customControls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPAInspectionProfileCustomControl:ZPAInspectionProfileCustomControl"
                    },
                    "description": "(Optional) Types for custom controls\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the inspection profile.\n"
                },
                "globalControlActions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incarnationNumber": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the inspection profile.\n"
                },
                "paranoiaLevel": {
                    "type": "string",
                    "description": "OWASP Predefined Paranoia Level. Range: [1-4], inclusive\n"
                },
                "predefinedControls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPAInspectionProfilePredefinedControl:ZPAInspectionProfilePredefinedControl"
                    },
                    "description": "The predefined controls. The default predefined control `Preprocessors` are mandatory and injected in the request by default. Individual `predefined_controls` can be set by using the data source `data_source_zpa_predefined_controls` or by group using the data source `zpa.getZPAInspectionAllPredefinedControls`.\n"
                },
                "predefinedControlsVersion": {
                    "type": "string"
                }
            },
            "required": [
                "commonGlobalOverrideActionsConfig",
                "controlsInfos",
                "customControls",
                "description",
                "globalControlActions",
                "incarnationNumber",
                "name",
                "paranoiaLevel",
                "predefinedControls",
                "predefinedControlsVersion"
            ],
            "inputProperties": {
                "associateAllControls": {
                    "type": "boolean"
                },
                "commonGlobalOverrideActionsConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Optional)\n"
                },
                "controlsInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPAInspectionProfileControlsInfo:ZPAInspectionProfileControlsInfo"
                    },
                    "description": "(Optional) Types for custom controls\n"
                },
                "customControls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPAInspectionProfileCustomControl:ZPAInspectionProfileCustomControl"
                    },
                    "description": "(Optional) Types for custom controls\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the inspection profile.\n"
                },
                "globalControlActions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incarnationNumber": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the inspection profile.\n"
                },
                "paranoiaLevel": {
                    "type": "string",
                    "description": "OWASP Predefined Paranoia Level. Range: [1-4], inclusive\n"
                },
                "predefinedControls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPAInspectionProfilePredefinedControl:ZPAInspectionProfilePredefinedControl"
                    },
                    "description": "The predefined controls. The default predefined control `Preprocessors` are mandatory and injected in the request by default. Individual `predefined_controls` can be set by using the data source `data_source_zpa_predefined_controls` or by group using the data source `zpa.getZPAInspectionAllPredefinedControls`.\n"
                },
                "predefinedControlsVersion": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ZPAInspectionProfile resources.\n",
                "properties": {
                    "associateAllControls": {
                        "type": "boolean"
                    },
                    "commonGlobalOverrideActionsConfig": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Optional)\n"
                    },
                    "controlsInfos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/ZPAInspectionProfileControlsInfo:ZPAInspectionProfileControlsInfo"
                        },
                        "description": "(Optional) Types for custom controls\n"
                    },
                    "customControls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/ZPAInspectionProfileCustomControl:ZPAInspectionProfileCustomControl"
                        },
                        "description": "(Optional) Types for custom controls\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the inspection profile.\n"
                    },
                    "globalControlActions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "incarnationNumber": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the inspection profile.\n"
                    },
                    "paranoiaLevel": {
                        "type": "string",
                        "description": "OWASP Predefined Paranoia Level. Range: [1-4], inclusive\n"
                    },
                    "predefinedControls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/ZPAInspectionProfilePredefinedControl:ZPAInspectionProfilePredefinedControl"
                        },
                        "description": "The predefined controls. The default predefined control `Preprocessors` are mandatory and injected in the request by default. Individual `predefined_controls` can be set by using the data source `data_source_zpa_predefined_controls` or by group using the data source `zpa.getZPAInspectionAllPredefinedControls`.\n"
                    },
                    "predefinedControlsVersion": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "zpa:index/zPALSSConfigController:ZPALSSConfigController": {
            "description": "The **zpa_lss_config_controller** resource creates and manages Log Streaming Service (LSS) in the Zscaler Private Access cloud.\n\n## Example 1 Usage\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\nimport * as zpa from \"@zscaler/pulumi-zpa\";\n\nconst zpnAstAuthLog = zpa.getZPALSSLogTypeFormats({\n    logType: \"zpn_ast_auth_log\",\n});\n// Create Log Receiver Configuration\nconst example = new zpa.ZPALSSConfigController(\"example\", {\n    config: {\n        name: \"Example\",\n        description: \"Example\",\n        enabled: true,\n        format: zpnAstAuthLog.then(zpnAstAuthLog =\u003e zpnAstAuthLog.json),\n        lssHost: \"splunk.acme.com\",\n        lssPort: \"11000\",\n        sourceLogType: \"zpn_ast_auth_log\",\n        useTls: true,\n        filters: [\n            \"ZPN_STATUS_AUTH_FAILED\",\n            \"ZPN_STATUS_DISCONNECTED\",\n            \"ZPN_STATUS_AUTHENTICATED\",\n        ],\n    },\n    connectorGroups: [{\n        ids: [zpa_app_connector_group.example.id],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\nimport zscaler_pulumi_zpa as zpa\n\nzpn_ast_auth_log = zpa.get_zpalss_log_type_formats(log_type=\"zpn_ast_auth_log\")\n# Create Log Receiver Configuration\nexample = zpa.ZPALSSConfigController(\"example\",\n    config=zpa.ZPALSSConfigControllerConfigArgs(\n        name=\"Example\",\n        description=\"Example\",\n        enabled=True,\n        format=zpn_ast_auth_log.json,\n        lss_host=\"splunk.acme.com\",\n        lss_port=\"11000\",\n        source_log_type=\"zpn_ast_auth_log\",\n        use_tls=True,\n        filters=[\n            \"ZPN_STATUS_AUTH_FAILED\",\n            \"ZPN_STATUS_DISCONNECTED\",\n            \"ZPN_STATUS_AUTHENTICATED\",\n        ],\n    ),\n    connector_groups=[zpa.ZPALSSConfigControllerConnectorGroupArgs(\n        ids=[zpa_app_connector_group[\"example\"][\"id\"]],\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\nusing Zpa = zscaler.PulumiPackage.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var zpnAstAuthLog = Zpa.GetZPALSSLogTypeFormats.Invoke(new()\n    {\n        LogType = \"zpn_ast_auth_log\",\n    });\n\n    // Create Log Receiver Configuration\n    var example = new Zpa.ZPALSSConfigController(\"example\", new()\n    {\n        Config = new Zpa.Inputs.ZPALSSConfigControllerConfigArgs\n        {\n            Name = \"Example\",\n            Description = \"Example\",\n            Enabled = true,\n            Format = zpnAstAuthLog.Apply(getZPALSSLogTypeFormatsResult =\u003e getZPALSSLogTypeFormatsResult.Json),\n            LssHost = \"splunk.acme.com\",\n            LssPort = \"11000\",\n            SourceLogType = \"zpn_ast_auth_log\",\n            UseTls = true,\n            Filters = new[]\n            {\n                \"ZPN_STATUS_AUTH_FAILED\",\n                \"ZPN_STATUS_DISCONNECTED\",\n                \"ZPN_STATUS_AUTHENTICATED\",\n            },\n        },\n        ConnectorGroups = new[]\n        {\n            new Zpa.Inputs.ZPALSSConfigControllerConnectorGroupArgs\n            {\n                Ids = new[]\n                {\n                    zpa_app_connector_group.Example.Id,\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tzpnAstAuthLog, err := zpa.GetZPALSSLogTypeFormats(ctx, \u0026zpa.GetZPALSSLogTypeFormatsArgs{\n\t\t\tLogType: \"zpn_ast_auth_log\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = zpa.NewZPALSSConfigController(ctx, \"example\", \u0026zpa.ZPALSSConfigControllerArgs{\n\t\t\tConfig: \u0026zpa.ZPALSSConfigControllerConfigArgs{\n\t\t\t\tName:          pulumi.String(\"Example\"),\n\t\t\t\tDescription:   pulumi.String(\"Example\"),\n\t\t\t\tEnabled:       pulumi.Bool(true),\n\t\t\t\tFormat:        *pulumi.String(zpnAstAuthLog.Json),\n\t\t\t\tLssHost:       pulumi.String(\"splunk.acme.com\"),\n\t\t\t\tLssPort:       pulumi.String(\"11000\"),\n\t\t\t\tSourceLogType: pulumi.String(\"zpn_ast_auth_log\"),\n\t\t\t\tUseTls:        pulumi.Bool(true),\n\t\t\t\tFilters: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"ZPN_STATUS_AUTH_FAILED\"),\n\t\t\t\t\tpulumi.String(\"ZPN_STATUS_DISCONNECTED\"),\n\t\t\t\t\tpulumi.String(\"ZPN_STATUS_AUTHENTICATED\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tConnectorGroups: zpa.ZPALSSConfigControllerConnectorGroupArray{\n\t\t\t\t\u0026zpa.ZPALSSConfigControllerConnectorGroupArgs{\n\t\t\t\t\tIds: pulumi.StringArray{\n\t\t\t\t\t\tzpa_app_connector_group.Example.Id,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPALSSLogTypeFormatsArgs;\nimport com.pulumi.zpa.ZPALSSConfigController;\nimport com.pulumi.zpa.ZPALSSConfigControllerArgs;\nimport com.pulumi.zpa.inputs.ZPALSSConfigControllerConfigArgs;\nimport com.pulumi.zpa.inputs.ZPALSSConfigControllerConnectorGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var zpnAstAuthLog = ZpaFunctions.getZPALSSLogTypeFormats(GetZPALSSLogTypeFormatsArgs.builder()\n            .logType(\"zpn_ast_auth_log\")\n            .build());\n\n        var example = new ZPALSSConfigController(\"example\", ZPALSSConfigControllerArgs.builder()        \n            .config(ZPALSSConfigControllerConfigArgs.builder()\n                .name(\"Example\")\n                .description(\"Example\")\n                .enabled(true)\n                .format(zpnAstAuthLog.applyValue(getZPALSSLogTypeFormatsResult -\u003e getZPALSSLogTypeFormatsResult.json()))\n                .lssHost(\"splunk.acme.com\")\n                .lssPort(\"11000\")\n                .sourceLogType(\"zpn_ast_auth_log\")\n                .useTls(true)\n                .filters(                \n                    \"ZPN_STATUS_AUTH_FAILED\",\n                    \"ZPN_STATUS_DISCONNECTED\",\n                    \"ZPN_STATUS_AUTHENTICATED\")\n                .build())\n            .connectorGroups(ZPALSSConfigControllerConnectorGroupArgs.builder()\n                .ids(zpa_app_connector_group.example().id())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create Log Receiver Configuration\n  example:\n    type: zpa:ZPALSSConfigController\n    properties:\n      config:\n        name: Example\n        description: Example\n        enabled: true\n        format: ${zpnAstAuthLog.json}\n        lssHost: splunk.acme.com\n        lssPort: '11000'\n        sourceLogType: zpn_ast_auth_log\n        useTls: true\n        filters:\n          - ZPN_STATUS_AUTH_FAILED\n          - ZPN_STATUS_DISCONNECTED\n          - ZPN_STATUS_AUTHENTICATED\n      connectorGroups:\n        - ids:\n            - ${zpa_app_connector_group.example.id}\nvariables:\n  zpnAstAuthLog:\n    fn::invoke:\n      Function: zpa:getZPALSSLogTypeFormats\n      Arguments:\n        logType: zpn_ast_auth_log\n```\n\n## Example 2 Usage\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\nimport * as zpa from \"@zscaler/pulumi-zpa\";\n\nconst zpnTransLog = zpa.getZPALSSLogTypeFormats({\n    logType: \"zpn_trans_log\",\n});\nconst lssSiemPolicy = zpa.getZPAPolicyType({\n    policyType: \"SIEM_POLICY\",\n});\nconst lssUserActivity = new zpa.ZPALSSConfigController(\"lssUserActivity\", {\n    config: {\n        name: \"LSS User Activity\",\n        description: \"LSS User Activity\",\n        enabled: true,\n        format: zpnTransLog.then(zpnTransLog =\u003e zpnTransLog.json),\n        lssHost: \"splunk.acme.com\",\n        lssPort: \"11001\",\n        sourceLogType: \"zpn_trans_log\",\n        useTls: true,\n    },\n    policyRuleResource: {\n        name: \"policy_rule_resource-lss_user_activity\",\n        action: \"ALLOW\",\n        policySetId: lssSiemPolicy.then(lssSiemPolicy =\u003e lssSiemPolicy.id),\n        conditions: [{\n            negated: false,\n            operator: \"OR\",\n            operands: [\n                {\n                    objectType: \"CLIENT_TYPE\",\n                    values: [\"zpn_client_type_exporter\"],\n                },\n                {\n                    objectType: \"CLIENT_TYPE\",\n                    values: [\"zpn_client_type_ip_anchoring\"],\n                },\n                {\n                    objectType: \"CLIENT_TYPE\",\n                    values: [\"zpn_client_type_zapp\"],\n                },\n                {\n                    objectType: \"CLIENT_TYPE\",\n                    values: [\"zpn_client_type_edge_connector\"],\n                },\n                {\n                    objectType: \"CLIENT_TYPE\",\n                    values: [\"zpn_client_type_machine_tunnel\"],\n                },\n                {\n                    objectType: \"CLIENT_TYPE\",\n                    values: [\"zpn_client_type_browser_isolation\"],\n                },\n                {\n                    objectType: \"CLIENT_TYPE\",\n                    values: [\"zpn_client_type_slogger\"],\n                },\n            ],\n        }],\n    },\n    connectorGroups: [{\n        ids: [zpa_app_connector_group.example.id],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\nimport zscaler_pulumi_zpa as zpa\n\nzpn_trans_log = zpa.get_zpalss_log_type_formats(log_type=\"zpn_trans_log\")\nlss_siem_policy = zpa.get_zpa_policy_type(policy_type=\"SIEM_POLICY\")\nlss_user_activity = zpa.ZPALSSConfigController(\"lssUserActivity\",\n    config=zpa.ZPALSSConfigControllerConfigArgs(\n        name=\"LSS User Activity\",\n        description=\"LSS User Activity\",\n        enabled=True,\n        format=zpn_trans_log.json,\n        lss_host=\"splunk.acme.com\",\n        lss_port=\"11001\",\n        source_log_type=\"zpn_trans_log\",\n        use_tls=True,\n    ),\n    policy_rule_resource=zpa.ZPALSSConfigControllerPolicyRuleResourceArgs(\n        name=\"policy_rule_resource-lss_user_activity\",\n        action=\"ALLOW\",\n        policy_set_id=lss_siem_policy.id,\n        conditions=[zpa.ZPALSSConfigControllerPolicyRuleResourceConditionArgs(\n            negated=False,\n            operator=\"OR\",\n            operands=[\n                zpa.ZPALSSConfigControllerPolicyRuleResourceConditionOperandArgs(\n                    object_type=\"CLIENT_TYPE\",\n                    values=[\"zpn_client_type_exporter\"],\n                ),\n                zpa.ZPALSSConfigControllerPolicyRuleResourceConditionOperandArgs(\n                    object_type=\"CLIENT_TYPE\",\n                    values=[\"zpn_client_type_ip_anchoring\"],\n                ),\n                zpa.ZPALSSConfigControllerPolicyRuleResourceConditionOperandArgs(\n                    object_type=\"CLIENT_TYPE\",\n                    values=[\"zpn_client_type_zapp\"],\n                ),\n                zpa.ZPALSSConfigControllerPolicyRuleResourceConditionOperandArgs(\n                    object_type=\"CLIENT_TYPE\",\n                    values=[\"zpn_client_type_edge_connector\"],\n                ),\n                zpa.ZPALSSConfigControllerPolicyRuleResourceConditionOperandArgs(\n                    object_type=\"CLIENT_TYPE\",\n                    values=[\"zpn_client_type_machine_tunnel\"],\n                ),\n                zpa.ZPALSSConfigControllerPolicyRuleResourceConditionOperandArgs(\n                    object_type=\"CLIENT_TYPE\",\n                    values=[\"zpn_client_type_browser_isolation\"],\n                ),\n                zpa.ZPALSSConfigControllerPolicyRuleResourceConditionOperandArgs(\n                    object_type=\"CLIENT_TYPE\",\n                    values=[\"zpn_client_type_slogger\"],\n                ),\n            ],\n        )],\n    ),\n    connector_groups=[zpa.ZPALSSConfigControllerConnectorGroupArgs(\n        ids=[zpa_app_connector_group[\"example\"][\"id\"]],\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\nusing Zpa = zscaler.PulumiPackage.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var zpnTransLog = Zpa.GetZPALSSLogTypeFormats.Invoke(new()\n    {\n        LogType = \"zpn_trans_log\",\n    });\n\n    var lssSiemPolicy = Zpa.GetZPAPolicyType.Invoke(new()\n    {\n        PolicyType = \"SIEM_POLICY\",\n    });\n\n    var lssUserActivity = new Zpa.ZPALSSConfigController(\"lssUserActivity\", new()\n    {\n        Config = new Zpa.Inputs.ZPALSSConfigControllerConfigArgs\n        {\n            Name = \"LSS User Activity\",\n            Description = \"LSS User Activity\",\n            Enabled = true,\n            Format = zpnTransLog.Apply(getZPALSSLogTypeFormatsResult =\u003e getZPALSSLogTypeFormatsResult.Json),\n            LssHost = \"splunk.acme.com\",\n            LssPort = \"11001\",\n            SourceLogType = \"zpn_trans_log\",\n            UseTls = true,\n        },\n        PolicyRuleResource = new Zpa.Inputs.ZPALSSConfigControllerPolicyRuleResourceArgs\n        {\n            Name = \"policy_rule_resource-lss_user_activity\",\n            Action = \"ALLOW\",\n            PolicySetId = lssSiemPolicy.Apply(getZPAPolicyTypeResult =\u003e getZPAPolicyTypeResult.Id),\n            Conditions = new[]\n            {\n                new Zpa.Inputs.ZPALSSConfigControllerPolicyRuleResourceConditionArgs\n                {\n                    Negated = false,\n                    Operator = \"OR\",\n                    Operands = new[]\n                    {\n                        new Zpa.Inputs.ZPALSSConfigControllerPolicyRuleResourceConditionOperandArgs\n                        {\n                            ObjectType = \"CLIENT_TYPE\",\n                            Values = new[]\n                            {\n                                \"zpn_client_type_exporter\",\n                            },\n                        },\n                        new Zpa.Inputs.ZPALSSConfigControllerPolicyRuleResourceConditionOperandArgs\n                        {\n                            ObjectType = \"CLIENT_TYPE\",\n                            Values = new[]\n                            {\n                                \"zpn_client_type_ip_anchoring\",\n                            },\n                        },\n                        new Zpa.Inputs.ZPALSSConfigControllerPolicyRuleResourceConditionOperandArgs\n                        {\n                            ObjectType = \"CLIENT_TYPE\",\n                            Values = new[]\n                            {\n                                \"zpn_client_type_zapp\",\n                            },\n                        },\n                        new Zpa.Inputs.ZPALSSConfigControllerPolicyRuleResourceConditionOperandArgs\n                        {\n                            ObjectType = \"CLIENT_TYPE\",\n                            Values = new[]\n                            {\n                                \"zpn_client_type_edge_connector\",\n                            },\n                        },\n                        new Zpa.Inputs.ZPALSSConfigControllerPolicyRuleResourceConditionOperandArgs\n                        {\n                            ObjectType = \"CLIENT_TYPE\",\n                            Values = new[]\n                            {\n                                \"zpn_client_type_machine_tunnel\",\n                            },\n                        },\n                        new Zpa.Inputs.ZPALSSConfigControllerPolicyRuleResourceConditionOperandArgs\n                        {\n                            ObjectType = \"CLIENT_TYPE\",\n                            Values = new[]\n                            {\n                                \"zpn_client_type_browser_isolation\",\n                            },\n                        },\n                        new Zpa.Inputs.ZPALSSConfigControllerPolicyRuleResourceConditionOperandArgs\n                        {\n                            ObjectType = \"CLIENT_TYPE\",\n                            Values = new[]\n                            {\n                                \"zpn_client_type_slogger\",\n                            },\n                        },\n                    },\n                },\n            },\n        },\n        ConnectorGroups = new[]\n        {\n            new Zpa.Inputs.ZPALSSConfigControllerConnectorGroupArgs\n            {\n                Ids = new[]\n                {\n                    zpa_app_connector_group.Example.Id,\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tzpnTransLog, err := zpa.GetZPALSSLogTypeFormats(ctx, \u0026zpa.GetZPALSSLogTypeFormatsArgs{\n\t\t\tLogType: \"zpn_trans_log\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tlssSiemPolicy, err := zpa.GetZPAPolicyType(ctx, \u0026zpa.GetZPAPolicyTypeArgs{\n\t\t\tPolicyType: pulumi.StringRef(\"SIEM_POLICY\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = zpa.NewZPALSSConfigController(ctx, \"lssUserActivity\", \u0026zpa.ZPALSSConfigControllerArgs{\n\t\t\tConfig: \u0026zpa.ZPALSSConfigControllerConfigArgs{\n\t\t\t\tName:          pulumi.String(\"LSS User Activity\"),\n\t\t\t\tDescription:   pulumi.String(\"LSS User Activity\"),\n\t\t\t\tEnabled:       pulumi.Bool(true),\n\t\t\t\tFormat:        *pulumi.String(zpnTransLog.Json),\n\t\t\t\tLssHost:       pulumi.String(\"splunk.acme.com\"),\n\t\t\t\tLssPort:       pulumi.String(\"11001\"),\n\t\t\t\tSourceLogType: pulumi.String(\"zpn_trans_log\"),\n\t\t\t\tUseTls:        pulumi.Bool(true),\n\t\t\t},\n\t\t\tPolicyRuleResource: \u0026zpa.ZPALSSConfigControllerPolicyRuleResourceArgs{\n\t\t\t\tName:        pulumi.String(\"policy_rule_resource-lss_user_activity\"),\n\t\t\t\tAction:      pulumi.String(\"ALLOW\"),\n\t\t\t\tPolicySetId: *pulumi.String(lssSiemPolicy.Id),\n\t\t\t\tConditions: zpa.ZPALSSConfigControllerPolicyRuleResourceConditionArray{\n\t\t\t\t\t\u0026zpa.ZPALSSConfigControllerPolicyRuleResourceConditionArgs{\n\t\t\t\t\t\tNegated:  pulumi.Bool(false),\n\t\t\t\t\t\tOperator: pulumi.String(\"OR\"),\n\t\t\t\t\t\tOperands: zpa.ZPALSSConfigControllerPolicyRuleResourceConditionOperandArray{\n\t\t\t\t\t\t\t\u0026zpa.ZPALSSConfigControllerPolicyRuleResourceConditionOperandArgs{\n\t\t\t\t\t\t\t\tObjectType: pulumi.String(\"CLIENT_TYPE\"),\n\t\t\t\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\t\t\t\tpulumi.String(\"zpn_client_type_exporter\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\u0026zpa.ZPALSSConfigControllerPolicyRuleResourceConditionOperandArgs{\n\t\t\t\t\t\t\t\tObjectType: pulumi.String(\"CLIENT_TYPE\"),\n\t\t\t\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\t\t\t\tpulumi.String(\"zpn_client_type_ip_anchoring\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\u0026zpa.ZPALSSConfigControllerPolicyRuleResourceConditionOperandArgs{\n\t\t\t\t\t\t\t\tObjectType: pulumi.String(\"CLIENT_TYPE\"),\n\t\t\t\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\t\t\t\tpulumi.String(\"zpn_client_type_zapp\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\u0026zpa.ZPALSSConfigControllerPolicyRuleResourceConditionOperandArgs{\n\t\t\t\t\t\t\t\tObjectType: pulumi.String(\"CLIENT_TYPE\"),\n\t\t\t\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\t\t\t\tpulumi.String(\"zpn_client_type_edge_connector\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\u0026zpa.ZPALSSConfigControllerPolicyRuleResourceConditionOperandArgs{\n\t\t\t\t\t\t\t\tObjectType: pulumi.String(\"CLIENT_TYPE\"),\n\t\t\t\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\t\t\t\tpulumi.String(\"zpn_client_type_machine_tunnel\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\u0026zpa.ZPALSSConfigControllerPolicyRuleResourceConditionOperandArgs{\n\t\t\t\t\t\t\t\tObjectType: pulumi.String(\"CLIENT_TYPE\"),\n\t\t\t\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\t\t\t\tpulumi.String(\"zpn_client_type_browser_isolation\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\u0026zpa.ZPALSSConfigControllerPolicyRuleResourceConditionOperandArgs{\n\t\t\t\t\t\t\t\tObjectType: pulumi.String(\"CLIENT_TYPE\"),\n\t\t\t\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\t\t\t\tpulumi.String(\"zpn_client_type_slogger\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tConnectorGroups: zpa.ZPALSSConfigControllerConnectorGroupArray{\n\t\t\t\t\u0026zpa.ZPALSSConfigControllerConnectorGroupArgs{\n\t\t\t\t\tIds: pulumi.StringArray{\n\t\t\t\t\t\tzpa_app_connector_group.Example.Id,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPALSSLogTypeFormatsArgs;\nimport com.pulumi.zpa.inputs.GetZPAPolicyTypeArgs;\nimport com.pulumi.zpa.ZPALSSConfigController;\nimport com.pulumi.zpa.ZPALSSConfigControllerArgs;\nimport com.pulumi.zpa.inputs.ZPALSSConfigControllerConfigArgs;\nimport com.pulumi.zpa.inputs.ZPALSSConfigControllerPolicyRuleResourceArgs;\nimport com.pulumi.zpa.inputs.ZPALSSConfigControllerConnectorGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var zpnTransLog = ZpaFunctions.getZPALSSLogTypeFormats(GetZPALSSLogTypeFormatsArgs.builder()\n            .logType(\"zpn_trans_log\")\n            .build());\n\n        final var lssSiemPolicy = ZpaFunctions.getZPAPolicyType(GetZPAPolicyTypeArgs.builder()\n            .policyType(\"SIEM_POLICY\")\n            .build());\n\n        var lssUserActivity = new ZPALSSConfigController(\"lssUserActivity\", ZPALSSConfigControllerArgs.builder()        \n            .config(ZPALSSConfigControllerConfigArgs.builder()\n                .name(\"LSS User Activity\")\n                .description(\"LSS User Activity\")\n                .enabled(true)\n                .format(zpnTransLog.applyValue(getZPALSSLogTypeFormatsResult -\u003e getZPALSSLogTypeFormatsResult.json()))\n                .lssHost(\"splunk.acme.com\")\n                .lssPort(\"11001\")\n                .sourceLogType(\"zpn_trans_log\")\n                .useTls(true)\n                .build())\n            .policyRuleResource(ZPALSSConfigControllerPolicyRuleResourceArgs.builder()\n                .name(\"policy_rule_resource-lss_user_activity\")\n                .action(\"ALLOW\")\n                .policySetId(lssSiemPolicy.applyValue(getZPAPolicyTypeResult -\u003e getZPAPolicyTypeResult.id()))\n                .conditions(ZPALSSConfigControllerPolicyRuleResourceConditionArgs.builder()\n                    .negated(false)\n                    .operator(\"OR\")\n                    .operands(                    \n                        ZPALSSConfigControllerPolicyRuleResourceConditionOperandArgs.builder()\n                            .objectType(\"CLIENT_TYPE\")\n                            .values(\"zpn_client_type_exporter\")\n                            .build(),\n                        ZPALSSConfigControllerPolicyRuleResourceConditionOperandArgs.builder()\n                            .objectType(\"CLIENT_TYPE\")\n                            .values(\"zpn_client_type_ip_anchoring\")\n                            .build(),\n                        ZPALSSConfigControllerPolicyRuleResourceConditionOperandArgs.builder()\n                            .objectType(\"CLIENT_TYPE\")\n                            .values(\"zpn_client_type_zapp\")\n                            .build(),\n                        ZPALSSConfigControllerPolicyRuleResourceConditionOperandArgs.builder()\n                            .objectType(\"CLIENT_TYPE\")\n                            .values(\"zpn_client_type_edge_connector\")\n                            .build(),\n                        ZPALSSConfigControllerPolicyRuleResourceConditionOperandArgs.builder()\n                            .objectType(\"CLIENT_TYPE\")\n                            .values(\"zpn_client_type_machine_tunnel\")\n                            .build(),\n                        ZPALSSConfigControllerPolicyRuleResourceConditionOperandArgs.builder()\n                            .objectType(\"CLIENT_TYPE\")\n                            .values(\"zpn_client_type_browser_isolation\")\n                            .build(),\n                        ZPALSSConfigControllerPolicyRuleResourceConditionOperandArgs.builder()\n                            .objectType(\"CLIENT_TYPE\")\n                            .values(\"zpn_client_type_slogger\")\n                            .build())\n                    .build())\n                .build())\n            .connectorGroups(ZPALSSConfigControllerConnectorGroupArgs.builder()\n                .ids(zpa_app_connector_group.example().id())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  lssUserActivity:\n    type: zpa:ZPALSSConfigController\n    properties:\n      config:\n        name: LSS User Activity\n        description: LSS User Activity\n        enabled: true\n        format: ${zpnTransLog.json}\n        lssHost: splunk.acme.com\n        lssPort: '11001'\n        sourceLogType: zpn_trans_log\n        useTls: true\n      policyRuleResource:\n        name: policy_rule_resource-lss_user_activity\n        action: ALLOW\n        policySetId: ${lssSiemPolicy.id}\n        conditions:\n          - negated: false\n            operator: OR\n            operands:\n              - objectType: CLIENT_TYPE\n                values:\n                  - zpn_client_type_exporter\n              - objectType: CLIENT_TYPE\n                values:\n                  - zpn_client_type_ip_anchoring\n              - objectType: CLIENT_TYPE\n                values:\n                  - zpn_client_type_zapp\n              - objectType: CLIENT_TYPE\n                values:\n                  - zpn_client_type_edge_connector\n              - objectType: CLIENT_TYPE\n                values:\n                  - zpn_client_type_machine_tunnel\n              - objectType: CLIENT_TYPE\n                values:\n                  - zpn_client_type_browser_isolation\n              - objectType: CLIENT_TYPE\n                values:\n                  - zpn_client_type_slogger\n      connectorGroups:\n        - ids:\n            - ${zpa_app_connector_group.example.id}\nvariables:\n  zpnTransLog:\n    fn::invoke:\n      Function: zpa:getZPALSSLogTypeFormats\n      Arguments:\n        logType: zpn_trans_log\n  lssSiemPolicy:\n    fn::invoke:\n      Function: zpa:getZPAPolicyType\n      Arguments:\n        policyType: SIEM_POLICY\n```\n\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language. [Visit](https://github.com/zscaler/zscaler-terraformer) ",
            "properties": {
                "config": {
                    "$ref": "#/types/zpa:index/ZPALSSConfigControllerConfig:ZPALSSConfigControllerConfig",
                    "description": "(Required)\n"
                },
                "connectorGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPALSSConfigControllerConnectorGroup:ZPALSSConfigControllerConnectorGroup"
                    },
                    "description": "(Optional)\n"
                },
                "policyRuleId": {
                    "type": "string"
                },
                "policyRuleResource": {
                    "$ref": "#/types/zpa:index/ZPALSSConfigControllerPolicyRuleResource:ZPALSSConfigControllerPolicyRuleResource",
                    "description": "(Optional)\n"
                }
            },
            "required": [
                "policyRuleId"
            ],
            "inputProperties": {
                "config": {
                    "$ref": "#/types/zpa:index/ZPALSSConfigControllerConfig:ZPALSSConfigControllerConfig",
                    "description": "(Required)\n"
                },
                "connectorGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPALSSConfigControllerConnectorGroup:ZPALSSConfigControllerConnectorGroup"
                    },
                    "description": "(Optional)\n"
                },
                "policyRuleResource": {
                    "$ref": "#/types/zpa:index/ZPALSSConfigControllerPolicyRuleResource:ZPALSSConfigControllerPolicyRuleResource",
                    "description": "(Optional)\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ZPALSSConfigController resources.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/zpa:index/ZPALSSConfigControllerConfig:ZPALSSConfigControllerConfig",
                        "description": "(Required)\n"
                    },
                    "connectorGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/ZPALSSConfigControllerConnectorGroup:ZPALSSConfigControllerConnectorGroup"
                        },
                        "description": "(Optional)\n"
                    },
                    "policyRuleId": {
                        "type": "string"
                    },
                    "policyRuleResource": {
                        "$ref": "#/types/zpa:index/ZPALSSConfigControllerPolicyRuleResource:ZPALSSConfigControllerPolicyRuleResource",
                        "description": "(Optional)\n"
                    }
                },
                "type": "object"
            }
        },
        "zpa:index/zPAPolicyAccessForwardingRule:ZPAPolicyAccessForwardingRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "This is for providing the rule action.\n"
                },
                "actionId": {
                    "type": "string",
                    "description": "This field defines the description of the server.\n"
                },
                "bypassDefaultRule": {
                    "type": "boolean"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPAPolicyAccessForwardingRuleCondition:ZPAPolicyAccessForwardingRuleCondition"
                    },
                    "description": "This is for proviidng the set of conditions for the policy.\n"
                },
                "customMsg": {
                    "type": "string",
                    "description": "This is for providing a customer message for the user.\n"
                },
                "defaultRule": {
                    "type": "boolean",
                    "description": "This is for providing a customer message for the user.\n"
                },
                "description": {
                    "type": "string",
                    "description": "This is the description of the access policy.\n"
                },
                "lssDefaultRule": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "This is the name of the policy.\n"
                },
                "operator": {
                    "type": "string"
                },
                "policySetId": {
                    "type": "string"
                },
                "policyType": {
                    "type": "string"
                },
                "priority": {
                    "type": "string"
                },
                "reauthDefaultRule": {
                    "type": "boolean"
                },
                "reauthIdleTimeout": {
                    "type": "string"
                },
                "reauthTimeout": {
                    "type": "string"
                },
                "ruleOrder": {
                    "type": "string"
                },
                "zpnInspectionProfileId": {
                    "type": "string"
                }
            },
            "required": [
                "conditions",
                "name",
                "operator",
                "policySetId",
                "policyType",
                "priority",
                "ruleOrder"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "description": "This is for providing the rule action.\n"
                },
                "actionId": {
                    "type": "string",
                    "description": "This field defines the description of the server.\n"
                },
                "bypassDefaultRule": {
                    "type": "boolean"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPAPolicyAccessForwardingRuleCondition:ZPAPolicyAccessForwardingRuleCondition"
                    },
                    "description": "This is for proviidng the set of conditions for the policy.\n"
                },
                "customMsg": {
                    "type": "string",
                    "description": "This is for providing a customer message for the user.\n"
                },
                "defaultRule": {
                    "type": "boolean",
                    "description": "This is for providing a customer message for the user.\n"
                },
                "description": {
                    "type": "string",
                    "description": "This is the description of the access policy.\n"
                },
                "lssDefaultRule": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "This is the name of the policy.\n"
                },
                "operator": {
                    "type": "string"
                },
                "policySetId": {
                    "type": "string"
                },
                "policyType": {
                    "type": "string"
                },
                "priority": {
                    "type": "string"
                },
                "reauthDefaultRule": {
                    "type": "boolean"
                },
                "reauthIdleTimeout": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "reauthTimeout": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "ruleOrder": {
                    "type": "string"
                },
                "zpnInspectionProfileId": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ZPAPolicyAccessForwardingRule resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "This is for providing the rule action.\n"
                    },
                    "actionId": {
                        "type": "string",
                        "description": "This field defines the description of the server.\n"
                    },
                    "bypassDefaultRule": {
                        "type": "boolean"
                    },
                    "conditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/ZPAPolicyAccessForwardingRuleCondition:ZPAPolicyAccessForwardingRuleCondition"
                        },
                        "description": "This is for proviidng the set of conditions for the policy.\n"
                    },
                    "customMsg": {
                        "type": "string",
                        "description": "This is for providing a customer message for the user.\n"
                    },
                    "defaultRule": {
                        "type": "boolean",
                        "description": "This is for providing a customer message for the user.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "This is the description of the access policy.\n"
                    },
                    "lssDefaultRule": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "This is the name of the policy.\n"
                    },
                    "operator": {
                        "type": "string"
                    },
                    "policySetId": {
                        "type": "string"
                    },
                    "policyType": {
                        "type": "string"
                    },
                    "priority": {
                        "type": "string"
                    },
                    "reauthDefaultRule": {
                        "type": "boolean"
                    },
                    "reauthIdleTimeout": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "reauthTimeout": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "ruleOrder": {
                        "type": "string"
                    },
                    "zpnInspectionProfileId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "zpa:index/zPAPolicyAccessInspectionRule:ZPAPolicyAccessInspectionRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "This is for providing the rule action.\n"
                },
                "actionId": {
                    "type": "string",
                    "description": "This field defines the description of the server.\n"
                },
                "bypassDefaultRule": {
                    "type": "boolean"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPAPolicyAccessInspectionRuleCondition:ZPAPolicyAccessInspectionRuleCondition"
                    },
                    "description": "This is for proviidng the set of conditions for the policy.\n"
                },
                "customMsg": {
                    "type": "string",
                    "description": "This is for providing a customer message for the user.\n"
                },
                "defaultRule": {
                    "type": "boolean",
                    "description": "This is for providing a customer message for the user.\n"
                },
                "description": {
                    "type": "string",
                    "description": "This is the description of the access policy.\n"
                },
                "lssDefaultRule": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "This is the name of the policy.\n"
                },
                "operator": {
                    "type": "string"
                },
                "policySetId": {
                    "type": "string"
                },
                "policyType": {
                    "type": "string"
                },
                "priority": {
                    "type": "string"
                },
                "reauthDefaultRule": {
                    "type": "boolean"
                },
                "reauthIdleTimeout": {
                    "type": "string"
                },
                "reauthTimeout": {
                    "type": "string"
                },
                "ruleOrder": {
                    "type": "string"
                },
                "zpnInspectionProfileId": {
                    "type": "string"
                }
            },
            "required": [
                "conditions",
                "name",
                "operator",
                "policySetId",
                "policyType",
                "priority",
                "ruleOrder"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "description": "This is for providing the rule action.\n"
                },
                "actionId": {
                    "type": "string",
                    "description": "This field defines the description of the server.\n"
                },
                "bypassDefaultRule": {
                    "type": "boolean"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPAPolicyAccessInspectionRuleCondition:ZPAPolicyAccessInspectionRuleCondition"
                    },
                    "description": "This is for proviidng the set of conditions for the policy.\n"
                },
                "customMsg": {
                    "type": "string",
                    "description": "This is for providing a customer message for the user.\n"
                },
                "defaultRule": {
                    "type": "boolean",
                    "description": "This is for providing a customer message for the user.\n"
                },
                "description": {
                    "type": "string",
                    "description": "This is the description of the access policy.\n"
                },
                "lssDefaultRule": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "This is the name of the policy.\n"
                },
                "operator": {
                    "type": "string"
                },
                "policySetId": {
                    "type": "string"
                },
                "policyType": {
                    "type": "string"
                },
                "priority": {
                    "type": "string"
                },
                "reauthDefaultRule": {
                    "type": "boolean"
                },
                "reauthIdleTimeout": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "reauthTimeout": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "ruleOrder": {
                    "type": "string"
                },
                "zpnInspectionProfileId": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ZPAPolicyAccessInspectionRule resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "This is for providing the rule action.\n"
                    },
                    "actionId": {
                        "type": "string",
                        "description": "This field defines the description of the server.\n"
                    },
                    "bypassDefaultRule": {
                        "type": "boolean"
                    },
                    "conditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/ZPAPolicyAccessInspectionRuleCondition:ZPAPolicyAccessInspectionRuleCondition"
                        },
                        "description": "This is for proviidng the set of conditions for the policy.\n"
                    },
                    "customMsg": {
                        "type": "string",
                        "description": "This is for providing a customer message for the user.\n"
                    },
                    "defaultRule": {
                        "type": "boolean",
                        "description": "This is for providing a customer message for the user.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "This is the description of the access policy.\n"
                    },
                    "lssDefaultRule": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "This is the name of the policy.\n"
                    },
                    "operator": {
                        "type": "string"
                    },
                    "policySetId": {
                        "type": "string"
                    },
                    "policyType": {
                        "type": "string"
                    },
                    "priority": {
                        "type": "string"
                    },
                    "reauthDefaultRule": {
                        "type": "boolean"
                    },
                    "reauthIdleTimeout": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "reauthTimeout": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "ruleOrder": {
                        "type": "string"
                    },
                    "zpnInspectionProfileId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "zpa:index/zPAPolicyAccessRule:ZPAPolicyAccessRule": {
            "description": "\n\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language. [Visit](https://github.com/zscaler/zscaler-terraformer) Policy access rule can be imported by using `\u003cPOLICY ACCESS RULE ID\u003e` as the import ID. For example\n\n```sh\n $ pulumi import zpa:index/zPAPolicyAccessRule:ZPAPolicyAccessRule example \u003cpolicy_access_rule_id\u003e\n```\n\n ",
            "properties": {
                "action": {
                    "type": "string",
                    "description": "(Optional) This is for providing the rule action. Supported values: ``ALLOW``, ``DENY``\n"
                },
                "actionId": {
                    "type": "string",
                    "description": "This field defines the description of the server.\n"
                },
                "appConnectorGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPAPolicyAccessRuleAppConnectorGroup:ZPAPolicyAccessRuleAppConnectorGroup"
                    },
                    "description": "List of app-connector IDs.\n"
                },
                "appServerGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPAPolicyAccessRuleAppServerGroup:ZPAPolicyAccessRuleAppServerGroup"
                    },
                    "description": "List of the server group IDs.\n"
                },
                "bypassDefaultRule": {
                    "type": "boolean"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPAPolicyAccessRuleCondition:ZPAPolicyAccessRuleCondition"
                    },
                    "description": "(Optional)\n"
                },
                "customMsg": {
                    "type": "string",
                    "description": "(Optional) This is for providing a customer message for the user.\n"
                },
                "defaultRule": {
                    "type": "boolean",
                    "description": "This is for providing a customer message for the user.\n"
                },
                "description": {
                    "type": "string",
                    "description": "(Optional) This is the description of the access policy rule.\n"
                },
                "lssDefaultRule": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "operator": {
                    "type": "string",
                    "description": "(Optional) Supported values: ``AND``, and ``OR``\n"
                },
                "policySetId": {
                    "type": "string"
                },
                "policyType": {
                    "type": "string",
                    "description": "(Optional) Supported values: ``ACCESS_POLICY`` or ``GLOBAL_POLICY``\n"
                },
                "priority": {
                    "type": "string"
                },
                "reauthDefaultRule": {
                    "type": "boolean"
                },
                "reauthIdleTimeout": {
                    "type": "string"
                },
                "reauthTimeout": {
                    "type": "string"
                },
                "ruleOrder": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "zpnInspectionProfileId": {
                    "type": "string"
                }
            },
            "required": [
                "appConnectorGroups",
                "appServerGroups",
                "conditions",
                "name",
                "operator",
                "policySetId",
                "policyType",
                "priority",
                "ruleOrder"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "description": "(Optional) This is for providing the rule action. Supported values: ``ALLOW``, ``DENY``\n"
                },
                "actionId": {
                    "type": "string",
                    "description": "This field defines the description of the server.\n"
                },
                "appConnectorGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPAPolicyAccessRuleAppConnectorGroup:ZPAPolicyAccessRuleAppConnectorGroup"
                    },
                    "description": "List of app-connector IDs.\n"
                },
                "appServerGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPAPolicyAccessRuleAppServerGroup:ZPAPolicyAccessRuleAppServerGroup"
                    },
                    "description": "List of the server group IDs.\n"
                },
                "bypassDefaultRule": {
                    "type": "boolean"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPAPolicyAccessRuleCondition:ZPAPolicyAccessRuleCondition"
                    },
                    "description": "(Optional)\n"
                },
                "customMsg": {
                    "type": "string",
                    "description": "(Optional) This is for providing a customer message for the user.\n"
                },
                "defaultRule": {
                    "type": "boolean",
                    "description": "This is for providing a customer message for the user.\n"
                },
                "description": {
                    "type": "string",
                    "description": "(Optional) This is the description of the access policy rule.\n"
                },
                "lssDefaultRule": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "operator": {
                    "type": "string",
                    "description": "(Optional) Supported values: ``AND``, and ``OR``\n"
                },
                "policySetId": {
                    "type": "string"
                },
                "policyType": {
                    "type": "string",
                    "description": "(Optional) Supported values: ``ACCESS_POLICY`` or ``GLOBAL_POLICY``\n"
                },
                "priority": {
                    "type": "string"
                },
                "reauthDefaultRule": {
                    "type": "boolean"
                },
                "reauthIdleTimeout": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "reauthTimeout": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "ruleOrder": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "zpnInspectionProfileId": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ZPAPolicyAccessRule resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "(Optional) This is for providing the rule action. Supported values: ``ALLOW``, ``DENY``\n"
                    },
                    "actionId": {
                        "type": "string",
                        "description": "This field defines the description of the server.\n"
                    },
                    "appConnectorGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/ZPAPolicyAccessRuleAppConnectorGroup:ZPAPolicyAccessRuleAppConnectorGroup"
                        },
                        "description": "List of app-connector IDs.\n"
                    },
                    "appServerGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/ZPAPolicyAccessRuleAppServerGroup:ZPAPolicyAccessRuleAppServerGroup"
                        },
                        "description": "List of the server group IDs.\n"
                    },
                    "bypassDefaultRule": {
                        "type": "boolean"
                    },
                    "conditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/ZPAPolicyAccessRuleCondition:ZPAPolicyAccessRuleCondition"
                        },
                        "description": "(Optional)\n"
                    },
                    "customMsg": {
                        "type": "string",
                        "description": "(Optional) This is for providing a customer message for the user.\n"
                    },
                    "defaultRule": {
                        "type": "boolean",
                        "description": "This is for providing a customer message for the user.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(Optional) This is the description of the access policy rule.\n"
                    },
                    "lssDefaultRule": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "(Optional)\n"
                    },
                    "operator": {
                        "type": "string",
                        "description": "(Optional) Supported values: ``AND``, and ``OR``\n"
                    },
                    "policySetId": {
                        "type": "string"
                    },
                    "policyType": {
                        "type": "string",
                        "description": "(Optional) Supported values: ``ACCESS_POLICY`` or ``GLOBAL_POLICY``\n"
                    },
                    "priority": {
                        "type": "string"
                    },
                    "reauthDefaultRule": {
                        "type": "boolean"
                    },
                    "reauthIdleTimeout": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "reauthTimeout": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "ruleOrder": {
                        "type": "string",
                        "description": "(Optional)\n"
                    },
                    "zpnInspectionProfileId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "zpa:index/zPAPolicyAccessTimeOutRule:ZPAPolicyAccessTimeOutRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "This is for providing the rule action.\n"
                },
                "actionId": {
                    "type": "string",
                    "description": "This field defines the description of the server.\n"
                },
                "bypassDefaultRule": {
                    "type": "boolean"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPAPolicyAccessTimeOutRuleCondition:ZPAPolicyAccessTimeOutRuleCondition"
                    },
                    "description": "This is for proviidng the set of conditions for the policy.\n"
                },
                "customMsg": {
                    "type": "string",
                    "description": "This is for providing a customer message for the user.\n"
                },
                "defaultRule": {
                    "type": "boolean",
                    "description": "This is for providing a customer message for the user.\n"
                },
                "description": {
                    "type": "string",
                    "description": "This is the description of the access policy.\n"
                },
                "lssDefaultRule": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "This is the name of the policy.\n"
                },
                "operator": {
                    "type": "string"
                },
                "policySetId": {
                    "type": "string"
                },
                "policyType": {
                    "type": "string"
                },
                "priority": {
                    "type": "string"
                },
                "reauthDefaultRule": {
                    "type": "boolean"
                },
                "reauthIdleTimeout": {
                    "type": "string"
                },
                "reauthTimeout": {
                    "type": "string"
                },
                "ruleOrder": {
                    "type": "string"
                },
                "zpnInspectionProfileId": {
                    "type": "string"
                }
            },
            "required": [
                "conditions",
                "name",
                "operator",
                "policySetId",
                "policyType",
                "priority",
                "ruleOrder"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "description": "This is for providing the rule action.\n"
                },
                "actionId": {
                    "type": "string",
                    "description": "This field defines the description of the server.\n"
                },
                "bypassDefaultRule": {
                    "type": "boolean"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPAPolicyAccessTimeOutRuleCondition:ZPAPolicyAccessTimeOutRuleCondition"
                    },
                    "description": "This is for proviidng the set of conditions for the policy.\n"
                },
                "customMsg": {
                    "type": "string",
                    "description": "This is for providing a customer message for the user.\n"
                },
                "defaultRule": {
                    "type": "boolean",
                    "description": "This is for providing a customer message for the user.\n"
                },
                "description": {
                    "type": "string",
                    "description": "This is the description of the access policy.\n"
                },
                "lssDefaultRule": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "This is the name of the policy.\n"
                },
                "operator": {
                    "type": "string"
                },
                "policySetId": {
                    "type": "string"
                },
                "policyType": {
                    "type": "string"
                },
                "priority": {
                    "type": "string"
                },
                "reauthDefaultRule": {
                    "type": "boolean"
                },
                "reauthIdleTimeout": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "reauthTimeout": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "ruleOrder": {
                    "type": "string"
                },
                "zpnInspectionProfileId": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ZPAPolicyAccessTimeOutRule resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "This is for providing the rule action.\n"
                    },
                    "actionId": {
                        "type": "string",
                        "description": "This field defines the description of the server.\n"
                    },
                    "bypassDefaultRule": {
                        "type": "boolean"
                    },
                    "conditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/ZPAPolicyAccessTimeOutRuleCondition:ZPAPolicyAccessTimeOutRuleCondition"
                        },
                        "description": "This is for proviidng the set of conditions for the policy.\n"
                    },
                    "customMsg": {
                        "type": "string",
                        "description": "This is for providing a customer message for the user.\n"
                    },
                    "defaultRule": {
                        "type": "boolean",
                        "description": "This is for providing a customer message for the user.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "This is the description of the access policy.\n"
                    },
                    "lssDefaultRule": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "This is the name of the policy.\n"
                    },
                    "operator": {
                        "type": "string"
                    },
                    "policySetId": {
                        "type": "string"
                    },
                    "policyType": {
                        "type": "string"
                    },
                    "priority": {
                        "type": "string"
                    },
                    "reauthDefaultRule": {
                        "type": "boolean"
                    },
                    "reauthIdleTimeout": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "reauthTimeout": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "ruleOrder": {
                        "type": "string"
                    },
                    "zpnInspectionProfileId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "zpa:index/zPAProvisioningKey:ZPAProvisioningKey": {
            "description": "\n\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language. [Visit](https://github.com/zscaler/zscaler-terraformer) Provisioning key can be imported by using `\u003cPROVISIONING KEY ID\u003e` or `\u003cPROVISIONING KEY NAME\u003e` as the import ID. For example\n\n```sh\n $ pulumi import zpa:index/zPAProvisioningKey:ZPAProvisioningKey example \u003cprovisioning_key_id\u003e\n```\n\n or\n\n```sh\n $ pulumi import zpa:index/zPAProvisioningKey:ZPAProvisioningKey example \u003cprovisioning_key_name\u003e\n```\n\n ",
            "properties": {
                "appConnectorGroupId": {
                    "type": "string"
                },
                "appConnectorGroupName": {
                    "type": "string",
                    "description": "Read only property. Applicable only for GET calls, ignored in PUT/POST calls.\n"
                },
                "associationType": {
                    "type": "string",
                    "description": "Specifies the provisioning key type for App Connectors or ZPA Private Service Edges. The supported values are `CONNECTOR_GRP` and `SERVICE_EDGE_GRP`\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the provisioning key is enabled or not. Supported values: true, false\n"
                },
                "enrollmentCertId": {
                    "type": "string",
                    "description": "ID of the enrollment certificate that can be used for this provisioning key. `ID` of the existing enrollment certificate that has the private key\n"
                },
                "enrollmentCertName": {
                    "type": "string",
                    "description": "Read only property. Applicable only for GET calls, ignored in PUT/POST calls.\n"
                },
                "ipAcls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "key": {
                    "type": "string",
                    "description": "read only field. Ignored in PUT/POST calls.\n",
                    "secret": true
                },
                "maxUsage": {
                    "type": "string",
                    "description": "The maximum number of instances where this provisioning key can be used for enrolling an App Connector or Service Edge.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the provisioning key.\n"
                },
                "uiConfig": {
                    "type": "string"
                },
                "usageCount": {
                    "type": "string",
                    "description": "The provisioning key utilization count.\n"
                },
                "zcomponentId": {
                    "type": "string",
                    "description": "ID of the existing App Connector or Service Edge Group.\n"
                },
                "zcomponentName": {
                    "type": "string",
                    "description": "Read only property. Applicable only for GET calls, ignored in PUT/POST calls.\n"
                }
            },
            "required": [
                "appConnectorGroupName",
                "associationType",
                "enrollmentCertId",
                "enrollmentCertName",
                "maxUsage",
                "name",
                "key",
                "usageCount",
                "zcomponentId",
                "zcomponentName"
            ],
            "inputProperties": {
                "appConnectorGroupId": {
                    "type": "string"
                },
                "associationType": {
                    "type": "string",
                    "description": "Specifies the provisioning key type for App Connectors or ZPA Private Service Edges. The supported values are `CONNECTOR_GRP` and `SERVICE_EDGE_GRP`\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the provisioning key is enabled or not. Supported values: true, false\n"
                },
                "enrollmentCertId": {
                    "type": "string",
                    "description": "ID of the enrollment certificate that can be used for this provisioning key. `ID` of the existing enrollment certificate that has the private key\n"
                },
                "ipAcls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "maxUsage": {
                    "type": "string",
                    "description": "The maximum number of instances where this provisioning key can be used for enrolling an App Connector or Service Edge.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the provisioning key.\n"
                },
                "uiConfig": {
                    "type": "string"
                },
                "usageCount": {
                    "type": "string",
                    "description": "The provisioning key utilization count.\n"
                },
                "zcomponentId": {
                    "type": "string",
                    "description": "ID of the existing App Connector or Service Edge Group.\n"
                },
                "zcomponentName": {
                    "type": "string",
                    "description": "Read only property. Applicable only for GET calls, ignored in PUT/POST calls.\n"
                }
            },
            "requiredInputs": [
                "associationType",
                "enrollmentCertId",
                "maxUsage",
                "zcomponentId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ZPAProvisioningKey resources.\n",
                "properties": {
                    "appConnectorGroupId": {
                        "type": "string"
                    },
                    "appConnectorGroupName": {
                        "type": "string",
                        "description": "Read only property. Applicable only for GET calls, ignored in PUT/POST calls.\n"
                    },
                    "associationType": {
                        "type": "string",
                        "description": "Specifies the provisioning key type for App Connectors or ZPA Private Service Edges. The supported values are `CONNECTOR_GRP` and `SERVICE_EDGE_GRP`\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the provisioning key is enabled or not. Supported values: true, false\n"
                    },
                    "enrollmentCertId": {
                        "type": "string",
                        "description": "ID of the enrollment certificate that can be used for this provisioning key. `ID` of the existing enrollment certificate that has the private key\n"
                    },
                    "enrollmentCertName": {
                        "type": "string",
                        "description": "Read only property. Applicable only for GET calls, ignored in PUT/POST calls.\n"
                    },
                    "ipAcls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "key": {
                        "type": "string",
                        "description": "read only field. Ignored in PUT/POST calls.\n",
                        "secret": true
                    },
                    "maxUsage": {
                        "type": "string",
                        "description": "The maximum number of instances where this provisioning key can be used for enrolling an App Connector or Service Edge.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the provisioning key.\n"
                    },
                    "uiConfig": {
                        "type": "string"
                    },
                    "usageCount": {
                        "type": "string",
                        "description": "The provisioning key utilization count.\n"
                    },
                    "zcomponentId": {
                        "type": "string",
                        "description": "ID of the existing App Connector or Service Edge Group.\n"
                    },
                    "zcomponentName": {
                        "type": "string",
                        "description": "Read only property. Applicable only for GET calls, ignored in PUT/POST calls.\n"
                    }
                },
                "type": "object"
            }
        },
        "zpa:index/zPASegmentGroup:ZPASegmentGroup": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@zscaler/pulumi-zpa\";\n\n// ZPA Segment Group resource\nconst testSegmentGroup = new zpa.ZPASegmentGroup(\"testSegmentGroup\", {\n    description: \"test1-segment-group\",\n    enabled: true,\n    tcpKeepAliveEnabled: \"1\",\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zpa as zpa\n\n# ZPA Segment Group resource\ntest_segment_group = zpa.ZPASegmentGroup(\"testSegmentGroup\",\n    description=\"test1-segment-group\",\n    enabled=True,\n    tcp_keep_alive_enabled=\"1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = zscaler.PulumiPackage.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // ZPA Segment Group resource\n    var testSegmentGroup = new Zpa.ZPASegmentGroup(\"testSegmentGroup\", new()\n    {\n        Description = \"test1-segment-group\",\n        Enabled = true,\n        TcpKeepAliveEnabled = \"1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.NewZPASegmentGroup(ctx, \"testSegmentGroup\", \u0026zpa.ZPASegmentGroupArgs{\n\t\t\tDescription:         pulumi.String(\"test1-segment-group\"),\n\t\t\tEnabled:             pulumi.Bool(true),\n\t\t\tTcpKeepAliveEnabled: pulumi.String(\"1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZPASegmentGroup;\nimport com.pulumi.zpa.ZPASegmentGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testSegmentGroup = new ZPASegmentGroup(\"testSegmentGroup\", ZPASegmentGroupArgs.builder()        \n            .description(\"test1-segment-group\")\n            .enabled(true)\n            .tcpKeepAliveEnabled(\"1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # ZPA Segment Group resource\n  testSegmentGroup:\n    type: zpa:ZPASegmentGroup\n    properties:\n      description: test1-segment-group\n      enabled: true\n      tcpKeepAliveEnabled: '1'\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language. [Visit](https://github.com/zscaler/zscaler-terraformer) **segment_group** can be imported by using `\u003cSEGMENT GROUP ID\u003e` or `\u003cSEGMENT GROUP NAME\u003e` as the import ID. For example\n\n```sh\n $ pulumi import zpa:index/zPASegmentGroup:ZPASegmentGroup example \u003csegment_group_id\u003e\n```\n\n or\n\n```sh\n $ pulumi import zpa:index/zPASegmentGroup:ZPASegmentGroup example \u003csegment_group_name\u003e\n```\n\n ",
            "properties": {
                "applications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPASegmentGroupApplication:ZPASegmentGroupApplication"
                    }
                },
                "configSpace": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "description": {
                    "type": "string",
                    "description": "(Optional) Description of the segment group.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(Optional) Whether this segment group is enabled or not.\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Required) Name of the segment group.\n"
                },
                "policyMigrated": {
                    "type": "boolean"
                },
                "tcpKeepAliveEnabled": {
                    "type": "string",
                    "description": "(Optional)\n"
                }
            },
            "required": [
                "applications",
                "name"
            ],
            "inputProperties": {
                "applications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPASegmentGroupApplication:ZPASegmentGroupApplication"
                    }
                },
                "configSpace": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "description": {
                    "type": "string",
                    "description": "(Optional) Description of the segment group.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(Optional) Whether this segment group is enabled or not.\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Required) Name of the segment group.\n"
                },
                "policyMigrated": {
                    "type": "boolean"
                },
                "tcpKeepAliveEnabled": {
                    "type": "string",
                    "description": "(Optional)\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ZPASegmentGroup resources.\n",
                "properties": {
                    "applications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/ZPASegmentGroupApplication:ZPASegmentGroupApplication"
                        }
                    },
                    "configSpace": {
                        "type": "string",
                        "description": "(Optional)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(Optional) Description of the segment group.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(Optional) Whether this segment group is enabled or not.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(Required) Name of the segment group.\n"
                    },
                    "policyMigrated": {
                        "type": "boolean"
                    },
                    "tcpKeepAliveEnabled": {
                        "type": "string",
                        "description": "(Optional)\n"
                    }
                },
                "type": "object"
            }
        },
        "zpa:index/zPAServerGroup:ZPAServerGroup": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@zscaler/pulumi-zpa\";\n\n// Create a App Connector Group\nconst exampleZPAAppConnectorGroup = new zpa.ZPAAppConnectorGroup(\"exampleZPAAppConnectorGroup\", {\n    description: \"Example\",\n    enabled: true,\n    cityCountry: \"San Jose, CA\",\n    countryCode: \"US\",\n    latitude: \"37.338\",\n    longitude: \"-121.8863\",\n    location: \"San Jose, CA, US\",\n    upgradeDay: \"SUNDAY\",\n    upgradeTimeInSecs: \"66600\",\n    overrideVersionProfile: true,\n    versionProfileId: \"0\",\n    dnsQueryType: \"IPV4\",\n});\n// Create a Server Group resource with Dynamic Discovery Enabled\nconst exampleZPAServerGroup = new zpa.ZPAServerGroup(\"exampleZPAServerGroup\", {\n    description: \"Example\",\n    enabled: true,\n    dynamicDiscovery: true,\n    appConnectorGroups: [{\n        ids: [exampleZPAAppConnectorGroup.id],\n    }],\n}, {\n    dependsOn: [exampleZPAAppConnectorGroup],\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zpa as zpa\n\n# Create a App Connector Group\nexample_zpa_app_connector_group = zpa.ZPAAppConnectorGroup(\"exampleZPAAppConnectorGroup\",\n    description=\"Example\",\n    enabled=True,\n    city_country=\"San Jose, CA\",\n    country_code=\"US\",\n    latitude=\"37.338\",\n    longitude=\"-121.8863\",\n    location=\"San Jose, CA, US\",\n    upgrade_day=\"SUNDAY\",\n    upgrade_time_in_secs=\"66600\",\n    override_version_profile=True,\n    version_profile_id=\"0\",\n    dns_query_type=\"IPV4\")\n# Create a Server Group resource with Dynamic Discovery Enabled\nexample_zpa_server_group = zpa.ZPAServerGroup(\"exampleZPAServerGroup\",\n    description=\"Example\",\n    enabled=True,\n    dynamic_discovery=True,\n    app_connector_groups=[zpa.ZPAServerGroupAppConnectorGroupArgs(\n        ids=[example_zpa_app_connector_group.id],\n    )],\n    opts=pulumi.ResourceOptions(depends_on=[example_zpa_app_connector_group]))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = zscaler.PulumiPackage.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a App Connector Group\n    var exampleZPAAppConnectorGroup = new Zpa.ZPAAppConnectorGroup(\"exampleZPAAppConnectorGroup\", new()\n    {\n        Description = \"Example\",\n        Enabled = true,\n        CityCountry = \"San Jose, CA\",\n        CountryCode = \"US\",\n        Latitude = \"37.338\",\n        Longitude = \"-121.8863\",\n        Location = \"San Jose, CA, US\",\n        UpgradeDay = \"SUNDAY\",\n        UpgradeTimeInSecs = \"66600\",\n        OverrideVersionProfile = true,\n        VersionProfileId = \"0\",\n        DnsQueryType = \"IPV4\",\n    });\n\n    // Create a Server Group resource with Dynamic Discovery Enabled\n    var exampleZPAServerGroup = new Zpa.ZPAServerGroup(\"exampleZPAServerGroup\", new()\n    {\n        Description = \"Example\",\n        Enabled = true,\n        DynamicDiscovery = true,\n        AppConnectorGroups = new[]\n        {\n            new Zpa.Inputs.ZPAServerGroupAppConnectorGroupArgs\n            {\n                Ids = new[]\n                {\n                    exampleZPAAppConnectorGroup.Id,\n                },\n            },\n        },\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            exampleZPAAppConnectorGroup,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleZPAAppConnectorGroup, err := zpa.NewZPAAppConnectorGroup(ctx, \"exampleZPAAppConnectorGroup\", \u0026zpa.ZPAAppConnectorGroupArgs{\n\t\t\tDescription:            pulumi.String(\"Example\"),\n\t\t\tEnabled:                pulumi.Bool(true),\n\t\t\tCityCountry:            pulumi.String(\"San Jose, CA\"),\n\t\t\tCountryCode:            pulumi.String(\"US\"),\n\t\t\tLatitude:               pulumi.String(\"37.338\"),\n\t\t\tLongitude:              pulumi.String(\"-121.8863\"),\n\t\t\tLocation:               pulumi.String(\"San Jose, CA, US\"),\n\t\t\tUpgradeDay:             pulumi.String(\"SUNDAY\"),\n\t\t\tUpgradeTimeInSecs:      pulumi.String(\"66600\"),\n\t\t\tOverrideVersionProfile: pulumi.Bool(true),\n\t\t\tVersionProfileId:       pulumi.String(\"0\"),\n\t\t\tDnsQueryType:           pulumi.String(\"IPV4\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = zpa.NewZPAServerGroup(ctx, \"exampleZPAServerGroup\", \u0026zpa.ZPAServerGroupArgs{\n\t\t\tDescription:      pulumi.String(\"Example\"),\n\t\t\tEnabled:          pulumi.Bool(true),\n\t\t\tDynamicDiscovery: pulumi.Bool(true),\n\t\t\tAppConnectorGroups: zpa.ZPAServerGroupAppConnectorGroupArray{\n\t\t\t\t\u0026zpa.ZPAServerGroupAppConnectorGroupArgs{\n\t\t\t\t\tIds: pulumi.StringArray{\n\t\t\t\t\t\texampleZPAAppConnectorGroup.ID(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\texampleZPAAppConnectorGroup,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZPAAppConnectorGroup;\nimport com.pulumi.zpa.ZPAAppConnectorGroupArgs;\nimport com.pulumi.zpa.ZPAServerGroup;\nimport com.pulumi.zpa.ZPAServerGroupArgs;\nimport com.pulumi.zpa.inputs.ZPAServerGroupAppConnectorGroupArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleZPAAppConnectorGroup = new ZPAAppConnectorGroup(\"exampleZPAAppConnectorGroup\", ZPAAppConnectorGroupArgs.builder()        \n            .description(\"Example\")\n            .enabled(true)\n            .cityCountry(\"San Jose, CA\")\n            .countryCode(\"US\")\n            .latitude(\"37.338\")\n            .longitude(\"-121.8863\")\n            .location(\"San Jose, CA, US\")\n            .upgradeDay(\"SUNDAY\")\n            .upgradeTimeInSecs(\"66600\")\n            .overrideVersionProfile(true)\n            .versionProfileId(0)\n            .dnsQueryType(\"IPV4\")\n            .build());\n\n        var exampleZPAServerGroup = new ZPAServerGroup(\"exampleZPAServerGroup\", ZPAServerGroupArgs.builder()        \n            .description(\"Example\")\n            .enabled(true)\n            .dynamicDiscovery(true)\n            .appConnectorGroups(ZPAServerGroupAppConnectorGroupArgs.builder()\n                .ids(exampleZPAAppConnectorGroup.id())\n                .build())\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(exampleZPAAppConnectorGroup)\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a Server Group resource with Dynamic Discovery Enabled\n  exampleZPAServerGroup:\n    type: zpa:ZPAServerGroup\n    properties:\n      description: Example\n      enabled: true\n      dynamicDiscovery: true\n      appConnectorGroups:\n        - ids:\n            - ${exampleZPAAppConnectorGroup.id}\n    options:\n      dependson:\n        - ${exampleZPAAppConnectorGroup}\n  # Create a App Connector Group\n  exampleZPAAppConnectorGroup:\n    type: zpa:ZPAAppConnectorGroup\n    properties:\n      description: Example\n      enabled: true\n      cityCountry: San Jose, CA\n      countryCode: US\n      latitude: '37.338'\n      longitude: '-121.8863'\n      location: San Jose, CA, US\n      upgradeDay: SUNDAY\n      upgradeTimeInSecs: '66600'\n      overrideVersionProfile: true\n      versionProfileId: 0\n      dnsQueryType: IPV4\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@zscaler/pulumi-zpa\";\n\n// Create an application server\nconst exampleZPAApplicationServer = new zpa.ZPAApplicationServer(\"exampleZPAApplicationServer\", {\n    description: \"Example\",\n    address: \"server.example.com\",\n    enabled: true,\n});\n// Create a App Connector Group\nconst exampleZPAAppConnectorGroup = new zpa.ZPAAppConnectorGroup(\"exampleZPAAppConnectorGroup\", {\n    description: \"Example\",\n    enabled: true,\n    cityCountry: \"San Jose, CA\",\n    countryCode: \"US\",\n    latitude: \"37.338\",\n    longitude: \"-121.8863\",\n    location: \"San Jose, CA, US\",\n    upgradeDay: \"SUNDAY\",\n    upgradeTimeInSecs: \"66600\",\n    overrideVersionProfile: true,\n    versionProfileId: \"0\",\n    dnsQueryType: \"IPV4\",\n});\n// ZPA Server Group resource with Dynamic Discovery Disabled\nconst exampleZPAServerGroup = new zpa.ZPAServerGroup(\"exampleZPAServerGroup\", {\n    description: \"Example\",\n    enabled: true,\n    dynamicDiscovery: false,\n    servers: [{\n        ids: [exampleZPAApplicationServer.id],\n    }],\n    appConnectorGroups: [{\n        ids: [exampleZPAAppConnectorGroup.id],\n    }],\n}, {\n    dependsOn: [\n        exampleZPAAppConnectorGroup,\n        zpa_application_server.server,\n    ],\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zpa as zpa\n\n# Create an application server\nexample_zpa_application_server = zpa.ZPAApplicationServer(\"exampleZPAApplicationServer\",\n    description=\"Example\",\n    address=\"server.example.com\",\n    enabled=True)\n# Create a App Connector Group\nexample_zpa_app_connector_group = zpa.ZPAAppConnectorGroup(\"exampleZPAAppConnectorGroup\",\n    description=\"Example\",\n    enabled=True,\n    city_country=\"San Jose, CA\",\n    country_code=\"US\",\n    latitude=\"37.338\",\n    longitude=\"-121.8863\",\n    location=\"San Jose, CA, US\",\n    upgrade_day=\"SUNDAY\",\n    upgrade_time_in_secs=\"66600\",\n    override_version_profile=True,\n    version_profile_id=\"0\",\n    dns_query_type=\"IPV4\")\n# ZPA Server Group resource with Dynamic Discovery Disabled\nexample_zpa_server_group = zpa.ZPAServerGroup(\"exampleZPAServerGroup\",\n    description=\"Example\",\n    enabled=True,\n    dynamic_discovery=False,\n    servers=[zpa.ZPAServerGroupServerArgs(\n        ids=[example_zpa_application_server.id],\n    )],\n    app_connector_groups=[zpa.ZPAServerGroupAppConnectorGroupArgs(\n        ids=[example_zpa_app_connector_group.id],\n    )],\n    opts=pulumi.ResourceOptions(depends_on=[\n            example_zpa_app_connector_group,\n            zpa_application_server[\"server\"],\n        ]))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = zscaler.PulumiPackage.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create an application server\n    var exampleZPAApplicationServer = new Zpa.ZPAApplicationServer(\"exampleZPAApplicationServer\", new()\n    {\n        Description = \"Example\",\n        Address = \"server.example.com\",\n        Enabled = true,\n    });\n\n    // Create a App Connector Group\n    var exampleZPAAppConnectorGroup = new Zpa.ZPAAppConnectorGroup(\"exampleZPAAppConnectorGroup\", new()\n    {\n        Description = \"Example\",\n        Enabled = true,\n        CityCountry = \"San Jose, CA\",\n        CountryCode = \"US\",\n        Latitude = \"37.338\",\n        Longitude = \"-121.8863\",\n        Location = \"San Jose, CA, US\",\n        UpgradeDay = \"SUNDAY\",\n        UpgradeTimeInSecs = \"66600\",\n        OverrideVersionProfile = true,\n        VersionProfileId = \"0\",\n        DnsQueryType = \"IPV4\",\n    });\n\n    // ZPA Server Group resource with Dynamic Discovery Disabled\n    var exampleZPAServerGroup = new Zpa.ZPAServerGroup(\"exampleZPAServerGroup\", new()\n    {\n        Description = \"Example\",\n        Enabled = true,\n        DynamicDiscovery = false,\n        Servers = new[]\n        {\n            new Zpa.Inputs.ZPAServerGroupServerArgs\n            {\n                Ids = new[]\n                {\n                    exampleZPAApplicationServer.Id,\n                },\n            },\n        },\n        AppConnectorGroups = new[]\n        {\n            new Zpa.Inputs.ZPAServerGroupAppConnectorGroupArgs\n            {\n                Ids = new[]\n                {\n                    exampleZPAAppConnectorGroup.Id,\n                },\n            },\n        },\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            exampleZPAAppConnectorGroup,\n            zpa_application_server.Server,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleZPAApplicationServer, err := zpa.NewZPAApplicationServer(ctx, \"exampleZPAApplicationServer\", \u0026zpa.ZPAApplicationServerArgs{\n\t\t\tDescription: pulumi.String(\"Example\"),\n\t\t\tAddress:     pulumi.String(\"server.example.com\"),\n\t\t\tEnabled:     pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleZPAAppConnectorGroup, err := zpa.NewZPAAppConnectorGroup(ctx, \"exampleZPAAppConnectorGroup\", \u0026zpa.ZPAAppConnectorGroupArgs{\n\t\t\tDescription:            pulumi.String(\"Example\"),\n\t\t\tEnabled:                pulumi.Bool(true),\n\t\t\tCityCountry:            pulumi.String(\"San Jose, CA\"),\n\t\t\tCountryCode:            pulumi.String(\"US\"),\n\t\t\tLatitude:               pulumi.String(\"37.338\"),\n\t\t\tLongitude:              pulumi.String(\"-121.8863\"),\n\t\t\tLocation:               pulumi.String(\"San Jose, CA, US\"),\n\t\t\tUpgradeDay:             pulumi.String(\"SUNDAY\"),\n\t\t\tUpgradeTimeInSecs:      pulumi.String(\"66600\"),\n\t\t\tOverrideVersionProfile: pulumi.Bool(true),\n\t\t\tVersionProfileId:       pulumi.String(\"0\"),\n\t\t\tDnsQueryType:           pulumi.String(\"IPV4\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = zpa.NewZPAServerGroup(ctx, \"exampleZPAServerGroup\", \u0026zpa.ZPAServerGroupArgs{\n\t\t\tDescription:      pulumi.String(\"Example\"),\n\t\t\tEnabled:          pulumi.Bool(true),\n\t\t\tDynamicDiscovery: pulumi.Bool(false),\n\t\t\tServers: zpa.ZPAServerGroupServerArray{\n\t\t\t\t\u0026zpa.ZPAServerGroupServerArgs{\n\t\t\t\t\tIds: pulumi.StringArray{\n\t\t\t\t\t\texampleZPAApplicationServer.ID(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tAppConnectorGroups: zpa.ZPAServerGroupAppConnectorGroupArray{\n\t\t\t\t\u0026zpa.ZPAServerGroupAppConnectorGroupArgs{\n\t\t\t\t\tIds: pulumi.StringArray{\n\t\t\t\t\t\texampleZPAAppConnectorGroup.ID(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\texampleZPAAppConnectorGroup,\n\t\t\tzpa_application_server.Server,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZPAApplicationServer;\nimport com.pulumi.zpa.ZPAApplicationServerArgs;\nimport com.pulumi.zpa.ZPAAppConnectorGroup;\nimport com.pulumi.zpa.ZPAAppConnectorGroupArgs;\nimport com.pulumi.zpa.ZPAServerGroup;\nimport com.pulumi.zpa.ZPAServerGroupArgs;\nimport com.pulumi.zpa.inputs.ZPAServerGroupServerArgs;\nimport com.pulumi.zpa.inputs.ZPAServerGroupAppConnectorGroupArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleZPAApplicationServer = new ZPAApplicationServer(\"exampleZPAApplicationServer\", ZPAApplicationServerArgs.builder()        \n            .description(\"Example\")\n            .address(\"server.example.com\")\n            .enabled(true)\n            .build());\n\n        var exampleZPAAppConnectorGroup = new ZPAAppConnectorGroup(\"exampleZPAAppConnectorGroup\", ZPAAppConnectorGroupArgs.builder()        \n            .description(\"Example\")\n            .enabled(true)\n            .cityCountry(\"San Jose, CA\")\n            .countryCode(\"US\")\n            .latitude(\"37.338\")\n            .longitude(\"-121.8863\")\n            .location(\"San Jose, CA, US\")\n            .upgradeDay(\"SUNDAY\")\n            .upgradeTimeInSecs(\"66600\")\n            .overrideVersionProfile(true)\n            .versionProfileId(0)\n            .dnsQueryType(\"IPV4\")\n            .build());\n\n        var exampleZPAServerGroup = new ZPAServerGroup(\"exampleZPAServerGroup\", ZPAServerGroupArgs.builder()        \n            .description(\"Example\")\n            .enabled(true)\n            .dynamicDiscovery(false)\n            .servers(ZPAServerGroupServerArgs.builder()\n                .ids(exampleZPAApplicationServer.id())\n                .build())\n            .appConnectorGroups(ZPAServerGroupAppConnectorGroupArgs.builder()\n                .ids(exampleZPAAppConnectorGroup.id())\n                .build())\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(                \n                    exampleZPAAppConnectorGroup,\n                    zpa_application_server.server())\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # ZPA Server Group resource with Dynamic Discovery Disabled\n  exampleZPAServerGroup:\n    type: zpa:ZPAServerGroup\n    properties:\n      description: Example\n      enabled: true\n      dynamicDiscovery: false\n      servers:\n        - ids:\n            - ${exampleZPAApplicationServer.id}\n      appConnectorGroups:\n        - ids:\n            - ${exampleZPAAppConnectorGroup.id}\n    options:\n      dependson:\n        - ${exampleZPAAppConnectorGroup}\n        - ${zpa_application_server.server}\n  # Create an application server\n  exampleZPAApplicationServer:\n    type: zpa:ZPAApplicationServer\n    properties:\n      description: Example\n      address: server.example.com\n      enabled: true\n  # Create a App Connector Group\n  exampleZPAAppConnectorGroup:\n    type: zpa:ZPAAppConnectorGroup\n    properties:\n      description: Example\n      enabled: true\n      cityCountry: San Jose, CA\n      countryCode: US\n      latitude: '37.338'\n      longitude: '-121.8863'\n      location: San Jose, CA, US\n      upgradeDay: SUNDAY\n      upgradeTimeInSecs: '66600'\n      overrideVersionProfile: true\n      versionProfileId: 0\n      dnsQueryType: IPV4\n```\n{{% /example %}}\n### Required\n\n* `name` - (Required) This field defines the name of the server group.\n* `app_connector_groups` - (Required)\n  * `id` - (Required) The ID of this resource.\n{{% /examples %}}\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language. [Visit](https://github.com/zscaler/zscaler-terraformer) Server Groups can be imported; use `\u003cSERVER GROUP ID\u003e` or `\u003cSERVER GROUP NAME\u003e` as the import ID. For example\n\n```sh\n $ pulumi import zpa:index/zPAServerGroup:ZPAServerGroup example \u003cserver_group_id\u003e\n```\n\n or\n\n```sh\n $ pulumi import zpa:index/zPAServerGroup:ZPAServerGroup example \u003cserver_group_name\u003e\n```\n\n ",
            "properties": {
                "appConnectorGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPAServerGroupAppConnectorGroup:ZPAServerGroupAppConnectorGroup"
                    },
                    "description": "List of app-connector IDs.\n"
                },
                "applications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPAServerGroupApplication:ZPAServerGroupApplication"
                    },
                    "description": "This field is a json array of app-connector-id only.\n"
                },
                "configSpace": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "(Optional) This field is the description of the server group.\n"
                },
                "dynamicDiscovery": {
                    "type": "boolean",
                    "description": "(Optional) This field controls dynamic discovery of the servers.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(Optional) This field defines if the server group is enabled or disabled.\n"
                },
                "ipAnchored": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "This field defines the name of the server group.\n"
                },
                "servers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPAServerGroupServer:ZPAServerGroupServer"
                    },
                    "description": "(Block List) This field is a list of servers that are applicable only when dynamic discovery is disabled. Server name is required only in cases where the new servers need to be created in this API.\n"
                }
            },
            "required": [
                "appConnectorGroups",
                "applications",
                "name",
                "servers"
            ],
            "inputProperties": {
                "appConnectorGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPAServerGroupAppConnectorGroup:ZPAServerGroupAppConnectorGroup"
                    },
                    "description": "List of app-connector IDs.\n"
                },
                "applications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPAServerGroupApplication:ZPAServerGroupApplication"
                    },
                    "description": "This field is a json array of app-connector-id only.\n"
                },
                "configSpace": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "(Optional) This field is the description of the server group.\n"
                },
                "dynamicDiscovery": {
                    "type": "boolean",
                    "description": "(Optional) This field controls dynamic discovery of the servers.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(Optional) This field defines if the server group is enabled or disabled.\n"
                },
                "ipAnchored": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "This field defines the name of the server group.\n"
                },
                "servers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPAServerGroupServer:ZPAServerGroupServer"
                    },
                    "description": "(Block List) This field is a list of servers that are applicable only when dynamic discovery is disabled. Server name is required only in cases where the new servers need to be created in this API.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ZPAServerGroup resources.\n",
                "properties": {
                    "appConnectorGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/ZPAServerGroupAppConnectorGroup:ZPAServerGroupAppConnectorGroup"
                        },
                        "description": "List of app-connector IDs.\n"
                    },
                    "applications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/ZPAServerGroupApplication:ZPAServerGroupApplication"
                        },
                        "description": "This field is a json array of app-connector-id only.\n"
                    },
                    "configSpace": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "(Optional) This field is the description of the server group.\n"
                    },
                    "dynamicDiscovery": {
                        "type": "boolean",
                        "description": "(Optional) This field controls dynamic discovery of the servers.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(Optional) This field defines if the server group is enabled or disabled.\n"
                    },
                    "ipAnchored": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "This field defines the name of the server group.\n"
                    },
                    "servers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/ZPAServerGroupServer:ZPAServerGroupServer"
                        },
                        "description": "(Block List) This field is a list of servers that are applicable only when dynamic discovery is disabled. Server name is required only in cases where the new servers need to be created in this API.\n"
                    }
                },
                "type": "object"
            }
        },
        "zpa:index/zPAServiceEdgeGroup:ZPAServiceEdgeGroup": {
            "description": "The **zpa_service_edge_group** resource creates a service edge group in the Zscaler Private Access cloud. This resource can then be referenced in a service edge connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@zscaler/pulumi-zpa\";\n\n// ZPA Service Edge Group resource - Trusted Network\nconst serviceEdgeGroupSjc = new zpa.ZPAServiceEdgeGroup(\"serviceEdgeGroupSjc\", {\n    description: \"Service Edge Group in San Jose\",\n    enabled: true,\n    isPublic: true,\n    upgradeDay: \"SUNDAY\",\n    upgradeTimeInSecs: \"66600\",\n    latitude: \"37.3382082\",\n    longitude: \"-121.8863286\",\n    location: \"San Jose, CA, USA\",\n    versionProfileName: \"New Release\",\n    trustedNetworks: [{\n        ids: [data.zpa_trusted_network.example.id],\n    }],\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zpa as zpa\n\n# ZPA Service Edge Group resource - Trusted Network\nservice_edge_group_sjc = zpa.ZPAServiceEdgeGroup(\"serviceEdgeGroupSjc\",\n    description=\"Service Edge Group in San Jose\",\n    enabled=True,\n    is_public=True,\n    upgrade_day=\"SUNDAY\",\n    upgrade_time_in_secs=\"66600\",\n    latitude=\"37.3382082\",\n    longitude=\"-121.8863286\",\n    location=\"San Jose, CA, USA\",\n    version_profile_name=\"New Release\",\n    trusted_networks=[zpa.ZPAServiceEdgeGroupTrustedNetworkArgs(\n        ids=[data[\"zpa_trusted_network\"][\"example\"][\"id\"]],\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = zscaler.PulumiPackage.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // ZPA Service Edge Group resource - Trusted Network\n    var serviceEdgeGroupSjc = new Zpa.ZPAServiceEdgeGroup(\"serviceEdgeGroupSjc\", new()\n    {\n        Description = \"Service Edge Group in San Jose\",\n        Enabled = true,\n        IsPublic = true,\n        UpgradeDay = \"SUNDAY\",\n        UpgradeTimeInSecs = \"66600\",\n        Latitude = \"37.3382082\",\n        Longitude = \"-121.8863286\",\n        Location = \"San Jose, CA, USA\",\n        VersionProfileName = \"New Release\",\n        TrustedNetworks = new[]\n        {\n            new Zpa.Inputs.ZPAServiceEdgeGroupTrustedNetworkArgs\n            {\n                Ids = new[]\n                {\n                    data.Zpa_trusted_network.Example.Id,\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.NewZPAServiceEdgeGroup(ctx, \"serviceEdgeGroupSjc\", \u0026zpa.ZPAServiceEdgeGroupArgs{\n\t\t\tDescription:        pulumi.String(\"Service Edge Group in San Jose\"),\n\t\t\tEnabled:            pulumi.Bool(true),\n\t\t\tIsPublic:           pulumi.Bool(true),\n\t\t\tUpgradeDay:         pulumi.String(\"SUNDAY\"),\n\t\t\tUpgradeTimeInSecs:  pulumi.String(\"66600\"),\n\t\t\tLatitude:           pulumi.String(\"37.3382082\"),\n\t\t\tLongitude:          pulumi.String(\"-121.8863286\"),\n\t\t\tLocation:           pulumi.String(\"San Jose, CA, USA\"),\n\t\t\tVersionProfileName: pulumi.String(\"New Release\"),\n\t\t\tTrustedNetworks: zpa.ZPAServiceEdgeGroupTrustedNetworkArray{\n\t\t\t\t\u0026zpa.ZPAServiceEdgeGroupTrustedNetworkArgs{\n\t\t\t\t\tIds: pulumi.StringArray{\n\t\t\t\t\t\tdata.Zpa_trusted_network.Example.Id,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZPAServiceEdgeGroup;\nimport com.pulumi.zpa.ZPAServiceEdgeGroupArgs;\nimport com.pulumi.zpa.inputs.ZPAServiceEdgeGroupTrustedNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var serviceEdgeGroupSjc = new ZPAServiceEdgeGroup(\"serviceEdgeGroupSjc\", ZPAServiceEdgeGroupArgs.builder()        \n            .description(\"Service Edge Group in San Jose\")\n            .enabled(true)\n            .isPublic(true)\n            .upgradeDay(\"SUNDAY\")\n            .upgradeTimeInSecs(\"66600\")\n            .latitude(\"37.3382082\")\n            .longitude(\"-121.8863286\")\n            .location(\"San Jose, CA, USA\")\n            .versionProfileName(\"New Release\")\n            .trustedNetworks(ZPAServiceEdgeGroupTrustedNetworkArgs.builder()\n                .ids(data.zpa_trusted_network().example().id())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # ZPA Service Edge Group resource - Trusted Network\n  serviceEdgeGroupSjc:\n    type: zpa:ZPAServiceEdgeGroup\n    properties:\n      description: Service Edge Group in San Jose\n      enabled: true\n      isPublic: true\n      upgradeDay: SUNDAY\n      upgradeTimeInSecs: '66600'\n      latitude: '37.3382082'\n      longitude: '-121.8863286'\n      location: San Jose, CA, USA\n      versionProfileName: New Release\n      trustedNetworks:\n        - ids:\n            - ${data.zpa_trusted_network.example.id}\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@zscaler/pulumi-zpa\";\n\n// ZPA Service Edge Group resource - No Trusted Network\nconst serviceEdgeGroupNyc = new zpa.ZPAServiceEdgeGroup(\"serviceEdgeGroupNyc\", {\n    description: \"Service Edge Group in New York\",\n    enabled: true,\n    isPublic: true,\n    latitude: \"40.7128\",\n    location: \"New York, NY, USA\",\n    longitude: \"-73.935242\",\n    upgradeDay: \"SUNDAY\",\n    upgradeTimeInSecs: \"66600\",\n    versionProfileName: \"New Release\",\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zpa as zpa\n\n# ZPA Service Edge Group resource - No Trusted Network\nservice_edge_group_nyc = zpa.ZPAServiceEdgeGroup(\"serviceEdgeGroupNyc\",\n    description=\"Service Edge Group in New York\",\n    enabled=True,\n    is_public=True,\n    latitude=\"40.7128\",\n    location=\"New York, NY, USA\",\n    longitude=\"-73.935242\",\n    upgrade_day=\"SUNDAY\",\n    upgrade_time_in_secs=\"66600\",\n    version_profile_name=\"New Release\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = zscaler.PulumiPackage.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // ZPA Service Edge Group resource - No Trusted Network\n    var serviceEdgeGroupNyc = new Zpa.ZPAServiceEdgeGroup(\"serviceEdgeGroupNyc\", new()\n    {\n        Description = \"Service Edge Group in New York\",\n        Enabled = true,\n        IsPublic = true,\n        Latitude = \"40.7128\",\n        Location = \"New York, NY, USA\",\n        Longitude = \"-73.935242\",\n        UpgradeDay = \"SUNDAY\",\n        UpgradeTimeInSecs = \"66600\",\n        VersionProfileName = \"New Release\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.NewZPAServiceEdgeGroup(ctx, \"serviceEdgeGroupNyc\", \u0026zpa.ZPAServiceEdgeGroupArgs{\n\t\t\tDescription:        pulumi.String(\"Service Edge Group in New York\"),\n\t\t\tEnabled:            pulumi.Bool(true),\n\t\t\tIsPublic:           pulumi.Bool(true),\n\t\t\tLatitude:           pulumi.String(\"40.7128\"),\n\t\t\tLocation:           pulumi.String(\"New York, NY, USA\"),\n\t\t\tLongitude:          pulumi.String(\"-73.935242\"),\n\t\t\tUpgradeDay:         pulumi.String(\"SUNDAY\"),\n\t\t\tUpgradeTimeInSecs:  pulumi.String(\"66600\"),\n\t\t\tVersionProfileName: pulumi.String(\"New Release\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZPAServiceEdgeGroup;\nimport com.pulumi.zpa.ZPAServiceEdgeGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var serviceEdgeGroupNyc = new ZPAServiceEdgeGroup(\"serviceEdgeGroupNyc\", ZPAServiceEdgeGroupArgs.builder()        \n            .description(\"Service Edge Group in New York\")\n            .enabled(true)\n            .isPublic(true)\n            .latitude(\"40.7128\")\n            .location(\"New York, NY, USA\")\n            .longitude(\"-73.935242\")\n            .upgradeDay(\"SUNDAY\")\n            .upgradeTimeInSecs(\"66600\")\n            .versionProfileName(\"New Release\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # ZPA Service Edge Group resource - No Trusted Network\n  serviceEdgeGroupNyc:\n    type: zpa:ZPAServiceEdgeGroup\n    properties:\n      description: Service Edge Group in New York\n      enabled: true\n      isPublic: true\n      latitude: '40.7128'\n      location: New York, NY, USA\n      longitude: '-73.935242'\n      upgradeDay: SUNDAY\n      upgradeTimeInSecs: '66600'\n      versionProfileName: New Release\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language. [Visit](https://github.com/zscaler/zscaler-terraformer) Service Edge Group can be imported; use `\u003cSERVER EDGE GROUP ID\u003e` or `\u003cSERVER EDGE GROUP NAME\u003e` as the import ID. For example\n\n```sh\n $ pulumi import zpa:index/zPAServiceEdgeGroup:ZPAServiceEdgeGroup example \u003cservice_edge_group_id\u003e\n```\n\n or\n\n```sh\n $ pulumi import zpa:index/zPAServiceEdgeGroup:ZPAServiceEdgeGroup example \u003cservice_edge_group_name\u003e\n```\n\n ",
            "properties": {
                "cityCountry": {
                    "type": "string",
                    "description": "This field controls dynamic discovery of the servers.\n"
                },
                "countryCode": {
                    "type": "string",
                    "description": "This field is an array of app-connector-id only.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Service Edge Group.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether this Service Edge Group is enabled or not. Default value: `true` Supported values: `true`, `false`\n"
                },
                "isPublic": {
                    "type": "boolean",
                    "description": "Enable or disable public access for the Service Edge Group. Default value: `FALSE` Supported values: `DEFAULT`, `TRUE`, `FALSE`\n"
                },
                "latitude": {
                    "type": "string",
                    "description": "Latitude for the Service Edge Group. Integer or decimal with values in the range of `-90` to `90`\n"
                },
                "location": {
                    "type": "string",
                    "description": "Location for the Service Edge Group.\n"
                },
                "longitude": {
                    "type": "string",
                    "description": "Longitude for the Service Edge Group. Integer or decimal with values in the range of `-180` to `180`\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Service Edge Group.\n"
                },
                "overrideVersionProfile": {
                    "type": "boolean",
                    "description": "Whether the default version profile of the App Connector Group is applied or overridden. Default: `true`. Supported values: `true`, `false`\n"
                },
                "serviceEdges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPAServiceEdgeGroupServiceEdge:ZPAServiceEdgeGroupServiceEdge"
                    }
                },
                "trustedNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPAServiceEdgeGroupTrustedNetwork:ZPAServiceEdgeGroupTrustedNetwork"
                    },
                    "description": "Trusted networks for this Service Edge Group. List of trusted network objects\n"
                },
                "upgradeDay": {
                    "type": "string",
                    "description": "Service Edges in this group will attempt to update to a newer version of the software during this specified day. Default value: `SUNDAY` List of valid days (i.e., Sunday, Monday)\n"
                },
                "upgradeTimeInSecs": {
                    "type": "string",
                    "description": "Service Edges in this group will attempt to update to a newer version of the software during this specified time. Default value: `66600` Integer in seconds (i..e, 66600). The integer must be greater than or equal to 0 and less than `86400`, in `15` minute intervals\n"
                },
                "versionProfileId": {
                    "type": "string",
                    "description": "ID of the version profile. To learn more, see Version Profile Use Cases. This value becomes required if the value for `override_version_profile` is set to `true`.\n"
                },
                "versionProfileName": {
                    "type": "string",
                    "description": "ID of the version profile.\n"
                },
                "versionProfileVisibilityScope": {
                    "type": "string",
                    "description": "ID of the version profile.\n"
                }
            },
            "required": [
                "cityCountry",
                "countryCode",
                "latitude",
                "location",
                "longitude",
                "name",
                "versionProfileId",
                "versionProfileName",
                "versionProfileVisibilityScope"
            ],
            "inputProperties": {
                "cityCountry": {
                    "type": "string",
                    "description": "This field controls dynamic discovery of the servers.\n"
                },
                "countryCode": {
                    "type": "string",
                    "description": "This field is an array of app-connector-id only.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Service Edge Group.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether this Service Edge Group is enabled or not. Default value: `true` Supported values: `true`, `false`\n"
                },
                "isPublic": {
                    "type": "boolean",
                    "description": "Enable or disable public access for the Service Edge Group. Default value: `FALSE` Supported values: `DEFAULT`, `TRUE`, `FALSE`\n"
                },
                "latitude": {
                    "type": "string",
                    "description": "Latitude for the Service Edge Group. Integer or decimal with values in the range of `-90` to `90`\n"
                },
                "location": {
                    "type": "string",
                    "description": "Location for the Service Edge Group.\n"
                },
                "longitude": {
                    "type": "string",
                    "description": "Longitude for the Service Edge Group. Integer or decimal with values in the range of `-180` to `180`\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Service Edge Group.\n"
                },
                "overrideVersionProfile": {
                    "type": "boolean",
                    "description": "Whether the default version profile of the App Connector Group is applied or overridden. Default: `true`. Supported values: `true`, `false`\n"
                },
                "serviceEdges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPAServiceEdgeGroupServiceEdge:ZPAServiceEdgeGroupServiceEdge"
                    }
                },
                "trustedNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ZPAServiceEdgeGroupTrustedNetwork:ZPAServiceEdgeGroupTrustedNetwork"
                    },
                    "description": "Trusted networks for this Service Edge Group. List of trusted network objects\n"
                },
                "upgradeDay": {
                    "type": "string",
                    "description": "Service Edges in this group will attempt to update to a newer version of the software during this specified day. Default value: `SUNDAY` List of valid days (i.e., Sunday, Monday)\n"
                },
                "upgradeTimeInSecs": {
                    "type": "string",
                    "description": "Service Edges in this group will attempt to update to a newer version of the software during this specified time. Default value: `66600` Integer in seconds (i..e, 66600). The integer must be greater than or equal to 0 and less than `86400`, in `15` minute intervals\n"
                },
                "versionProfileId": {
                    "type": "string",
                    "description": "ID of the version profile. To learn more, see Version Profile Use Cases. This value becomes required if the value for `override_version_profile` is set to `true`.\n"
                },
                "versionProfileName": {
                    "type": "string",
                    "description": "ID of the version profile.\n"
                }
            },
            "requiredInputs": [
                "latitude",
                "location",
                "longitude"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ZPAServiceEdgeGroup resources.\n",
                "properties": {
                    "cityCountry": {
                        "type": "string",
                        "description": "This field controls dynamic discovery of the servers.\n"
                    },
                    "countryCode": {
                        "type": "string",
                        "description": "This field is an array of app-connector-id only.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Service Edge Group.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether this Service Edge Group is enabled or not. Default value: `true` Supported values: `true`, `false`\n"
                    },
                    "isPublic": {
                        "type": "boolean",
                        "description": "Enable or disable public access for the Service Edge Group. Default value: `FALSE` Supported values: `DEFAULT`, `TRUE`, `FALSE`\n"
                    },
                    "latitude": {
                        "type": "string",
                        "description": "Latitude for the Service Edge Group. Integer or decimal with values in the range of `-90` to `90`\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "Location for the Service Edge Group.\n"
                    },
                    "longitude": {
                        "type": "string",
                        "description": "Longitude for the Service Edge Group. Integer or decimal with values in the range of `-180` to `180`\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Service Edge Group.\n"
                    },
                    "overrideVersionProfile": {
                        "type": "boolean",
                        "description": "Whether the default version profile of the App Connector Group is applied or overridden. Default: `true`. Supported values: `true`, `false`\n"
                    },
                    "serviceEdges": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/ZPAServiceEdgeGroupServiceEdge:ZPAServiceEdgeGroupServiceEdge"
                        }
                    },
                    "trustedNetworks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/ZPAServiceEdgeGroupTrustedNetwork:ZPAServiceEdgeGroupTrustedNetwork"
                        },
                        "description": "Trusted networks for this Service Edge Group. List of trusted network objects\n"
                    },
                    "upgradeDay": {
                        "type": "string",
                        "description": "Service Edges in this group will attempt to update to a newer version of the software during this specified day. Default value: `SUNDAY` List of valid days (i.e., Sunday, Monday)\n"
                    },
                    "upgradeTimeInSecs": {
                        "type": "string",
                        "description": "Service Edges in this group will attempt to update to a newer version of the software during this specified time. Default value: `66600` Integer in seconds (i..e, 66600). The integer must be greater than or equal to 0 and less than `86400`, in `15` minute intervals\n"
                    },
                    "versionProfileId": {
                        "type": "string",
                        "description": "ID of the version profile. To learn more, see Version Profile Use Cases. This value becomes required if the value for `override_version_profile` is set to `true`.\n"
                    },
                    "versionProfileName": {
                        "type": "string",
                        "description": "ID of the version profile.\n"
                    },
                    "versionProfileVisibilityScope": {
                        "type": "string",
                        "description": "ID of the version profile.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "zpa:index/getZPAAppConnectorGroup:getZPAAppConnectorGroup": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst foo = zpa.getZPAAppConnectorGroup({\n    name: \"DataCenter\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nfoo = zpa.get_zpa_app_connector_group(name=\"DataCenter\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Zpa.GetZPAAppConnectorGroup.Invoke(new()\n    {\n        Name = \"DataCenter\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.LookupZPAAppConnectorGroup(ctx, \u0026zpa.LookupZPAAppConnectorGroupArgs{\n\t\t\tName: pulumi.StringRef(\"DataCenter\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPAAppConnectorGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = ZpaFunctions.getZPAAppConnectorGroup(GetZPAAppConnectorGroupArgs.builder()\n            .name(\"DataCenter\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: zpa:getZPAAppConnectorGroup\n      Arguments:\n        name: DataCenter\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst foo = zpa.getZPAAppConnectorGroup({\n    id: \"123456789\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nfoo = zpa.get_zpa_app_connector_group(id=\"123456789\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Zpa.GetZPAAppConnectorGroup.Invoke(new()\n    {\n        Id = \"123456789\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.LookupZPAAppConnectorGroup(ctx, \u0026zpa.LookupZPAAppConnectorGroupArgs{\n\t\t\tId: pulumi.StringRef(\"123456789\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPAAppConnectorGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = ZpaFunctions.getZPAAppConnectorGroup(GetZPAAppConnectorGroupArgs.builder()\n            .id(\"123456789\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: zpa:getZPAAppConnectorGroup\n      Arguments:\n        id: '123456789'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getZPAAppConnectorGroup.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the App Connector Group.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the App Connector Group.\n"
                    },
                    "overrideVersionProfile": {
                        "type": "boolean",
                        "description": "(bool) Whether the default version profile of the App Connector Group is applied or overridden. Default: `false` Supported values: `true`, `false`\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getZPAAppConnectorGroup.\n",
                "properties": {
                    "cityCountry": {
                        "type": "string",
                        "description": "(String) Whether Double Encryption is enabled or disabled for the app.\n"
                    },
                    "connectors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getZPAAppConnectorGroupConnector:getZPAAppConnectorGroupConnector"
                        }
                    },
                    "countryCode": {
                        "type": "string",
                        "description": "(String)\n"
                    },
                    "creationTime": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "(String) Description of the App Connector Group.\n"
                    },
                    "dnsQueryType": {
                        "type": "string",
                        "description": "(String)\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(String) Whether this App Connector Group is enabled or not. Default value: `true`. Supported values: `true`, `false`\n"
                    },
                    "geoLocationId": {
                        "type": "string",
                        "description": "(String)\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "latitude": {
                        "type": "string",
                        "description": "(String) Latitude of the App Connector Group. Integer or decimal. With values in the range of `-90` to `90`\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "(String) Location of the App Connector Group.\n"
                    },
                    "longitude": {
                        "type": "string",
                        "description": "(String) Longitude of the App Connector Group. Integer or decimal. With values in the range of `-180` to `180`\n"
                    },
                    "lssAppConnectorGroup": {
                        "type": "boolean"
                    },
                    "modifiedTime": {
                        "type": "string"
                    },
                    "modifiedby": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "overrideVersionProfile": {
                        "type": "boolean",
                        "description": "(bool) Whether the default version profile of the App Connector Group is applied or overridden. Default: `false` Supported values: `true`, `false`\n"
                    },
                    "serverGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getZPAAppConnectorGroupServerGroup:getZPAAppConnectorGroupServerGroup"
                        }
                    },
                    "tcpQuickAckApp": {
                        "type": "boolean"
                    },
                    "tcpQuickAckAssistant": {
                        "type": "boolean"
                    },
                    "tcpQuickAckReadAssistant": {
                        "type": "boolean"
                    },
                    "upgradeDay": {
                        "type": "string",
                        "description": "(String) App Connectors in this group will attempt to update to a newer version of the software during this specified day\n"
                    },
                    "upgradeTimeInSecs": {
                        "type": "string",
                        "description": "(String) App Connectors in this group will attempt to update to a newer version of the software during this specified time. Default value: `66600`. Integer in seconds (i.e., `-66600`). The integer should be greater than or equal to `0` and less than `86400`, in `15` minute intervals\n"
                    },
                    "useInDrMode": {
                        "type": "boolean"
                    },
                    "versionProfileId": {
                        "type": "string",
                        "description": "(String) ID of the version profile.\nExported values are:\n"
                    },
                    "versionProfileName": {
                        "type": "string",
                        "description": "(String)\nExported values are:\n"
                    },
                    "versionProfileVisibilityScope": {
                        "type": "string",
                        "description": "(String)\nExported values are:\n"
                    }
                },
                "type": "object",
                "required": [
                    "cityCountry",
                    "connectors",
                    "countryCode",
                    "creationTime",
                    "description",
                    "dnsQueryType",
                    "enabled",
                    "geoLocationId",
                    "latitude",
                    "location",
                    "longitude",
                    "lssAppConnectorGroup",
                    "modifiedTime",
                    "modifiedby",
                    "serverGroups",
                    "tcpQuickAckApp",
                    "tcpQuickAckAssistant",
                    "tcpQuickAckReadAssistant",
                    "upgradeDay",
                    "upgradeTimeInSecs",
                    "useInDrMode",
                    "versionProfileId",
                    "versionProfileName",
                    "versionProfileVisibilityScope"
                ]
            }
        },
        "zpa:index/getZPAApplicationSegment:getZPAApplicationSegment": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst this = zpa.getZPAApplicationSegment({\n    name: \"example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nthis = zpa.get_zpa_application_segment(name=\"example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Zpa.GetZPAApplicationSegment.Invoke(new()\n    {\n        Name = \"example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.LookupZPAApplicationSegment(ctx, \u0026zpa.LookupZPAApplicationSegmentArgs{\n\t\t\tName: pulumi.StringRef(\"example\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPAApplicationSegmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = ZpaFunctions.getZPAApplicationSegment(GetZPAApplicationSegmentArgs.builder()\n            .name(\"example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      Function: zpa:getZPAApplicationSegment\n      Arguments:\n        name: example\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst this = zpa.getZPAApplicationSegment({\n    id: \"123456789\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nthis = zpa.get_zpa_application_segment(id=\"123456789\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Zpa.GetZPAApplicationSegment.Invoke(new()\n    {\n        Id = \"123456789\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.LookupZPAApplicationSegment(ctx, \u0026zpa.LookupZPAApplicationSegmentArgs{\n\t\t\tId: pulumi.StringRef(\"123456789\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPAApplicationSegmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = ZpaFunctions.getZPAApplicationSegment(GetZPAApplicationSegmentArgs.builder()\n            .id(\"123456789\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      Function: zpa:getZPAApplicationSegment\n      Arguments:\n        id: '123456789'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getZPAApplicationSegment.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the application.\n"
                    },
                    "tcpPortRanges": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getZPAApplicationSegmentTcpPortRange:getZPAApplicationSegmentTcpPortRange"
                        }
                    },
                    "udpPortRanges": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getZPAApplicationSegmentUdpPortRange:getZPAApplicationSegmentUdpPortRange"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getZPAApplicationSegment.\n",
                "properties": {
                    "bypassType": {
                        "type": "string"
                    },
                    "configSpace": {
                        "type": "string"
                    },
                    "creationTime": {
                        "type": "string"
                    },
                    "defaultIdleTimeout": {
                        "type": "string"
                    },
                    "defaultMaxAge": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "domainNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "doubleEncrypt": {
                        "type": "boolean"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "healthCheckType": {
                        "type": "string"
                    },
                    "healthReporting": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "ipAnchored": {
                        "type": "boolean"
                    },
                    "isCnameEnabled": {
                        "type": "boolean"
                    },
                    "modifiedTime": {
                        "type": "string"
                    },
                    "modifiedby": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "passiveHealthEnabled": {
                        "type": "boolean"
                    },
                    "segmentGroupId": {
                        "type": "string"
                    },
                    "segmentGroupName": {
                        "type": "string"
                    },
                    "selectConnectorCloseToApp": {
                        "type": "boolean"
                    },
                    "serverGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getZPAApplicationSegmentServerGroup:getZPAApplicationSegmentServerGroup"
                        }
                    },
                    "tcpPortRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "udpPortRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "bypassType",
                    "configSpace",
                    "creationTime",
                    "defaultIdleTimeout",
                    "defaultMaxAge",
                    "description",
                    "domainNames",
                    "doubleEncrypt",
                    "enabled",
                    "healthCheckType",
                    "healthReporting",
                    "ipAnchored",
                    "isCnameEnabled",
                    "modifiedTime",
                    "modifiedby",
                    "passiveHealthEnabled",
                    "segmentGroupId",
                    "segmentGroupName",
                    "selectConnectorCloseToApp",
                    "serverGroups",
                    "tcpPortRanges",
                    "tcpPortRanges",
                    "udpPortRanges",
                    "udpPortRanges"
                ]
            }
        },
        "zpa:index/getZPAApplicationSegmentBrowserAccess:getZPAApplicationSegmentBrowserAccess": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst example = zpa.getZPAApplicationSegmentBrowserAccess({\n    name: \"example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nexample = zpa.get_zpa_application_segment_browser_access(name=\"example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zpa.GetZPAApplicationSegmentBrowserAccess.Invoke(new()\n    {\n        Name = \"example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.LookupZPAApplicationSegmentBrowserAccess(ctx, \u0026zpa.LookupZPAApplicationSegmentBrowserAccessArgs{\n\t\t\tName: pulumi.StringRef(\"example\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPAApplicationSegmentBrowserAccessArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZpaFunctions.getZPAApplicationSegmentBrowserAccess(GetZPAApplicationSegmentBrowserAccessArgs.builder()\n            .name(\"example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zpa:getZPAApplicationSegmentBrowserAccess\n      Arguments:\n        name: example\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst example = zpa.getZPAApplicationSegmentBrowserAccess({\n    id: \"123456789\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nexample = zpa.get_zpa_application_segment_browser_access(id=\"123456789\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zpa.GetZPAApplicationSegmentBrowserAccess.Invoke(new()\n    {\n        Id = \"123456789\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.LookupZPAApplicationSegmentBrowserAccess(ctx, \u0026zpa.LookupZPAApplicationSegmentBrowserAccessArgs{\n\t\t\tId: pulumi.StringRef(\"123456789\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPAApplicationSegmentBrowserAccessArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZpaFunctions.getZPAApplicationSegmentBrowserAccess(GetZPAApplicationSegmentBrowserAccessArgs.builder()\n            .id(\"123456789\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zpa:getZPAApplicationSegmentBrowserAccess\n      Arguments:\n        id: '123456789'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getZPAApplicationSegmentBrowserAccess.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "This field defines the id of the application server.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "This field defines the name of the server.\n"
                    },
                    "tcpPortRanges": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getZPAApplicationSegmentBrowserAccessTcpPortRange:getZPAApplicationSegmentBrowserAccessTcpPortRange"
                        },
                        "description": "(string) TCP port ranges used to access the app.\n* `from:`\n* `to:`\n"
                    },
                    "udpPortRanges": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getZPAApplicationSegmentBrowserAccessUdpPortRange:getZPAApplicationSegmentBrowserAccessUdpPortRange"
                        },
                        "description": "(string) UDP port ranges used to access the app.\n* `from:`\n* `to:`\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getZPAApplicationSegmentBrowserAccess.\n",
                "properties": {
                    "bypassType": {
                        "type": "string",
                        "description": "(string) Indicates whether users can bypass ZPA to access applications. Default: `NEVER`. Supported values: `ALWAYS`, `NEVER`, `ON_NET`. The value `NEVER` indicates the use of the client forwarding policy.\n"
                    },
                    "clientlessApps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getZPAApplicationSegmentBrowserAccessClientlessApp:getZPAApplicationSegmentBrowserAccessClientlessApp"
                        }
                    },
                    "configSpace": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "domainNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of domains and IPs.\n"
                    },
                    "doubleEncrypt": {
                        "type": "boolean",
                        "description": "(string) Whether Double Encryption is enabled or disabled for the app. Default: false. Boolean: `true`, `false`.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "healthCheckType": {
                        "type": "string"
                    },
                    "healthReporting": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "ipAnchored": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "isCnameEnabled": {
                        "type": "boolean",
                        "description": "(bool) Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors. Default: true. Boolean: `true`, `false`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "passiveHealthEnabled": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "segmentGroupId": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "segmentGroupName": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "serverGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getZPAApplicationSegmentBrowserAccessServerGroup:getZPAApplicationSegmentBrowserAccessServerGroup"
                        }
                    },
                    "tcpPortRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(string) TCP port ranges used to access the app.\n"
                    },
                    "udpPortRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(string) UDP port ranges used to access the app.\n"
                    }
                },
                "type": "object",
                "required": [
                    "bypassType",
                    "clientlessApps",
                    "configSpace",
                    "description",
                    "domainNames",
                    "doubleEncrypt",
                    "enabled",
                    "healthCheckType",
                    "healthReporting",
                    "ipAnchored",
                    "isCnameEnabled",
                    "passiveHealthEnabled",
                    "segmentGroupId",
                    "segmentGroupName",
                    "serverGroups",
                    "tcpPortRanges",
                    "tcpPortRanges",
                    "udpPortRanges",
                    "udpPortRanges"
                ]
            }
        },
        "zpa:index/getZPAApplicationSegmentInspection:getZPAApplicationSegmentInspection": {
            "description": "Use the **zpa_application_segment_inspection** data source to get information about an inspection application segment in the Zscaler Private Access cloud. This resource can then be referenced in a ZPA access inspection policy. This resource supports ZPA Inspection for both `HTTP` and `HTTPS`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst this = zpa.getZPAApplicationSegmentInspection({\n    name: \"ZPA_Inspection_Example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nthis = zpa.get_zpa_application_segment_inspection(name=\"ZPA_Inspection_Example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Zpa.GetZPAApplicationSegmentInspection.Invoke(new()\n    {\n        Name = \"ZPA_Inspection_Example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.LookupZPAApplicationSegmentInspection(ctx, \u0026zpa.LookupZPAApplicationSegmentInspectionArgs{\n\t\t\tName: pulumi.StringRef(\"ZPA_Inspection_Example\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPAApplicationSegmentInspectionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = ZpaFunctions.getZPAApplicationSegmentInspection(GetZPAApplicationSegmentInspectionArgs.builder()\n            .name(\"ZPA_Inspection_Example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      Function: zpa:getZPAApplicationSegmentInspection\n      Arguments:\n        name: ZPA_Inspection_Example\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst this = zpa.getZPAApplicationSegmentInspection({\n    id: \"123456789\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nthis = zpa.get_zpa_application_segment_inspection(id=\"123456789\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Zpa.GetZPAApplicationSegmentInspection.Invoke(new()\n    {\n        Id = \"123456789\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.LookupZPAApplicationSegmentInspection(ctx, \u0026zpa.LookupZPAApplicationSegmentInspectionArgs{\n\t\t\tId: pulumi.StringRef(\"123456789\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPAApplicationSegmentInspectionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = ZpaFunctions.getZPAApplicationSegmentInspection(GetZPAApplicationSegmentInspectionArgs.builder()\n            .id(\"123456789\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      Function: zpa:getZPAApplicationSegmentInspection\n      Arguments:\n        id: '123456789'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getZPAApplicationSegmentInspection.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the Inspection Application Segment to be exported.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Inspection Application Segment to be exported.\n"
                    },
                    "tcpPortRanges": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getZPAApplicationSegmentInspectionTcpPortRange:getZPAApplicationSegmentInspectionTcpPortRange"
                        },
                        "description": "(string) TCP port ranges used to access the app.\n* `from:`\n* `to:`\n"
                    },
                    "udpPortRanges": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getZPAApplicationSegmentInspectionUdpPortRange:getZPAApplicationSegmentInspectionUdpPortRange"
                        },
                        "description": "(string) UDP port ranges used to access the app.\n* `from:`\n* `to:`\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getZPAApplicationSegmentInspection.\n",
                "properties": {
                    "bypassType": {
                        "type": "string",
                        "description": "(string) Indicates whether users can bypass ZPA to access applications.\n"
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "(String)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(string) Description of the application.\n"
                    },
                    "domainNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(string) List of domains and IPs.\n"
                    },
                    "doubleEncrypt": {
                        "type": "boolean",
                        "description": "(bool) Whether Double Encryption is enabled or disabled for the app.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(bool) Whether this application is enabled or not\n"
                    },
                    "healthCheckType": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "healthReporting": {
                        "type": "string",
                        "description": "(string) Whether health reporting for the app is Continuous or On Access. Supported values: `NONE`, `ON_ACCESS`, `CONTINUOUS`.\n"
                    },
                    "icmpAccessType": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "inspectionApps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getZPAApplicationSegmentInspectionInspectionApp:getZPAApplicationSegmentInspectionInspectionApp"
                        },
                        "description": "(string) TCP port ranges used to access the app.\n* `app_id:` - (string)\n* `name:` - (string) Name of the Inspection Application\n* `description:` - (string) Description of the Inspection Application\n* `domain:` - (string) Domain name of the inspection application\n"
                    },
                    "ipAnchored": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "isCnameEnabled": {
                        "type": "boolean",
                        "description": "(bool) Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors.\n"
                    },
                    "modifiedBy": {
                        "type": "string"
                    },
                    "modifiedTime": {
                        "type": "string",
                        "description": "(String)\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "passiveHealthEnabled": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "segmentGroupId": {
                        "type": "string",
                        "description": "(String) Segment Group IDs\n"
                    },
                    "segmentGroupName": {
                        "type": "string"
                    },
                    "selectConnectorCloseToApp": {
                        "type": "boolean"
                    },
                    "serverGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getZPAApplicationSegmentInspectionServerGroup:getZPAApplicationSegmentInspectionServerGroup"
                        },
                        "description": "(string) List of Server Group IDs\n* `id:` - (string) List of Server Group IDs\n"
                    },
                    "tcpPortRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(string) TCP port ranges used to access the app.\n"
                    },
                    "udpPortRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(string) UDP port ranges used to access the app.\n"
                    }
                },
                "type": "object",
                "required": [
                    "bypassType",
                    "creationTime",
                    "description",
                    "domainNames",
                    "doubleEncrypt",
                    "enabled",
                    "healthCheckType",
                    "healthReporting",
                    "icmpAccessType",
                    "inspectionApps",
                    "ipAnchored",
                    "isCnameEnabled",
                    "modifiedBy",
                    "modifiedTime",
                    "passiveHealthEnabled",
                    "segmentGroupId",
                    "segmentGroupName",
                    "selectConnectorCloseToApp",
                    "serverGroups",
                    "tcpPortRanges",
                    "tcpPortRanges",
                    "udpPortRanges",
                    "udpPortRanges"
                ]
            }
        },
        "zpa:index/getZPAApplicationSegmentPRA:getZPAApplicationSegmentPRA": {
            "description": "Use the **zpa_application_segment_pra** data source to get information about an application segment for Privileged Remote Access in the Zscaler Private Access cloud. This resource can then be referenced in an access policy rule, access policy timeout rule, access policy client forwarding rule and inspection policy. This resource supports Privileged Remote Access for both `RDP` and `SSH`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst this = zpa.getZPAApplicationSegmentPRA({\n    name: \"PRA_Example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nthis = zpa.get_zpa_application_segment_pra(name=\"PRA_Example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Zpa.GetZPAApplicationSegmentPRA.Invoke(new()\n    {\n        Name = \"PRA_Example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.LookupZPAApplicationSegmentPRA(ctx, \u0026zpa.LookupZPAApplicationSegmentPRAArgs{\n\t\t\tName: pulumi.StringRef(\"PRA_Example\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPAApplicationSegmentPRAArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = ZpaFunctions.getZPAApplicationSegmentPRA(GetZPAApplicationSegmentPRAArgs.builder()\n            .name(\"PRA_Example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      Function: zpa:getZPAApplicationSegmentPRA\n      Arguments:\n        name: PRA_Example\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst this = zpa.getZPAApplicationSegmentPRA({\n    id: \"123456789\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nthis = zpa.get_zpa_application_segment_pra(id=\"123456789\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Zpa.GetZPAApplicationSegmentPRA.Invoke(new()\n    {\n        Id = \"123456789\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.LookupZPAApplicationSegmentPRA(ctx, \u0026zpa.LookupZPAApplicationSegmentPRAArgs{\n\t\t\tId: pulumi.StringRef(\"123456789\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPAApplicationSegmentPRAArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = ZpaFunctions.getZPAApplicationSegmentPRA(GetZPAApplicationSegmentPRAArgs.builder()\n            .id(\"123456789\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      Function: zpa:getZPAApplicationSegmentPRA\n      Arguments:\n        id: '123456789'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getZPAApplicationSegmentPRA.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the PRA Application Segment to be exported.\n"
                    },
                    "tcpPortRanges": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getZPAApplicationSegmentPRATcpPortRange:getZPAApplicationSegmentPRATcpPortRange"
                        },
                        "description": "(string) TCP port ranges used to access the app.\n* `from:`\n* `to:`\n"
                    },
                    "udpPortRanges": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getZPAApplicationSegmentPRAUdpPortRange:getZPAApplicationSegmentPRAUdpPortRange"
                        },
                        "description": "(string) UDP port ranges used to access the app.\n* `from:`\n* `to:`\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getZPAApplicationSegmentPRA.\n",
                "properties": {
                    "bypassType": {
                        "type": "string",
                        "description": "(string) Indicates whether users can bypass ZPA to access applications.\n"
                    },
                    "configSpace": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(string) Description of the application.\n"
                    },
                    "domainNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(string) List of domains and IPs.\n"
                    },
                    "doubleEncrypt": {
                        "type": "boolean",
                        "description": "(bool) Whether Double Encryption is enabled or disabled for the app.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(bool) Whether this application is enabled or not\n"
                    },
                    "healthCheckType": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "healthReporting": {
                        "type": "string",
                        "description": "(string) Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "ipAnchored": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "isCnameEnabled": {
                        "type": "boolean",
                        "description": "(bool) Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "passiveHealthEnabled": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "segmentGroupId": {
                        "type": "string",
                        "description": "(String) Segment Group IDs\n"
                    },
                    "segmentGroupName": {
                        "type": "string"
                    },
                    "serverGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getZPAApplicationSegmentPRAServerGroup:getZPAApplicationSegmentPRAServerGroup"
                        },
                        "description": "(string) List of Server Group IDs\n* `id:` - (string) List of Server Group IDs\n"
                    },
                    "sraApps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getZPAApplicationSegmentPRASraApp:getZPAApplicationSegmentPRASraApp"
                        },
                        "description": "(string) TCP port ranges used to access the app.\n* `app_id:` - (string)\n* `name:` - (string) Name of the Privileged Remote Access\n* `description:` - (string) Description of the Privileged Remote Access\n* `domain:` - (string) Domain name of the Privileged Remote Access\n"
                    },
                    "tcpPortRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(string) TCP port ranges used to access the app.\n"
                    },
                    "udpPortRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(string) UDP port ranges used to access the app.\n"
                    }
                },
                "type": "object",
                "required": [
                    "bypassType",
                    "configSpace",
                    "description",
                    "domainNames",
                    "doubleEncrypt",
                    "enabled",
                    "healthCheckType",
                    "healthReporting",
                    "ipAnchored",
                    "isCnameEnabled",
                    "passiveHealthEnabled",
                    "segmentGroupId",
                    "segmentGroupName",
                    "serverGroups",
                    "sraApps",
                    "tcpPortRanges",
                    "tcpPortRanges",
                    "udpPortRanges",
                    "udpPortRanges"
                ]
            }
        },
        "zpa:index/getZPAApplicationServer:getZPAApplicationServer": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst example = zpa.getZPAApplicationServer({\n    name: \"server.example.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nexample = zpa.get_zpa_application_server(name=\"server.example.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zpa.GetZPAApplicationServer.Invoke(new()\n    {\n        Name = \"server.example.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.LookupZPAApplicationServer(ctx, \u0026zpa.LookupZPAApplicationServerArgs{\n\t\t\tName: pulumi.StringRef(\"server.example.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPAApplicationServerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZpaFunctions.getZPAApplicationServer(GetZPAApplicationServerArgs.builder()\n            .name(\"server.example.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zpa:getZPAApplicationServer\n      Arguments:\n        name: server.example.com\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst example = zpa.getZPAApplicationServer({\n    id: \"1234567890\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nexample = zpa.get_zpa_application_server(id=\"1234567890\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zpa.GetZPAApplicationServer.Invoke(new()\n    {\n        Id = \"1234567890\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.LookupZPAApplicationServer(ctx, \u0026zpa.LookupZPAApplicationServerArgs{\n\t\t\tId: pulumi.StringRef(\"1234567890\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPAApplicationServerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZpaFunctions.getZPAApplicationServer(GetZPAApplicationServerArgs.builder()\n            .id(\"1234567890\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zpa:getZPAApplicationServer\n      Arguments:\n        id: '1234567890'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getZPAApplicationServer.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "This field defines the id of the application server.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "This field defines the name of the server.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getZPAApplicationServer.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "(string) This field defines the domain or IP address of the server.\n"
                    },
                    "appServerGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(Set of String) This field defines the list of server groups IDs.\n"
                    },
                    "configSpace": {
                        "type": "string"
                    },
                    "creationTime": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "(string) This field defines the description of the server.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(bool) This field defines the status of the server.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "modifiedTime": {
                        "type": "string"
                    },
                    "modifiedby": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "address",
                    "appServerGroupIds",
                    "configSpace",
                    "creationTime",
                    "description",
                    "enabled",
                    "modifiedTime",
                    "modifiedby"
                ]
            }
        },
        "zpa:index/getZPABaCertificate:getZPABaCertificate": {
            "description": "Use the **zpa_ba_certificate** data source to get information about a browser access certificate created in the Zscaler Private Access cloud. This data source is required when creating a browser access application segment resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst foo = zpa.getZPABaCertificate({\n    name: \"example.acme.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nfoo = zpa.get_zpa_ba_certificate(name=\"example.acme.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Zpa.GetZPABaCertificate.Invoke(new()\n    {\n        Name = \"example.acme.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetZPABaCertificate(ctx, \u0026zpa.GetZPABaCertificateArgs{\n\t\t\tName: pulumi.StringRef(\"example.acme.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPABaCertificateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = ZpaFunctions.getZPABaCertificate(GetZPABaCertificateArgs.builder()\n            .name(\"example.acme.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: zpa:getZPABaCertificate\n      Arguments:\n        name: example.acme.com\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst foo = zpa.getZPABaCertificate({\n    id: \"1234567890\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nfoo = zpa.get_zpa_ba_certificate(id=\"1234567890\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Zpa.GetZPABaCertificate.Invoke(new()\n    {\n        Id = \"1234567890\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetZPABaCertificate(ctx, \u0026zpa.GetZPABaCertificateArgs{\n\t\t\tId: pulumi.StringRef(\"1234567890\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPABaCertificateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = ZpaFunctions.getZPABaCertificate(GetZPABaCertificateArgs.builder()\n            .id(\"1234567890\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: zpa:getZPABaCertificate\n      Arguments:\n        id: '1234567890'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getZPABaCertificate.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the browser access certificate to be exported.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the browser access certificate to be exported.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getZPABaCertificate.\n",
                "properties": {
                    "certChain": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "cname": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "issuedBy": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "issuedTo": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "modifiedTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "modifiedby": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "sans": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(string)\n"
                    },
                    "serialNo": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "validFromInEpochsec": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "validToInEpochsec": {
                        "type": "string",
                        "description": "(string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "certChain",
                    "cname",
                    "creationTime",
                    "description",
                    "issuedBy",
                    "issuedTo",
                    "modifiedTime",
                    "modifiedby",
                    "sans",
                    "serialNo",
                    "status",
                    "validFromInEpochsec",
                    "validToInEpochsec"
                ]
            }
        },
        "zpa:index/getZPACloudConnectorGroup:getZPACloudConnectorGroup": {
            "description": "Use the **zpa_cloud_connector_group** data source to get information about a cloud connector group created from the Zscaler Private Access cloud. This data source can then be referenced within an Access Policy rule\n\n\u003e **NOTE:** A Cloud Connector Group resource is created in the Zscaler Cloud Connector cloud and replicated to the ZPA cloud. This resource can then be referenced in a Access Policy Rule where the Object Type = `CLOUD_CONNECTOR_GROUP` is being used.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst foo = zpa.getZPACloudConnectorGroup({\n    name: \"AWS-Cloud\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nfoo = zpa.get_zpa_cloud_connector_group(name=\"AWS-Cloud\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Zpa.GetZPACloudConnectorGroup.Invoke(new()\n    {\n        Name = \"AWS-Cloud\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetZPACloudConnectorGroup(ctx, \u0026zpa.GetZPACloudConnectorGroupArgs{\n\t\t\tName: pulumi.StringRef(\"AWS-Cloud\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPACloudConnectorGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = ZpaFunctions.getZPACloudConnectorGroup(GetZPACloudConnectorGroupArgs.builder()\n            .name(\"AWS-Cloud\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: zpa:getZPACloudConnectorGroup\n      Arguments:\n        name: AWS-Cloud\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst foo = zpa.getZPACloudConnectorGroup({\n    id: \"1234567890\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nfoo = zpa.get_zpa_cloud_connector_group(id=\"1234567890\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Zpa.GetZPACloudConnectorGroup.Invoke(new()\n    {\n        Id = \"1234567890\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetZPACloudConnectorGroup(ctx, \u0026zpa.GetZPACloudConnectorGroupArgs{\n\t\t\tId: pulumi.StringRef(\"1234567890\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPACloudConnectorGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = ZpaFunctions.getZPACloudConnectorGroup(GetZPACloudConnectorGroupArgs.builder()\n            .id(\"1234567890\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: zpa:getZPACloudConnectorGroup\n      Arguments:\n        id: '1234567890'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getZPACloudConnectorGroup.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "This field defines the id of the cloud connector group.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "This field defines the name of the cloud connector group.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getZPACloudConnectorGroup.\n",
                "properties": {
                    "cloudConnectors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getZPACloudConnectorGroupCloudConnector:getZPACloudConnectorGroupCloudConnector"
                        },
                        "description": "(string) - Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.\n"
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "(string) - Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(string) - Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(bool) - Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.\n"
                    },
                    "geolocationId": {
                        "type": "string",
                        "description": "(string) - Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "modifiedTime": {
                        "type": "string",
                        "description": "(string)- Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.\n"
                    },
                    "modifiedby": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "(string) - This field defines the name of the cloud connector group.\n"
                    },
                    "ziaCloud": {
                        "type": "string",
                        "description": "(string) - Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.\n"
                    },
                    "ziaOrgId": {
                        "type": "string",
                        "description": "(string) - Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.\n"
                    }
                },
                "type": "object",
                "required": [
                    "cloudConnectors",
                    "creationTime",
                    "description",
                    "enabled",
                    "geolocationId",
                    "modifiedTime",
                    "modifiedby",
                    "ziaCloud",
                    "ziaOrgId"
                ]
            }
        },
        "zpa:index/getZPAEnrollmentCert:getZPAEnrollmentCert": {
            "description": "Use the **zpa_enrollment_cert** data source to get information about all configured enrollment certificate details created in the Zscaler Private Access cloud. This data source is required when creating provisioning key resources.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst root = zpa.getZPAEnrollmentCert({\n    name: \"Root\",\n});\nconst client = zpa.getZPAEnrollmentCert({\n    name: \"Client\",\n});\nconst connector = zpa.getZPAEnrollmentCert({\n    name: \"Connector\",\n});\nconst serviceEdge = zpa.getZPAEnrollmentCert({\n    name: \"Service Edge\",\n});\nconst isolationClient = zpa.getZPAEnrollmentCert({\n    name: \"Isolation Client\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nroot = zpa.get_zpa_enrollment_cert(name=\"Root\")\nclient = zpa.get_zpa_enrollment_cert(name=\"Client\")\nconnector = zpa.get_zpa_enrollment_cert(name=\"Connector\")\nservice_edge = zpa.get_zpa_enrollment_cert(name=\"Service Edge\")\nisolation_client = zpa.get_zpa_enrollment_cert(name=\"Isolation Client\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var root = Zpa.GetZPAEnrollmentCert.Invoke(new()\n    {\n        Name = \"Root\",\n    });\n\n    var client = Zpa.GetZPAEnrollmentCert.Invoke(new()\n    {\n        Name = \"Client\",\n    });\n\n    var connector = Zpa.GetZPAEnrollmentCert.Invoke(new()\n    {\n        Name = \"Connector\",\n    });\n\n    var serviceEdge = Zpa.GetZPAEnrollmentCert.Invoke(new()\n    {\n        Name = \"Service Edge\",\n    });\n\n    var isolationClient = Zpa.GetZPAEnrollmentCert.Invoke(new()\n    {\n        Name = \"Isolation Client\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetZPAEnrollmentCert(ctx, \u0026zpa.GetZPAEnrollmentCertArgs{\n\t\t\tName: pulumi.StringRef(\"Root\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = zpa.GetZPAEnrollmentCert(ctx, \u0026zpa.GetZPAEnrollmentCertArgs{\n\t\t\tName: pulumi.StringRef(\"Client\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = zpa.GetZPAEnrollmentCert(ctx, \u0026zpa.GetZPAEnrollmentCertArgs{\n\t\t\tName: pulumi.StringRef(\"Connector\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = zpa.GetZPAEnrollmentCert(ctx, \u0026zpa.GetZPAEnrollmentCertArgs{\n\t\t\tName: pulumi.StringRef(\"Service Edge\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = zpa.GetZPAEnrollmentCert(ctx, \u0026zpa.GetZPAEnrollmentCertArgs{\n\t\t\tName: pulumi.StringRef(\"Isolation Client\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPAEnrollmentCertArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var root = ZpaFunctions.getZPAEnrollmentCert(GetZPAEnrollmentCertArgs.builder()\n            .name(\"Root\")\n            .build());\n\n        final var client = ZpaFunctions.getZPAEnrollmentCert(GetZPAEnrollmentCertArgs.builder()\n            .name(\"Client\")\n            .build());\n\n        final var connector = ZpaFunctions.getZPAEnrollmentCert(GetZPAEnrollmentCertArgs.builder()\n            .name(\"Connector\")\n            .build());\n\n        final var serviceEdge = ZpaFunctions.getZPAEnrollmentCert(GetZPAEnrollmentCertArgs.builder()\n            .name(\"Service Edge\")\n            .build());\n\n        final var isolationClient = ZpaFunctions.getZPAEnrollmentCert(GetZPAEnrollmentCertArgs.builder()\n            .name(\"Isolation Client\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  root:\n    fn::invoke:\n      Function: zpa:getZPAEnrollmentCert\n      Arguments:\n        name: Root\n  client:\n    fn::invoke:\n      Function: zpa:getZPAEnrollmentCert\n      Arguments:\n        name: Client\n  connector:\n    fn::invoke:\n      Function: zpa:getZPAEnrollmentCert\n      Arguments:\n        name: Connector\n  serviceEdge:\n    fn::invoke:\n      Function: zpa:getZPAEnrollmentCert\n      Arguments:\n        name: Service Edge\n  isolationClient:\n    fn::invoke:\n      Function: zpa:getZPAEnrollmentCert\n      Arguments:\n        name: Isolation Client\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getZPAEnrollmentCert.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the enrollment certificate to be exported.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the enrollment certificate to be exported.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getZPAEnrollmentCert.\n",
                "properties": {
                    "allowSigning": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "certificate": {
                        "type": "string",
                        "description": "(string) The certificate text is in PEM format.\n"
                    },
                    "clientCertType": {
                        "type": "string",
                        "description": "(string) Returned values are:\n"
                    },
                    "cname": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "csr": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "issuedBy": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "issuedTo": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "modifiedBy": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "modifiedTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "parentCertId": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "parentCertName": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "privateKey": {
                        "type": "string"
                    },
                    "privateKeyPresent": {
                        "type": "boolean"
                    },
                    "serialNo": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "validFromInEpochSec": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "validToInEpochSec": {
                        "type": "string"
                    },
                    "zrsaEncryptedPrivateKey": {
                        "type": "string"
                    },
                    "zrsaEncryptedSessionKey": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "allowSigning",
                    "certificate",
                    "clientCertType",
                    "cname",
                    "creationTime",
                    "csr",
                    "description",
                    "issuedBy",
                    "issuedTo",
                    "modifiedBy",
                    "modifiedTime",
                    "parentCertId",
                    "parentCertName",
                    "privateKey",
                    "privateKeyPresent",
                    "serialNo",
                    "validFromInEpochSec",
                    "validToInEpochSec",
                    "zrsaEncryptedPrivateKey",
                    "zrsaEncryptedSessionKey"
                ]
            }
        },
        "zpa:index/getZPAIdPController:getZPAIdPController": {
            "description": "Use the **zpa_idp_controller** data source to get information about an Identity Provider created in the Zscaler Private Access cloud. This data source is required when creating:\n\n1. Access policy Rules\n2. Access policy timeout rules\n3. Access policy forwarding rules\n4. Access policy inspection rules\n5. Access policy isolation rules\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst example = zpa.getZPAIdPController({\n    name: \"idp_name\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nexample = zpa.get_zpa_id_p_controller(name=\"idp_name\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zpa.GetZPAIdPController.Invoke(new()\n    {\n        Name = \"idp_name\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetZPAIdPController(ctx, \u0026zpa.GetZPAIdPControllerArgs{\n\t\t\tName: pulumi.StringRef(\"idp_name\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPAIdPControllerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZpaFunctions.getZPAIdPController(GetZPAIdPControllerArgs.builder()\n            .name(\"idp_name\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zpa:getZPAIdPController\n      Arguments:\n        name: idp_name\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst example = zpa.getZPAIdPController({\n    id: \"1234567890\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nexample = zpa.get_zpa_id_p_controller(id=\"1234567890\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zpa.GetZPAIdPController.Invoke(new()\n    {\n        Id = \"1234567890\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetZPAIdPController(ctx, \u0026zpa.GetZPAIdPControllerArgs{\n\t\t\tId: pulumi.StringRef(\"1234567890\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPAIdPControllerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZpaFunctions.getZPAIdPController(GetZPAIdPControllerArgs.builder()\n            .id(\"1234567890\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zpa:getZPAIdPController\n      Arguments:\n        id: '1234567890'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getZPAIdPController.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The name of the Identity Provider (IdP) to be exported.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Identity Provider (IdP) to be exported.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getZPAIdPController.\n",
                "properties": {
                    "adminMetadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getZPAIdPControllerAdminMetadata:getZPAIdPControllerAdminMetadata"
                        },
                        "description": "(Computed)\n"
                    },
                    "adminSpSigningCertId": {
                        "type": "string"
                    },
                    "autoProvision": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "disableSamlBasedPolicy": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "domainLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(string)\n"
                    },
                    "enableScimBasedPolicy": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(bool) Default value if null is True\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "idpEntityId": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "loginNameAttribute": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "loginUrl": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "modifiedTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "modifiedby": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "reauthOnUserUpdate": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "redirectBinding": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "scimEnabled": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "scimServiceProviderEndpoint": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "scimSharedSecretExists": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "signSamlRequest": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "ssoTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(string)\n"
                    },
                    "useCustomSpMetadata": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "userMetadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getZPAIdPControllerUserMetadata:getZPAIdPControllerUserMetadata"
                        },
                        "description": "(Computed)\n"
                    },
                    "userSpSigningCertId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "adminMetadatas",
                    "adminSpSigningCertId",
                    "autoProvision",
                    "creationTime",
                    "description",
                    "disableSamlBasedPolicy",
                    "domainLists",
                    "enableScimBasedPolicy",
                    "enabled",
                    "id",
                    "idpEntityId",
                    "loginNameAttribute",
                    "loginUrl",
                    "modifiedTime",
                    "modifiedby",
                    "name",
                    "reauthOnUserUpdate",
                    "redirectBinding",
                    "scimEnabled",
                    "scimServiceProviderEndpoint",
                    "scimSharedSecretExists",
                    "signSamlRequest",
                    "ssoTypes",
                    "useCustomSpMetadata",
                    "userMetadatas",
                    "userSpSigningCertId"
                ]
            }
        },
        "zpa:index/getZPAInspectionAllPredefinedControls:getZPAInspectionAllPredefinedControls": {
            "description": "Use the **zpa_inspection_all_predefined_controls** data source to get information about all OWASP predefined control and prefedined control version by group name. The `Preprocessors` predefined control is the default predefined control, This data source is always required, when creating an inspection profile.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst this = zpa.getZPAInspectionAllPredefinedControls({\n    groupName: \"Preprocessors\",\n    version: \"OWASP_CRS/3.3.0\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nthis = zpa.get_zpa_inspection_all_predefined_controls(group_name=\"Preprocessors\",\n    version=\"OWASP_CRS/3.3.0\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Zpa.GetZPAInspectionAllPredefinedControls.Invoke(new()\n    {\n        GroupName = \"Preprocessors\",\n        Version = \"OWASP_CRS/3.3.0\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetZPAInspectionAllPredefinedControls(ctx, \u0026zpa.GetZPAInspectionAllPredefinedControlsArgs{\n\t\t\tGroupName: pulumi.StringRef(\"Preprocessors\"),\n\t\t\tVersion:   \"OWASP_CRS/3.3.0\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPAInspectionAllPredefinedControlsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = ZpaFunctions.getZPAInspectionAllPredefinedControls(GetZPAInspectionAllPredefinedControlsArgs.builder()\n            .groupName(\"Preprocessors\")\n            .version(\"OWASP_CRS/3.3.0\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      Function: zpa:getZPAInspectionAllPredefinedControls\n      Arguments:\n        groupName: Preprocessors\n        version: OWASP_CRS/3.3.0\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getZPAInspectionAllPredefinedControls.\n",
                "properties": {
                    "groupName": {
                        "type": "string",
                        "description": "The name of the predefined control.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "The version of the predefined control, the default is: `OWASP_CRS/3.3.0`\n"
                    }
                },
                "type": "object",
                "required": [
                    "version"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getZPAInspectionAllPredefinedControls.\n",
                "properties": {
                    "groupName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "lists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getZPAInspectionAllPredefinedControlsList:getZPAInspectionAllPredefinedControlsList"
                        }
                    },
                    "version": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "lists",
                    "version",
                    "id"
                ]
            }
        },
        "zpa:index/getZPAInspectionCustomControls:getZPAInspectionCustomControls": {
            "inputs": {
                "description": "A collection of arguments for invoking getZPAInspectionCustomControls.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getZPAInspectionCustomControls.\n",
                "properties": {
                    "action": {
                        "type": "string"
                    },
                    "actionValue": {
                        "type": "string"
                    },
                    "controlNumber": {
                        "type": "string"
                    },
                    "controlRuleJson": {
                        "type": "string"
                    },
                    "creationTime": {
                        "type": "string"
                    },
                    "defaultAction": {
                        "type": "string"
                    },
                    "defaultActionValue": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "modifiedTime": {
                        "type": "string"
                    },
                    "modifiedby": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "paranoiaLevel": {
                        "type": "string"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getZPAInspectionCustomControlsRule:getZPAInspectionCustomControlsRule"
                        }
                    },
                    "severity": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "action",
                    "actionValue",
                    "controlNumber",
                    "controlRuleJson",
                    "creationTime",
                    "defaultAction",
                    "defaultActionValue",
                    "description",
                    "id",
                    "modifiedTime",
                    "modifiedby",
                    "name",
                    "paranoiaLevel",
                    "rules",
                    "severity",
                    "type",
                    "version"
                ]
            }
        },
        "zpa:index/getZPAInspectionPredefinedControls:getZPAInspectionPredefinedControls": {
            "description": "Use the **zpa_inspection_predefined_controls** data source to get information about an OWASP predefined control and prefedined control version. This data source is required when creating an inspection profile.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst example = zpa.getZPAInspectionPredefinedControls({\n    name: \"Failed to parse request body\",\n    version: \"OWASP_CRS/3.3.0\",\n});\nexport const zpaInspectionPredefinedControls = example;\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nexample = zpa.get_zpa_inspection_predefined_controls(name=\"Failed to parse request body\",\n    version=\"OWASP_CRS/3.3.0\")\npulumi.export(\"zpaInspectionPredefinedControls\", example)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zpa.GetZPAInspectionPredefinedControls.Invoke(new()\n    {\n        Name = \"Failed to parse request body\",\n        Version = \"OWASP_CRS/3.3.0\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"zpaInspectionPredefinedControls\"] = example.Apply(getZPAInspectionPredefinedControlsResult =\u003e getZPAInspectionPredefinedControlsResult),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := zpa.GetZPAInspectionPredefinedControls(ctx, \u0026zpa.GetZPAInspectionPredefinedControlsArgs{\n\t\t\tName:    pulumi.StringRef(\"Failed to parse request body\"),\n\t\t\tVersion: pulumi.StringRef(\"OWASP_CRS/3.3.0\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"zpaInspectionPredefinedControls\", example)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPAInspectionPredefinedControlsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZpaFunctions.getZPAInspectionPredefinedControls(GetZPAInspectionPredefinedControlsArgs.builder()\n            .name(\"Failed to parse request body\")\n            .version(\"OWASP_CRS/3.3.0\")\n            .build());\n\n        ctx.export(\"zpaInspectionPredefinedControls\", example.applyValue(getZPAInspectionPredefinedControlsResult -\u003e getZPAInspectionPredefinedControlsResult));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zpa:getZPAInspectionPredefinedControls\n      Arguments:\n        name: Failed to parse request body\n        version: OWASP_CRS/3.3.0\noutputs:\n  zpaInspectionPredefinedControls: ${example}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getZPAInspectionPredefinedControls.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the predefined control.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "The version of the predefined control, the default is: `OWASP_CRS/3.3.0`\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getZPAInspectionPredefinedControls.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "actionValue": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "associatedInspectionProfileNames": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getZPAInspectionPredefinedControlsAssociatedInspectionProfileName:getZPAInspectionPredefinedControlsAssociatedInspectionProfileName"
                        },
                        "description": "(Computed)\n"
                    },
                    "attachment": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "controlGroup": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "controlNumber": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "defaultAction": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "defaultActionValue": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "modifiedTime": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "modifiedby": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "paranoiaLevel": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "severity": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "version": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "action",
                    "actionValue",
                    "associatedInspectionProfileNames",
                    "attachment",
                    "controlGroup",
                    "controlNumber",
                    "creationTime",
                    "defaultAction",
                    "defaultActionValue",
                    "description",
                    "id",
                    "modifiedTime",
                    "modifiedby",
                    "name",
                    "paranoiaLevel",
                    "severity"
                ]
            }
        },
        "zpa:index/getZPAInspectionProfile:getZPAInspectionProfile": {
            "description": "Use the **zpa_inspection_profile** data source to get information about an inspection profile in the Zscaler Private Access cloud. This resource can then be referenced in an inspection custom control resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst this = zpa.getZPAInspectionProfile({\n    name: \"Example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nthis = zpa.get_zpa_inspection_profile(name=\"Example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Zpa.GetZPAInspectionProfile.Invoke(new()\n    {\n        Name = \"Example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.LookupZPAInspectionProfile(ctx, \u0026zpa.LookupZPAInspectionProfileArgs{\n\t\t\tName: pulumi.StringRef(\"Example\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPAInspectionProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = ZpaFunctions.getZPAInspectionProfile(GetZPAInspectionProfileArgs.builder()\n            .name(\"Example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      Function: zpa:getZPAInspectionProfile\n      Arguments:\n        name: Example\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getZPAInspectionProfile.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "This field defines the id of the application server.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "This field defines the name of the server.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getZPAInspectionProfile.\n",
                "properties": {
                    "commonGlobalOverrideActionsConfig": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(string)\n"
                    },
                    "controlsInfos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getZPAInspectionProfileControlsInfo:getZPAInspectionProfileControlsInfo"
                        },
                        "description": "(string) Types for custom controls\n"
                    },
                    "creationTime": {
                        "type": "string"
                    },
                    "customControls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getZPAInspectionProfileCustomControl:getZPAInspectionProfileCustomControl"
                        },
                        "description": "(string) Types for custom controls\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(string) Description of the inspection profile.\n"
                    },
                    "globalControlActions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "incarnationNumber": {
                        "type": "string"
                    },
                    "modifiedBy": {
                        "type": "string"
                    },
                    "modifiedTime": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "paranoiaLevel": {
                        "type": "string",
                        "description": "(string) OWASP Predefined Paranoia Level. Range: [1-4], inclusive\n"
                    },
                    "predefinedControls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getZPAInspectionProfilePredefinedControl:getZPAInspectionProfilePredefinedControl"
                        },
                        "description": "(string) The predefined controls\n"
                    },
                    "predefinedControlsVersion": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "commonGlobalOverrideActionsConfig",
                    "controlsInfos",
                    "creationTime",
                    "customControls",
                    "description",
                    "globalControlActions",
                    "id",
                    "incarnationNumber",
                    "modifiedBy",
                    "modifiedTime",
                    "name",
                    "paranoiaLevel",
                    "predefinedControls",
                    "predefinedControlsVersion"
                ]
            }
        },
        "zpa:index/getZPALSSClientTypes:getZPALSSClientTypes": {
            "description": "Use the **zpa_lss_config_client_types** data source to get information about all LSS client types in the Zscaler Private Access cloud. This data source is required when the defining a policy rule resource for an object type as `CLIENT_TYPE` parameter in the LSS Config Controller resource is set. To learn more see the To learn more see the [Getting Details of All LSS Status Codes](https://help.zscaler.com/zpa/log-streaming-service-configuration-use-cases#GettingLSSClientTypes)\n\n\u003e **NOTE** By Default the ZPA provider will return all client types\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst example = zpa.getZPALSSClientTypes({});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nexample = zpa.get_zpalss_client_types()\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zpa.GetZPALSSClientTypes.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetZPALSSClientTypes(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZpaFunctions.getZPALSSClientTypes();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zpa:getZPALSSClientTypes\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getZPALSSClientTypes.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "zpnClientTypeEdgeConnector": {
                        "type": "string"
                    },
                    "zpnClientTypeExporter": {
                        "type": "string"
                    },
                    "zpnClientTypeIpAnchoring": {
                        "type": "string"
                    },
                    "zpnClientTypeMachineTunnel": {
                        "type": "string"
                    },
                    "zpnClientTypeSlogger": {
                        "type": "string"
                    },
                    "zpnClientTypeZapp": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "zpnClientTypeEdgeConnector",
                    "zpnClientTypeExporter",
                    "zpnClientTypeIpAnchoring",
                    "zpnClientTypeMachineTunnel",
                    "zpnClientTypeSlogger",
                    "zpnClientTypeZapp",
                    "id"
                ]
            }
        },
        "zpa:index/getZPALSSConfigController:getZPALSSConfigController": {
            "description": "Use the **zpa_lss_config_controller** data source to get information about a Log Streaming (LSS) configuration resource created in the Zscaler Private Access.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPALSSConfigControllerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZpaFunctions.getZPALSSConfigController(GetZPALSSConfigControllerArgs.builder()\n            .name(\"testAcc-lss-server\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zpa:getZPALSSConfigController\n      Arguments:\n        name: testAcc-lss-server\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst example = zpa.getZPALSSConfigController({\n    id: \"1234567890\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nexample = zpa.get_zpalss_config_controller(id=\"1234567890\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zpa.GetZPALSSConfigController.Invoke(new()\n    {\n        Id = \"1234567890\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.LookupZPALSSConfigController(ctx, \u0026zpa.LookupZPALSSConfigControllerArgs{\n\t\t\tId: pulumi.StringRef(\"1234567890\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPALSSConfigControllerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZpaFunctions.getZPALSSConfigController(GetZPALSSConfigControllerArgs.builder()\n            .id(\"1234567890\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zpa:getZPALSSConfigController\n      Arguments:\n        id: '1234567890'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getZPALSSConfigController.\n",
                "properties": {
                    "configs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getZPALSSConfigControllerConfig:getZPALSSConfigControllerConfig"
                        },
                        "description": "(Computed)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "This field defines the name of the log streaming resource.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getZPALSSConfigController.\n",
                "properties": {
                    "configs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getZPALSSConfigControllerConfig:getZPALSSConfigControllerConfig"
                        },
                        "description": "(Computed)\n"
                    },
                    "connectorGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getZPALSSConfigControllerConnectorGroup:getZPALSSConfigControllerConnectorGroup"
                        },
                        "description": "(Computed)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "policyRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getZPALSSConfigControllerPolicyRule:getZPALSSConfigControllerPolicyRule"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "configs",
                    "connectorGroups",
                    "policyRules"
                ]
            }
        },
        "zpa:index/getZPALSSLogTypeFormats:getZPALSSLogTypeFormats": {
            "description": "Use the **zpa_lss_config_log_type_formats** data source to get information about all LSS log type formats in the Zscaler Private Access cloud. This data source is required when creating an LSS Config Controller resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst zpnTransLog = zpa.getZPALSSLogTypeFormats({\n    logType: \"zpn_trans_log\",\n});\nconst zpnAuthLog = zpa.getZPALSSLogTypeFormats({\n    logType: \"zpn_auth_log\",\n});\nconst zpnAstAuthLog = zpa.getZPALSSLogTypeFormats({\n    logType: \"zpn_ast_auth_log\",\n});\nconst zpnHttpTransLog = zpa.getZPALSSLogTypeFormats({\n    logType: \"zpn_http_trans_log\",\n});\nconst zpnAuditLog = zpa.getZPALSSLogTypeFormats({\n    logType: \"zpn_audit_log\",\n});\nconst zpnSysAuthLog = zpa.getZPALSSLogTypeFormats({\n    logType: \"zpn_sys_auth_log\",\n});\nconst zpnAstComprehensiveStats = zpa.getZPALSSLogTypeFormats({\n    logType: \"zpn_ast_comprehensive_stats\",\n});\nconst zpnWafHttpExchangesLog = zpa.getZPALSSLogTypeFormats({\n    logType: \"zpn_waf_http_exchanges_log\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nzpn_trans_log = zpa.get_zpalss_log_type_formats(log_type=\"zpn_trans_log\")\nzpn_auth_log = zpa.get_zpalss_log_type_formats(log_type=\"zpn_auth_log\")\nzpn_ast_auth_log = zpa.get_zpalss_log_type_formats(log_type=\"zpn_ast_auth_log\")\nzpn_http_trans_log = zpa.get_zpalss_log_type_formats(log_type=\"zpn_http_trans_log\")\nzpn_audit_log = zpa.get_zpalss_log_type_formats(log_type=\"zpn_audit_log\")\nzpn_sys_auth_log = zpa.get_zpalss_log_type_formats(log_type=\"zpn_sys_auth_log\")\nzpn_ast_comprehensive_stats = zpa.get_zpalss_log_type_formats(log_type=\"zpn_ast_comprehensive_stats\")\nzpn_waf_http_exchanges_log = zpa.get_zpalss_log_type_formats(log_type=\"zpn_waf_http_exchanges_log\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var zpnTransLog = Zpa.GetZPALSSLogTypeFormats.Invoke(new()\n    {\n        LogType = \"zpn_trans_log\",\n    });\n\n    var zpnAuthLog = Zpa.GetZPALSSLogTypeFormats.Invoke(new()\n    {\n        LogType = \"zpn_auth_log\",\n    });\n\n    var zpnAstAuthLog = Zpa.GetZPALSSLogTypeFormats.Invoke(new()\n    {\n        LogType = \"zpn_ast_auth_log\",\n    });\n\n    var zpnHttpTransLog = Zpa.GetZPALSSLogTypeFormats.Invoke(new()\n    {\n        LogType = \"zpn_http_trans_log\",\n    });\n\n    var zpnAuditLog = Zpa.GetZPALSSLogTypeFormats.Invoke(new()\n    {\n        LogType = \"zpn_audit_log\",\n    });\n\n    var zpnSysAuthLog = Zpa.GetZPALSSLogTypeFormats.Invoke(new()\n    {\n        LogType = \"zpn_sys_auth_log\",\n    });\n\n    var zpnAstComprehensiveStats = Zpa.GetZPALSSLogTypeFormats.Invoke(new()\n    {\n        LogType = \"zpn_ast_comprehensive_stats\",\n    });\n\n    var zpnWafHttpExchangesLog = Zpa.GetZPALSSLogTypeFormats.Invoke(new()\n    {\n        LogType = \"zpn_waf_http_exchanges_log\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetZPALSSLogTypeFormats(ctx, \u0026zpa.GetZPALSSLogTypeFormatsArgs{\n\t\t\tLogType: \"zpn_trans_log\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = zpa.GetZPALSSLogTypeFormats(ctx, \u0026zpa.GetZPALSSLogTypeFormatsArgs{\n\t\t\tLogType: \"zpn_auth_log\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = zpa.GetZPALSSLogTypeFormats(ctx, \u0026zpa.GetZPALSSLogTypeFormatsArgs{\n\t\t\tLogType: \"zpn_ast_auth_log\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = zpa.GetZPALSSLogTypeFormats(ctx, \u0026zpa.GetZPALSSLogTypeFormatsArgs{\n\t\t\tLogType: \"zpn_http_trans_log\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = zpa.GetZPALSSLogTypeFormats(ctx, \u0026zpa.GetZPALSSLogTypeFormatsArgs{\n\t\t\tLogType: \"zpn_audit_log\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = zpa.GetZPALSSLogTypeFormats(ctx, \u0026zpa.GetZPALSSLogTypeFormatsArgs{\n\t\t\tLogType: \"zpn_sys_auth_log\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = zpa.GetZPALSSLogTypeFormats(ctx, \u0026zpa.GetZPALSSLogTypeFormatsArgs{\n\t\t\tLogType: \"zpn_ast_comprehensive_stats\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = zpa.GetZPALSSLogTypeFormats(ctx, \u0026zpa.GetZPALSSLogTypeFormatsArgs{\n\t\t\tLogType: \"zpn_waf_http_exchanges_log\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPALSSLogTypeFormatsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var zpnTransLog = ZpaFunctions.getZPALSSLogTypeFormats(GetZPALSSLogTypeFormatsArgs.builder()\n            .logType(\"zpn_trans_log\")\n            .build());\n\n        final var zpnAuthLog = ZpaFunctions.getZPALSSLogTypeFormats(GetZPALSSLogTypeFormatsArgs.builder()\n            .logType(\"zpn_auth_log\")\n            .build());\n\n        final var zpnAstAuthLog = ZpaFunctions.getZPALSSLogTypeFormats(GetZPALSSLogTypeFormatsArgs.builder()\n            .logType(\"zpn_ast_auth_log\")\n            .build());\n\n        final var zpnHttpTransLog = ZpaFunctions.getZPALSSLogTypeFormats(GetZPALSSLogTypeFormatsArgs.builder()\n            .logType(\"zpn_http_trans_log\")\n            .build());\n\n        final var zpnAuditLog = ZpaFunctions.getZPALSSLogTypeFormats(GetZPALSSLogTypeFormatsArgs.builder()\n            .logType(\"zpn_audit_log\")\n            .build());\n\n        final var zpnSysAuthLog = ZpaFunctions.getZPALSSLogTypeFormats(GetZPALSSLogTypeFormatsArgs.builder()\n            .logType(\"zpn_sys_auth_log\")\n            .build());\n\n        final var zpnAstComprehensiveStats = ZpaFunctions.getZPALSSLogTypeFormats(GetZPALSSLogTypeFormatsArgs.builder()\n            .logType(\"zpn_ast_comprehensive_stats\")\n            .build());\n\n        final var zpnWafHttpExchangesLog = ZpaFunctions.getZPALSSLogTypeFormats(GetZPALSSLogTypeFormatsArgs.builder()\n            .logType(\"zpn_waf_http_exchanges_log\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  zpnTransLog:\n    fn::invoke:\n      Function: zpa:getZPALSSLogTypeFormats\n      Arguments:\n        logType: zpn_trans_log\n  zpnAuthLog:\n    fn::invoke:\n      Function: zpa:getZPALSSLogTypeFormats\n      Arguments:\n        logType: zpn_auth_log\n  zpnAstAuthLog:\n    fn::invoke:\n      Function: zpa:getZPALSSLogTypeFormats\n      Arguments:\n        logType: zpn_ast_auth_log\n  zpnHttpTransLog:\n    fn::invoke:\n      Function: zpa:getZPALSSLogTypeFormats\n      Arguments:\n        logType: zpn_http_trans_log\n  zpnAuditLog:\n    fn::invoke:\n      Function: zpa:getZPALSSLogTypeFormats\n      Arguments:\n        logType: zpn_audit_log\n  zpnSysAuthLog:\n    fn::invoke:\n      Function: zpa:getZPALSSLogTypeFormats\n      Arguments:\n        logType: zpn_sys_auth_log\n  zpnAstComprehensiveStats:\n    fn::invoke:\n      Function: zpa:getZPALSSLogTypeFormats\n      Arguments:\n        logType: zpn_ast_comprehensive_stats\n  zpnWafHttpExchangesLog:\n    fn::invoke:\n      Function: zpa:getZPALSSLogTypeFormats\n      Arguments:\n        logType: zpn_waf_http_exchanges_log\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getZPALSSLogTypeFormats.\n",
                "properties": {
                    "logType": {
                        "type": "string",
                        "description": "The type of log to be exported.\n"
                    }
                },
                "type": "object",
                "required": [
                    "logType"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getZPALSSLogTypeFormats.\n",
                "properties": {
                    "csv": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "json": {
                        "type": "string"
                    },
                    "logType": {
                        "type": "string"
                    },
                    "tsv": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "csv",
                    "json",
                    "logType",
                    "tsv",
                    "id"
                ]
            }
        },
        "zpa:index/getZPALSSStatusCodes:getZPALSSStatusCodes": {
            "description": "Use the **zpa_lss_config_status_codes** data source to get information about all LSS status codes in the Zscaler Private Access cloud. This data source is required when the `filter` parameter in the LSS Config Controller resource is set. To learn more see the [Getting Details of All LSS Status Codes](https://help.zscaler.com/zpa/log-streaming-service-configuration-use-cases#GettingLSSStatusCodes)\n\n\u003e **NOTE** By Default the ZPA provider will return all status codes\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst this = zpa.getZPALSSStatusCodes({});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nthis = zpa.get_zpalss_status_codes()\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Zpa.GetZPALSSStatusCodes.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetZPALSSStatusCodes(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = ZpaFunctions.getZPALSSStatusCodes();\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      Function: zpa:getZPALSSStatusCodes\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getZPALSSStatusCodes.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "zpnAstAuthLog": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "zpnAuthLog": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "zpnSysAuthLog": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "zpnTransLog": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "zpnAstAuthLog",
                    "zpnAuthLog",
                    "zpnSysAuthLog",
                    "zpnTransLog",
                    "id"
                ]
            }
        },
        "zpa:index/getZPAMachineGroup:getZPAMachineGroup": {
            "description": "Use the **zpa_machine_group** data source to get information about a machine group created in the Zscaler Private Access cloud. This data source can then be referenced in an Access Policy, Timeout policy, Forwarding Policy, Inspection Policy or Isolation Policy.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst example = zpa.getZPAMachineGroup({\n    name: \"MGR01\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nexample = zpa.get_zpa_machine_group(name=\"MGR01\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zpa.GetZPAMachineGroup.Invoke(new()\n    {\n        Name = \"MGR01\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetZPAMachineGroup(ctx, \u0026zpa.GetZPAMachineGroupArgs{\n\t\t\tName: pulumi.StringRef(\"MGR01\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPAMachineGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZpaFunctions.getZPAMachineGroup(GetZPAMachineGroupArgs.builder()\n            .name(\"MGR01\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zpa:getZPAMachineGroup\n      Arguments:\n        name: MGR01\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst example = zpa.getZPAMachineGroup({\n    id: \"1234567890\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nexample = zpa.get_zpa_machine_group(id=\"1234567890\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zpa.GetZPAMachineGroup.Invoke(new()\n    {\n        Id = \"1234567890\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetZPAMachineGroup(ctx, \u0026zpa.GetZPAMachineGroupArgs{\n\t\t\tId: pulumi.StringRef(\"1234567890\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPAMachineGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZpaFunctions.getZPAMachineGroup(GetZPAMachineGroupArgs.builder()\n            .id(\"1234567890\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zpa:getZPAMachineGroup\n      Arguments:\n        id: '1234567890'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getZPAMachineGroup.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the machine group to be exported.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the machine group to be exported.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getZPAMachineGroup.\n",
                "properties": {
                    "creationTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "machines": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getZPAMachineGroupMachine:getZPAMachineGroupMachine"
                        },
                        "description": "(string)\n"
                    },
                    "modifiedBy": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "modifiedTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "creationTime",
                    "description",
                    "enabled",
                    "machines",
                    "modifiedBy",
                    "modifiedTime"
                ]
            }
        },
        "zpa:index/getZPAPolicyType:getZPAPolicyType": {
            "description": "Use the **zpa_policy_type** data source to get information about an a ``policy_set_id`` and ``policy_type``. This data source is required when creating:\n\n1. Access policy Rules\n2. Access policy timeout rules\n3. Access policy forwarding rules\n4. Access policy inspection rules\n\n\u003e **NOTE** The parameters ``policy_set_id`` is required in all circumstances and is exported when checking for the policy_type parameter. The policy_type value is used for differentiating the policy types, in the request endpoint. The supported values are:\n\n* ``ACCESS_POLICY/GLOBAL_POLICY``\n* ``TIMEOUT_POLICY/REAUTH_POLICY``\n* ``BYPASS_POLICY/CLIENT_FORWARDING_POLICY``\n* ``INSPECTION_POLICY``\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst accessPolicy = zpa.getZPAPolicyType({\n    policyType: \"ACCESS_POLICY\",\n});\nexport const zpaPolicyTypeAccessPolicy = accessPolicy.then(accessPolicy =\u003e accessPolicy.id);\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\naccess_policy = zpa.get_zpa_policy_type(policy_type=\"ACCESS_POLICY\")\npulumi.export(\"zpaPolicyTypeAccessPolicy\", access_policy.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var accessPolicy = Zpa.GetZPAPolicyType.Invoke(new()\n    {\n        PolicyType = \"ACCESS_POLICY\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"zpaPolicyTypeAccessPolicy\"] = accessPolicy.Apply(getZPAPolicyTypeResult =\u003e getZPAPolicyTypeResult.Id),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\taccessPolicy, err := zpa.GetZPAPolicyType(ctx, \u0026zpa.GetZPAPolicyTypeArgs{\n\t\t\tPolicyType: pulumi.StringRef(\"ACCESS_POLICY\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"zpaPolicyTypeAccessPolicy\", accessPolicy.Id)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPAPolicyTypeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var accessPolicy = ZpaFunctions.getZPAPolicyType(GetZPAPolicyTypeArgs.builder()\n            .policyType(\"ACCESS_POLICY\")\n            .build());\n\n        ctx.export(\"zpaPolicyTypeAccessPolicy\", accessPolicy.applyValue(getZPAPolicyTypeResult -\u003e getZPAPolicyTypeResult.id()));\n    }\n}\n```\n```yaml\nvariables:\n  accessPolicy:\n    fn::invoke:\n      Function: zpa:getZPAPolicyType\n      Arguments:\n        policyType: ACCESS_POLICY\noutputs:\n  zpaPolicyTypeAccessPolicy: ${accessPolicy.id}\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst globalPolicy = zpa.getZPAPolicyType({\n    policyType: \"GLOBAL_POLICY\",\n});\nexport const zpaPolicyTypeAccessPolicy = globalPolicy.then(globalPolicy =\u003e globalPolicy.id);\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nglobal_policy = zpa.get_zpa_policy_type(policy_type=\"GLOBAL_POLICY\")\npulumi.export(\"zpaPolicyTypeAccessPolicy\", global_policy.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var globalPolicy = Zpa.GetZPAPolicyType.Invoke(new()\n    {\n        PolicyType = \"GLOBAL_POLICY\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"zpaPolicyTypeAccessPolicy\"] = globalPolicy.Apply(getZPAPolicyTypeResult =\u003e getZPAPolicyTypeResult.Id),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tglobalPolicy, err := zpa.GetZPAPolicyType(ctx, \u0026zpa.GetZPAPolicyTypeArgs{\n\t\t\tPolicyType: pulumi.StringRef(\"GLOBAL_POLICY\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"zpaPolicyTypeAccessPolicy\", globalPolicy.Id)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPAPolicyTypeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var globalPolicy = ZpaFunctions.getZPAPolicyType(GetZPAPolicyTypeArgs.builder()\n            .policyType(\"GLOBAL_POLICY\")\n            .build());\n\n        ctx.export(\"zpaPolicyTypeAccessPolicy\", globalPolicy.applyValue(getZPAPolicyTypeResult -\u003e getZPAPolicyTypeResult.id()));\n    }\n}\n```\n```yaml\nvariables:\n  globalPolicy:\n    fn::invoke:\n      Function: zpa:getZPAPolicyType\n      Arguments:\n        policyType: GLOBAL_POLICY\noutputs:\n  zpaPolicyTypeAccessPolicy: ${globalPolicy.id}\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst timeoutPolicy = zpa.getZPAPolicyType({\n    policyType: \"TIMEOUT_POLICY\",\n});\nexport const zpaPolicyTypeTimeoutPolicy = timeoutPolicy.then(timeoutPolicy =\u003e timeoutPolicy.id);\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\ntimeout_policy = zpa.get_zpa_policy_type(policy_type=\"TIMEOUT_POLICY\")\npulumi.export(\"zpaPolicyTypeTimeoutPolicy\", timeout_policy.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var timeoutPolicy = Zpa.GetZPAPolicyType.Invoke(new()\n    {\n        PolicyType = \"TIMEOUT_POLICY\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"zpaPolicyTypeTimeoutPolicy\"] = timeoutPolicy.Apply(getZPAPolicyTypeResult =\u003e getZPAPolicyTypeResult.Id),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttimeoutPolicy, err := zpa.GetZPAPolicyType(ctx, \u0026zpa.GetZPAPolicyTypeArgs{\n\t\t\tPolicyType: pulumi.StringRef(\"TIMEOUT_POLICY\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"zpaPolicyTypeTimeoutPolicy\", timeoutPolicy.Id)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPAPolicyTypeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var timeoutPolicy = ZpaFunctions.getZPAPolicyType(GetZPAPolicyTypeArgs.builder()\n            .policyType(\"TIMEOUT_POLICY\")\n            .build());\n\n        ctx.export(\"zpaPolicyTypeTimeoutPolicy\", timeoutPolicy.applyValue(getZPAPolicyTypeResult -\u003e getZPAPolicyTypeResult.id()));\n    }\n}\n```\n```yaml\nvariables:\n  timeoutPolicy:\n    fn::invoke:\n      Function: zpa:getZPAPolicyType\n      Arguments:\n        policyType: TIMEOUT_POLICY\noutputs:\n  zpaPolicyTypeTimeoutPolicy: ${timeoutPolicy.id}\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst reauthPolicy = zpa.getZPAPolicyType({\n    policyType: \"REAUTH_POLICY\",\n});\nexport const zpaPolicyTypeReauthPolicy = reauthPolicy.then(reauthPolicy =\u003e reauthPolicy.id);\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nreauth_policy = zpa.get_zpa_policy_type(policy_type=\"REAUTH_POLICY\")\npulumi.export(\"zpaPolicyTypeReauthPolicy\", reauth_policy.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var reauthPolicy = Zpa.GetZPAPolicyType.Invoke(new()\n    {\n        PolicyType = \"REAUTH_POLICY\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"zpaPolicyTypeReauthPolicy\"] = reauthPolicy.Apply(getZPAPolicyTypeResult =\u003e getZPAPolicyTypeResult.Id),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treauthPolicy, err := zpa.GetZPAPolicyType(ctx, \u0026zpa.GetZPAPolicyTypeArgs{\n\t\t\tPolicyType: pulumi.StringRef(\"REAUTH_POLICY\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"zpaPolicyTypeReauthPolicy\", reauthPolicy.Id)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPAPolicyTypeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var reauthPolicy = ZpaFunctions.getZPAPolicyType(GetZPAPolicyTypeArgs.builder()\n            .policyType(\"REAUTH_POLICY\")\n            .build());\n\n        ctx.export(\"zpaPolicyTypeReauthPolicy\", reauthPolicy.applyValue(getZPAPolicyTypeResult -\u003e getZPAPolicyTypeResult.id()));\n    }\n}\n```\n```yaml\nvariables:\n  reauthPolicy:\n    fn::invoke:\n      Function: zpa:getZPAPolicyType\n      Arguments:\n        policyType: REAUTH_POLICY\noutputs:\n  zpaPolicyTypeReauthPolicy: ${reauthPolicy.id}\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst clientForwardingPolicy = zpa.getZPAPolicyType({\n    policyType: \"CLIENT_FORWARDING_POLICY\",\n});\nexport const zpaPolicyTypeClientForwardingPolicy = clientForwardingPolicy.then(clientForwardingPolicy =\u003e clientForwardingPolicy.id);\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nclient_forwarding_policy = zpa.get_zpa_policy_type(policy_type=\"CLIENT_FORWARDING_POLICY\")\npulumi.export(\"zpaPolicyTypeClientForwardingPolicy\", client_forwarding_policy.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var clientForwardingPolicy = Zpa.GetZPAPolicyType.Invoke(new()\n    {\n        PolicyType = \"CLIENT_FORWARDING_POLICY\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"zpaPolicyTypeClientForwardingPolicy\"] = clientForwardingPolicy.Apply(getZPAPolicyTypeResult =\u003e getZPAPolicyTypeResult.Id),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tclientForwardingPolicy, err := zpa.GetZPAPolicyType(ctx, \u0026zpa.GetZPAPolicyTypeArgs{\n\t\t\tPolicyType: pulumi.StringRef(\"CLIENT_FORWARDING_POLICY\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"zpaPolicyTypeClientForwardingPolicy\", clientForwardingPolicy.Id)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPAPolicyTypeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var clientForwardingPolicy = ZpaFunctions.getZPAPolicyType(GetZPAPolicyTypeArgs.builder()\n            .policyType(\"CLIENT_FORWARDING_POLICY\")\n            .build());\n\n        ctx.export(\"zpaPolicyTypeClientForwardingPolicy\", clientForwardingPolicy.applyValue(getZPAPolicyTypeResult -\u003e getZPAPolicyTypeResult.id()));\n    }\n}\n```\n```yaml\nvariables:\n  clientForwardingPolicy:\n    fn::invoke:\n      Function: zpa:getZPAPolicyType\n      Arguments:\n        policyType: CLIENT_FORWARDING_POLICY\noutputs:\n  zpaPolicyTypeClientForwardingPolicy: ${clientForwardingPolicy.id}\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst inspectionPolicy = zpa.getZPAPolicyType({\n    policyType: \"INSPECTION_POLICY\",\n});\nexport const zpaPolicyTypeInspectionPolicy = inspectionPolicy.then(inspectionPolicy =\u003e inspectionPolicy.id);\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\ninspection_policy = zpa.get_zpa_policy_type(policy_type=\"INSPECTION_POLICY\")\npulumi.export(\"zpaPolicyTypeInspectionPolicy\", inspection_policy.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var inspectionPolicy = Zpa.GetZPAPolicyType.Invoke(new()\n    {\n        PolicyType = \"INSPECTION_POLICY\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"zpaPolicyTypeInspectionPolicy\"] = inspectionPolicy.Apply(getZPAPolicyTypeResult =\u003e getZPAPolicyTypeResult.Id),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tinspectionPolicy, err := zpa.GetZPAPolicyType(ctx, \u0026zpa.GetZPAPolicyTypeArgs{\n\t\t\tPolicyType: pulumi.StringRef(\"INSPECTION_POLICY\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"zpaPolicyTypeInspectionPolicy\", inspectionPolicy.Id)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPAPolicyTypeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var inspectionPolicy = ZpaFunctions.getZPAPolicyType(GetZPAPolicyTypeArgs.builder()\n            .policyType(\"INSPECTION_POLICY\")\n            .build());\n\n        ctx.export(\"zpaPolicyTypeInspectionPolicy\", inspectionPolicy.applyValue(getZPAPolicyTypeResult -\u003e getZPAPolicyTypeResult.id()));\n    }\n}\n```\n```yaml\nvariables:\n  inspectionPolicy:\n    fn::invoke:\n      Function: zpa:getZPAPolicyType\n      Arguments:\n        policyType: INSPECTION_POLICY\noutputs:\n  zpaPolicyTypeInspectionPolicy: ${inspectionPolicy.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getZPAPolicyType.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "policyType": {
                        "type": "string",
                        "description": "The value for differentiating the policy types.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getZPAPolicyType.\n",
                "properties": {
                    "creationTime": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "modifiedBy": {
                        "type": "string"
                    },
                    "modifiedTime": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "policyType": {
                        "type": "string"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getZPAPolicyTypeRule:getZPAPolicyTypeRule"
                        }
                    },
                    "sorted": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "creationTime",
                    "description",
                    "enabled",
                    "modifiedBy",
                    "modifiedTime",
                    "name",
                    "policyType",
                    "rules",
                    "sorted"
                ]
            }
        },
        "zpa:index/getZPAPostureProfile:getZPAPostureProfile": {
            "description": "Use the **zpa_posture_profile** data source to get information about a posture profile created in the Zscaler Private Access Mobile Portal. This data source can then be referenced in an Access Policy, Timeout policy, Forwarding Policy, Inspection Policy or Isolation Policy.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst example1 = zpa.getZPAPostureProfile({\n    name: \"CrowdStrike_ZPA_ZTA_40\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nexample1 = zpa.get_zpa_posture_profile(name=\"CrowdStrike_ZPA_ZTA_40\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example1 = Zpa.GetZPAPostureProfile.Invoke(new()\n    {\n        Name = \"CrowdStrike_ZPA_ZTA_40\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetZPAPostureProfile(ctx, \u0026zpa.GetZPAPostureProfileArgs{\n\t\t\tName: pulumi.StringRef(\"CrowdStrike_ZPA_ZTA_40\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPAPostureProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example1 = ZpaFunctions.getZPAPostureProfile(GetZPAPostureProfileArgs.builder()\n            .name(\"CrowdStrike_ZPA_ZTA_40\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example1:\n    fn::invoke:\n      Function: zpa:getZPAPostureProfile\n      Arguments:\n        name: CrowdStrike_ZPA_ZTA_40\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst example2 = zpa.getZPAPostureProfile({\n    name: \"Detect SentinelOne\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nexample2 = zpa.get_zpa_posture_profile(name=\"Detect SentinelOne\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example2 = Zpa.GetZPAPostureProfile.Invoke(new()\n    {\n        Name = \"Detect SentinelOne\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetZPAPostureProfile(ctx, \u0026zpa.GetZPAPostureProfileArgs{\n\t\t\tName: pulumi.StringRef(\"Detect SentinelOne\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPAPostureProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example2 = ZpaFunctions.getZPAPostureProfile(GetZPAPostureProfileArgs.builder()\n            .name(\"Detect SentinelOne\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example2:\n    fn::invoke:\n      Function: zpa:getZPAPostureProfile\n      Arguments:\n        name: Detect SentinelOne\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst example3 = zpa.getZPAPostureProfile({\n    name: \"domain_joined\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nexample3 = zpa.get_zpa_posture_profile(name=\"domain_joined\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example3 = Zpa.GetZPAPostureProfile.Invoke(new()\n    {\n        Name = \"domain_joined\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetZPAPostureProfile(ctx, \u0026zpa.GetZPAPostureProfileArgs{\n\t\t\tName: pulumi.StringRef(\"domain_joined\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPAPostureProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example3 = ZpaFunctions.getZPAPostureProfile(GetZPAPostureProfileArgs.builder()\n            .name(\"domain_joined\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example3:\n    fn::invoke:\n      Function: zpa:getZPAPostureProfile\n      Arguments:\n        name: domain_joined\n```\n\n\u003e **NOTE** To query posture profiles that are associated with a specific Zscaler cloud, it is required to append the cloud name to the name of the posture profile as the below example:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst example1 = zpa.getZPAPostureProfile({\n    name: \"CrowdStrike_ZPA_ZTA_40 (zscalertwo.net)\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nexample1 = zpa.get_zpa_posture_profile(name=\"CrowdStrike_ZPA_ZTA_40 (zscalertwo.net)\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example1 = Zpa.GetZPAPostureProfile.Invoke(new()\n    {\n        Name = \"CrowdStrike_ZPA_ZTA_40 (zscalertwo.net)\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetZPAPostureProfile(ctx, \u0026zpa.GetZPAPostureProfileArgs{\n\t\t\tName: pulumi.StringRef(\"CrowdStrike_ZPA_ZTA_40 (zscalertwo.net)\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPAPostureProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example1 = ZpaFunctions.getZPAPostureProfile(GetZPAPostureProfileArgs.builder()\n            .name(\"CrowdStrike_ZPA_ZTA_40 (zscalertwo.net)\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example1:\n    fn::invoke:\n      Function: zpa:getZPAPostureProfile\n      Arguments:\n        name: CrowdStrike_ZPA_ZTA_40 (zscalertwo.net)\n```\n\n\u003e **NOTE** When associating a posture profile with one of supported resources, the following parameter must be exported: ``posture_udid`` instead of the ``id`` of the resource.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst example1 = zpa.getZPAPostureProfile({\n    name: \"CrowdStrike_ZPA_ZTA_40 (zscalertwo.net)\",\n});\nexport const zpaPostureProfile = example1.then(example1 =\u003e example1.postureUdid);\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nexample1 = zpa.get_zpa_posture_profile(name=\"CrowdStrike_ZPA_ZTA_40 (zscalertwo.net)\")\npulumi.export(\"zpaPostureProfile\", example1.posture_udid)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example1 = Zpa.GetZPAPostureProfile.Invoke(new()\n    {\n        Name = \"CrowdStrike_ZPA_ZTA_40 (zscalertwo.net)\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"zpaPostureProfile\"] = example1.Apply(getZPAPostureProfileResult =\u003e getZPAPostureProfileResult.PostureUdid),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample1, err := zpa.GetZPAPostureProfile(ctx, \u0026zpa.GetZPAPostureProfileArgs{\n\t\t\tName: pulumi.StringRef(\"CrowdStrike_ZPA_ZTA_40 (zscalertwo.net)\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"zpaPostureProfile\", example1.PostureUdid)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPAPostureProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example1 = ZpaFunctions.getZPAPostureProfile(GetZPAPostureProfileArgs.builder()\n            .name(\"CrowdStrike_ZPA_ZTA_40 (zscalertwo.net)\")\n            .build());\n\n        ctx.export(\"zpaPostureProfile\", example1.applyValue(getZPAPostureProfileResult -\u003e getZPAPostureProfileResult.postureUdid()));\n    }\n}\n```\n```yaml\nvariables:\n  example1:\n    fn::invoke:\n      Function: zpa:getZPAPostureProfile\n      Arguments:\n        name: CrowdStrike_ZPA_ZTA_40 (zscalertwo.net)\noutputs:\n  zpaPostureProfile: ${example1.postureUdid}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getZPAPostureProfile.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the posture profile to be exported.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getZPAPostureProfile.\n",
                "properties": {
                    "creationTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "masterCustomerId": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "modifiedTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "modifiedby": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "postureUdid": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "zscalerCloud": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "zscalerCustomerId": {
                        "type": "string",
                        "description": "(string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "creationTime",
                    "domain",
                    "id",
                    "masterCustomerId",
                    "modifiedTime",
                    "modifiedby",
                    "postureUdid",
                    "zscalerCloud",
                    "zscalerCustomerId"
                ]
            }
        },
        "zpa:index/getZPAProvisioningKey:getZPAProvisioningKey": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst example = zpa.getZPAProvisioningKey({\n    associationType: \"CONNECTOR_GRP\",\n    name: \"Provisioning_Key\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nexample = zpa.get_zpa_provisioning_key(association_type=\"CONNECTOR_GRP\",\n    name=\"Provisioning_Key\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zpa.GetZPAProvisioningKey.Invoke(new()\n    {\n        AssociationType = \"CONNECTOR_GRP\",\n        Name = \"Provisioning_Key\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.LookupZPAProvisioningKey(ctx, \u0026zpa.LookupZPAProvisioningKeyArgs{\n\t\t\tAssociationType: \"CONNECTOR_GRP\",\n\t\t\tName:            pulumi.StringRef(\"Provisioning_Key\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPAProvisioningKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZpaFunctions.getZPAProvisioningKey(GetZPAProvisioningKeyArgs.builder()\n            .associationType(\"CONNECTOR_GRP\")\n            .name(\"Provisioning_Key\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zpa:getZPAProvisioningKey\n      Arguments:\n        associationType: CONNECTOR_GRP\n        name: Provisioning_Key\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst example = zpa.getZPAProvisioningKey({\n    associationType: \"SERVICE_EDGE_GRP\",\n    name: \"Provisioning_Key\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nexample = zpa.get_zpa_provisioning_key(association_type=\"SERVICE_EDGE_GRP\",\n    name=\"Provisioning_Key\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zpa.GetZPAProvisioningKey.Invoke(new()\n    {\n        AssociationType = \"SERVICE_EDGE_GRP\",\n        Name = \"Provisioning_Key\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.LookupZPAProvisioningKey(ctx, \u0026zpa.LookupZPAProvisioningKeyArgs{\n\t\t\tAssociationType: \"SERVICE_EDGE_GRP\",\n\t\t\tName:            pulumi.StringRef(\"Provisioning_Key\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPAProvisioningKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZpaFunctions.getZPAProvisioningKey(GetZPAProvisioningKeyArgs.builder()\n            .associationType(\"SERVICE_EDGE_GRP\")\n            .name(\"Provisioning_Key\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zpa:getZPAProvisioningKey\n      Arguments:\n        associationType: SERVICE_EDGE_GRP\n        name: Provisioning_Key\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getZPAProvisioningKey.\n",
                "properties": {
                    "associationType": {
                        "type": "string",
                        "description": "Specifies the provisioning key type for App Connectors or ZPA Private Service Edges. The supported values are `CONNECTOR_GRP` and `SERVICE_EDGE_GRP`\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the provisioning key to be exported.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the provisioning key.\n"
                    }
                },
                "type": "object",
                "required": [
                    "associationType"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getZPAProvisioningKey.\n",
                "properties": {
                    "appConnectorGroupId": {
                        "type": "string"
                    },
                    "appConnectorGroupName": {
                        "type": "string"
                    },
                    "associationType": {
                        "type": "string"
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "enrollmentCertId": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "enrollmentCertName": {
                        "type": "string",
                        "description": "(string) Applicable only for GET calls, ignored in PUT/POST calls.\n"
                    },
                    "expirationInEpochSec": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "ipAcls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(string)\n"
                    },
                    "maxUsage": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "modifiedTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "modifiedby": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "provisioningKey": {
                        "type": "string",
                        "description": "(string) Ignored in PUT/POST calls.\n"
                    },
                    "uiConfig": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "usageCount": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "zcomponentId": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "zcomponentName": {
                        "type": "string",
                        "description": "(string) Applicable only for GET calls, ignored in PUT/POST calls.\n"
                    }
                },
                "type": "object",
                "required": [
                    "appConnectorGroupId",
                    "appConnectorGroupName",
                    "associationType",
                    "creationTime",
                    "enabled",
                    "enrollmentCertId",
                    "enrollmentCertName",
                    "expirationInEpochSec",
                    "ipAcls",
                    "maxUsage",
                    "modifiedTime",
                    "modifiedby",
                    "provisioningKey",
                    "uiConfig",
                    "usageCount",
                    "zcomponentId",
                    "zcomponentName"
                ]
            }
        },
        "zpa:index/getZPASAMLAttribute:getZPASAMLAttribute": {
            "description": "Use the **zpa_saml_attribute** data source to get information about a SAML Attributes from an Identity Provider (IdP). This data source can then be referenced in an Access Policy, Timeout policy, Forwarding Policy, Inspection Policy or Isolation Policy.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst emailUserSso = zpa.getZPASAMLAttribute({\n    name: \"Email_User SSO\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nemail_user_sso = zpa.get_zpasaml_attribute(name=\"Email_User SSO\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var emailUserSso = Zpa.GetZPASAMLAttribute.Invoke(new()\n    {\n        Name = \"Email_User SSO\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetZPASAMLAttribute(ctx, \u0026zpa.GetZPASAMLAttributeArgs{\n\t\t\tName: pulumi.StringRef(\"Email_User SSO\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPASAMLAttributeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var emailUserSso = ZpaFunctions.getZPASAMLAttribute(GetZPASAMLAttributeArgs.builder()\n            .name(\"Email_User SSO\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  emailUserSso:\n    fn::invoke:\n      Function: zpa:getZPASAMLAttribute\n      Arguments:\n        name: Email_User SSO\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst department = zpa.getZPASAMLAttribute({\n    name: \"DepartmentName_IdP_Name_Users\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\ndepartment = zpa.get_zpasaml_attribute(name=\"DepartmentName_IdP_Name_Users\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var department = Zpa.GetZPASAMLAttribute.Invoke(new()\n    {\n        Name = \"DepartmentName_IdP_Name_Users\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetZPASAMLAttribute(ctx, \u0026zpa.GetZPASAMLAttributeArgs{\n\t\t\tName: pulumi.StringRef(\"DepartmentName_IdP_Name_Users\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPASAMLAttributeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var department = ZpaFunctions.getZPASAMLAttribute(GetZPASAMLAttributeArgs.builder()\n            .name(\"DepartmentName_IdP_Name_Users\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  department:\n    fn::invoke:\n      Function: zpa:getZPASAMLAttribute\n      Arguments:\n        name: DepartmentName_IdP_Name_Users\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getZPASAMLAttribute.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the machine group to be exported.\n"
                    },
                    "idpName": {
                        "type": "string",
                        "description": "The name of the IdP corresponding to the SAML attribute.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the saml attribute to be exported.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getZPASAMLAttribute.\n",
                "properties": {
                    "creationTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "idpId": {
                        "type": "string",
                        "description": "(string) The ID of the IdP corresponding to the SAML attribute.\n"
                    },
                    "idpName": {
                        "type": "string"
                    },
                    "modifiedTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "modifiedby": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "samlName": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "userAttribute": {
                        "type": "boolean",
                        "description": "(string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "creationTime",
                    "id",
                    "idpId",
                    "modifiedTime",
                    "modifiedby",
                    "name",
                    "samlName",
                    "userAttribute"
                ]
            }
        },
        "zpa:index/getZPASCIMAttributeHeader:getZPASCIMAttributeHeader": {
            "description": "Use the **zpa_scim_attribute_header** data source to get information about a SCIM attribute from an Identity Provider (IdP). This data source can then be referenced in an Access Policy, Timeout policy, Forwarding Policy, Inspection Policy or Inspection Policy.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst givenName = zpa.getZPASCIMAttributeHeader({\n    idpName: \"IdP_Name\",\n    name: \"name.givenName\",\n});\nconst familyName = zpa.getZPASCIMAttributeHeader({\n    idpName: \"IdP_Name\",\n    name: \"name.familyName\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\ngiven_name = zpa.get_zpascim_attribute_header(idp_name=\"IdP_Name\",\n    name=\"name.givenName\")\nfamily_name = zpa.get_zpascim_attribute_header(idp_name=\"IdP_Name\",\n    name=\"name.familyName\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var givenName = Zpa.GetZPASCIMAttributeHeader.Invoke(new()\n    {\n        IdpName = \"IdP_Name\",\n        Name = \"name.givenName\",\n    });\n\n    var familyName = Zpa.GetZPASCIMAttributeHeader.Invoke(new()\n    {\n        IdpName = \"IdP_Name\",\n        Name = \"name.familyName\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetZPASCIMAttributeHeader(ctx, \u0026zpa.GetZPASCIMAttributeHeaderArgs{\n\t\t\tIdpName: pulumi.StringRef(\"IdP_Name\"),\n\t\t\tName:    pulumi.StringRef(\"name.givenName\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = zpa.GetZPASCIMAttributeHeader(ctx, \u0026zpa.GetZPASCIMAttributeHeaderArgs{\n\t\t\tIdpName: pulumi.StringRef(\"IdP_Name\"),\n\t\t\tName:    pulumi.StringRef(\"name.familyName\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPASCIMAttributeHeaderArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var givenName = ZpaFunctions.getZPASCIMAttributeHeader(GetZPASCIMAttributeHeaderArgs.builder()\n            .idpName(\"IdP_Name\")\n            .name(\"name.givenName\")\n            .build());\n\n        final var familyName = ZpaFunctions.getZPASCIMAttributeHeader(GetZPASCIMAttributeHeaderArgs.builder()\n            .idpName(\"IdP_Name\")\n            .name(\"name.familyName\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  givenName:\n    fn::invoke:\n      Function: zpa:getZPASCIMAttributeHeader\n      Arguments:\n        idpName: IdP_Name\n        name: name.givenName\n  familyName:\n    fn::invoke:\n      Function: zpa:getZPASCIMAttributeHeader\n      Arguments:\n        idpName: IdP_Name\n        name: name.familyName\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getZPASCIMAttributeHeader.\n",
                "properties": {
                    "idpId": {
                        "type": "string",
                        "description": "(string) The ID of the IdP corresponding to the SAML attribute.\n"
                    },
                    "idpName": {
                        "type": "string",
                        "description": "The name of the scim attribute header that must be exported.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the scim attribute header to be exported.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getZPASCIMAttributeHeader.\n",
                "properties": {
                    "canonicalValues": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(string)\n"
                    },
                    "caseSensitive": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "dataType": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "idpId": {
                        "type": "string",
                        "description": "(string) The ID of the IdP corresponding to the SAML attribute.\n"
                    },
                    "idpName": {
                        "type": "string"
                    },
                    "modifiedTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "modifiedby": {
                        "type": "string"
                    },
                    "multivalued": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "mutability": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "required": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "returned": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "schemaUri": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "uniqueness": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "canonicalValues",
                    "caseSensitive",
                    "creationTime",
                    "dataType",
                    "description",
                    "id",
                    "modifiedTime",
                    "modifiedby",
                    "multivalued",
                    "mutability",
                    "required",
                    "returned",
                    "schemaUri",
                    "uniqueness",
                    "values"
                ]
            }
        },
        "zpa:index/getZPASCIMGroups:getZPASCIMGroups": {
            "description": "Use the **zpa_scim_groups** data source to get information about a SCIM Group from an Identity Provider (IdP). This data source can then be referenced in an Access Policy, Timeout policy, Forwarding Policy, Inspection Policy or Isolation Policy.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst engineering = zpa.getZPASCIMGroups({\n    idpName: \"idp_name\",\n    name: \"Engineering\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nengineering = zpa.get_zpascim_groups(idp_name=\"idp_name\",\n    name=\"Engineering\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var engineering = Zpa.GetZPASCIMGroups.Invoke(new()\n    {\n        IdpName = \"idp_name\",\n        Name = \"Engineering\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetZPASCIMGroups(ctx, \u0026zpa.GetZPASCIMGroupsArgs{\n\t\t\tIdpName: pulumi.StringRef(\"idp_name\"),\n\t\t\tName:    pulumi.StringRef(\"Engineering\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPASCIMGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var engineering = ZpaFunctions.getZPASCIMGroups(GetZPASCIMGroupsArgs.builder()\n            .idpName(\"idp_name\")\n            .name(\"Engineering\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  engineering:\n    fn::invoke:\n      Function: zpa:getZPASCIMGroups\n      Arguments:\n        idpName: idp_name\n        name: Engineering\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getZPASCIMGroups.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "idpId": {
                        "type": "integer",
                        "description": "(string) The ID of the IdP corresponding to the SAML attribute.\n"
                    },
                    "idpName": {
                        "type": "string",
                        "description": "Name. The name of the IdP where the scim group must be exported from.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name. The name of the scim group to be exported.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getZPASCIMGroups.\n",
                "properties": {
                    "creationTime": {
                        "type": "integer",
                        "description": "(string)\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "idpGroupId": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "idpId": {
                        "type": "integer",
                        "description": "(string) The ID of the IdP corresponding to the SAML attribute.\n"
                    },
                    "idpName": {
                        "type": "string"
                    },
                    "modifiedTime": {
                        "type": "integer",
                        "description": "(string)\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "creationTime",
                    "idpGroupId",
                    "modifiedTime"
                ]
            }
        },
        "zpa:index/getZPASegmentGroup:getZPASegmentGroup": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst example = zpa.getZPASegmentGroup({\n    name: \"segment_group_name\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nexample = zpa.get_zpa_segment_group(name=\"segment_group_name\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zpa.GetZPASegmentGroup.Invoke(new()\n    {\n        Name = \"segment_group_name\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.LookupZPASegmentGroup(ctx, \u0026zpa.LookupZPASegmentGroupArgs{\n\t\t\tName: pulumi.StringRef(\"segment_group_name\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPASegmentGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZpaFunctions.getZPASegmentGroup(GetZPASegmentGroupArgs.builder()\n            .name(\"segment_group_name\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zpa:getZPASegmentGroup\n      Arguments:\n        name: segment_group_name\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getZPASegmentGroup.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the segment group to be exported.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the segment group to be exported.\n"
                    },
                    "policyMigrated": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getZPASegmentGroup.\n",
                "properties": {
                    "applications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getZPASegmentGroupApplication:getZPASegmentGroupApplication"
                        },
                        "description": "(Computed)\n"
                    },
                    "configSpace": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "modifiedBy": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "modifiedTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "policyMigrated": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "tcpKeepAliveEnabled": {
                        "type": "string",
                        "description": "(string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "applications",
                    "configSpace",
                    "creationTime",
                    "description",
                    "enabled",
                    "modifiedBy",
                    "modifiedTime",
                    "policyMigrated",
                    "tcpKeepAliveEnabled"
                ]
            }
        },
        "zpa:index/getZPAServerGroup:getZPAServerGroup": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst example = zpa.getZPAServerGroup({\n    name: \"server_group_name\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nexample = zpa.get_zpa_server_group(name=\"server_group_name\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zpa.GetZPAServerGroup.Invoke(new()\n    {\n        Name = \"server_group_name\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.LookupZPAServerGroup(ctx, \u0026zpa.LookupZPAServerGroupArgs{\n\t\t\tName: pulumi.StringRef(\"server_group_name\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPAServerGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZpaFunctions.getZPAServerGroup(GetZPAServerGroupArgs.builder()\n            .name(\"server_group_name\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zpa:getZPAServerGroup\n      Arguments:\n        name: server_group_name\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getZPAServerGroup.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the server group to be exported.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the server group to be exported.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getZPAServerGroup.\n",
                "properties": {
                    "appConnectorGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getZPAServerGroupAppConnectorGroup:getZPAServerGroupAppConnectorGroup"
                        },
                        "description": "(string)This field is a json array of app-connector-id only.\n"
                    },
                    "applications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getZPAServerGroupApplication:getZPAServerGroupApplication"
                        }
                    },
                    "configSpace": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "creationTime": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "(string) This field is the description of the server group.\n"
                    },
                    "dynamicDiscovery": {
                        "type": "boolean",
                        "description": "(bool) This field controls dynamic discovery of the servers.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(bool) This field defines if the server group is enabled or disabled.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "ipAnchored": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "modifiedTime": {
                        "type": "string"
                    },
                    "modifiedby": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "servers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getZPAServerGroupServer:getZPAServerGroupServer"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "appConnectorGroups",
                    "applications",
                    "configSpace",
                    "creationTime",
                    "description",
                    "dynamicDiscovery",
                    "enabled",
                    "ipAnchored",
                    "modifiedTime",
                    "modifiedby",
                    "servers"
                ]
            }
        },
        "zpa:index/getZPAServiceEdgeGroup:getZPAServiceEdgeGroup": {
            "description": "Use the **zpa_service_edge_group** data source to get information about a service edge group in the Zscaler Private Access cloud. This data source can then be referenced in an App Connector Group. This data source can then be referenced in the following resources:\n\n* Create a server group\n* Provisioning Key\n* Access policy rule\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst foo = zpa.getZPAServiceEdgeGroup({\n    name: \"DataCenter\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nfoo = zpa.get_zpa_service_edge_group(name=\"DataCenter\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Zpa.GetZPAServiceEdgeGroup.Invoke(new()\n    {\n        Name = \"DataCenter\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.LookupZPAServiceEdgeGroup(ctx, \u0026zpa.LookupZPAServiceEdgeGroupArgs{\n\t\t\tName: pulumi.StringRef(\"DataCenter\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPAServiceEdgeGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = ZpaFunctions.getZPAServiceEdgeGroup(GetZPAServiceEdgeGroupArgs.builder()\n            .name(\"DataCenter\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: zpa:getZPAServiceEdgeGroup\n      Arguments:\n        name: DataCenter\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst foo = zpa.getZPAServiceEdgeGroup({\n    id: \"123456789\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nfoo = zpa.get_zpa_service_edge_group(id=\"123456789\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Zpa.GetZPAServiceEdgeGroup.Invoke(new()\n    {\n        Id = \"123456789\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.LookupZPAServiceEdgeGroup(ctx, \u0026zpa.LookupZPAServiceEdgeGroupArgs{\n\t\t\tId: pulumi.StringRef(\"123456789\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPAServiceEdgeGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = ZpaFunctions.getZPAServiceEdgeGroup(GetZPAServiceEdgeGroupArgs.builder()\n            .id(\"123456789\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: zpa:getZPAServiceEdgeGroup\n      Arguments:\n        id: '123456789'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getZPAServiceEdgeGroup.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the service edge group to be exported.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the service edge group to be exported.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getZPAServiceEdgeGroup.\n",
                "properties": {
                    "cityCountry": {
                        "type": "string",
                        "description": "(string) Whether Double Encryption is enabled or disabled for the app.\n"
                    },
                    "countryCode": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(string) Description of the Service Edge Group.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(bool) Whether this App Connector Group is enabled or not. Default value: `true`. Supported values: `true`, `false`\n"
                    },
                    "geoLocationId": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "isPublic": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "latitude": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "longitude": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "modifiedTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "modifiedby": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "overrideVersionProfile": {
                        "type": "boolean",
                        "description": "(bool) Whether the default version profile of the App Connector Group is applied or overridden. Default: `false` Supported values: `true`, `false`\n"
                    },
                    "serviceEdges": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getZPAServiceEdgeGroupServiceEdge:getZPAServiceEdgeGroupServiceEdge"
                        },
                        "description": "(string)\n"
                    },
                    "trustedNetworks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getZPAServiceEdgeGroupTrustedNetwork:getZPAServiceEdgeGroupTrustedNetwork"
                        },
                        "description": "(string)\n"
                    },
                    "upgradeDay": {
                        "type": "string",
                        "description": "(string) App Connectors in this group will attempt to update to a newer version of the software during this specified day\n"
                    },
                    "upgradeTimeInSecs": {
                        "type": "string",
                        "description": "(string) App Connectors in this group will attempt to update to a newer version of the software during this specified time. Default value: `66600`. Integer in seconds (i.e., `-66600`). The integer should be greater than or equal to `0` and less than `86400`, in `15` minute intervals\n"
                    },
                    "versionProfileId": {
                        "type": "string",
                        "description": "(String) ID of the version profile.\nExported values are:\n"
                    },
                    "versionProfileName": {
                        "type": "string",
                        "description": "(String)\nExported values are:\n"
                    },
                    "versionProfileVisibilityScope": {
                        "type": "string",
                        "description": "(string)\nExported values are:\n"
                    }
                },
                "type": "object",
                "required": [
                    "cityCountry",
                    "countryCode",
                    "creationTime",
                    "description",
                    "enabled",
                    "geoLocationId",
                    "id",
                    "isPublic",
                    "latitude",
                    "location",
                    "longitude",
                    "modifiedTime",
                    "modifiedby",
                    "name",
                    "overrideVersionProfile",
                    "serviceEdges",
                    "trustedNetworks",
                    "upgradeDay",
                    "upgradeTimeInSecs",
                    "versionProfileId",
                    "versionProfileName",
                    "versionProfileVisibilityScope"
                ]
            }
        },
        "zpa:index/getZPATrustedNetwork:getZPATrustedNetwork": {
            "description": "The **zpa_trusted_network** data source to get information about a trusted network created in the Zscaler Private Access Mobile Portal. This data source can then be referenced within the following resources:\n\n1. Access Policy\n2. Forwarding Policy\n3. Inspection Policy\n4. Isolation Policy\n5. Service Edge Group.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst example = zpa.getZPATrustedNetwork({\n    name: \"trusted_network_name\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nexample = zpa.get_zpa_trusted_network(name=\"trusted_network_name\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zpa.GetZPATrustedNetwork.Invoke(new()\n    {\n        Name = \"trusted_network_name\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetZPATrustedNetwork(ctx, \u0026zpa.GetZPATrustedNetworkArgs{\n\t\t\tName: pulumi.StringRef(\"trusted_network_name\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPATrustedNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZpaFunctions.getZPATrustedNetwork(GetZPATrustedNetworkArgs.builder()\n            .name(\"trusted_network_name\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zpa:getZPATrustedNetwork\n      Arguments:\n        name: trusted_network_name\n```\n\n\u003e **NOTE** To query trusted network that are associated with a specific Zscaler cloud, it is required to append the cloud name to the name of the trusted network as the below example:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst example1 = zpa.getZPATrustedNetwork({\n    name: \"Corporate-Network (zscalertwo.net)\",\n});\nexport const zpaTrustedNetwork = example1.then(example1 =\u003e example1.networkId);\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nexample1 = zpa.get_zpa_trusted_network(name=\"Corporate-Network (zscalertwo.net)\")\npulumi.export(\"zpaTrustedNetwork\", example1.network_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example1 = Zpa.GetZPATrustedNetwork.Invoke(new()\n    {\n        Name = \"Corporate-Network (zscalertwo.net)\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"zpaTrustedNetwork\"] = example1.Apply(getZPATrustedNetworkResult =\u003e getZPATrustedNetworkResult.NetworkId),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample1, err := zpa.GetZPATrustedNetwork(ctx, \u0026zpa.GetZPATrustedNetworkArgs{\n\t\t\tName: pulumi.StringRef(\"Corporate-Network (zscalertwo.net)\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"zpaTrustedNetwork\", example1.NetworkId)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetZPATrustedNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example1 = ZpaFunctions.getZPATrustedNetwork(GetZPATrustedNetworkArgs.builder()\n            .name(\"Corporate-Network (zscalertwo.net)\")\n            .build());\n\n        ctx.export(\"zpaTrustedNetwork\", example1.applyValue(getZPATrustedNetworkResult -\u003e getZPATrustedNetworkResult.networkId()));\n    }\n}\n```\n```yaml\nvariables:\n  example1:\n    fn::invoke:\n      Function: zpa:getZPATrustedNetwork\n      Arguments:\n        name: Corporate-Network (zscalertwo.net)\noutputs:\n  zpaTrustedNetwork: ${example1.networkId}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getZPATrustedNetwork.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the posture profile to be exported.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the posture profile to be exported.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getZPATrustedNetwork.\n",
                "properties": {
                    "creationTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "modifiedTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "modifiedby": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "zscalerCloud": {
                        "type": "string",
                        "description": "(string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "creationTime",
                    "domain",
                    "modifiedTime",
                    "modifiedby",
                    "networkId",
                    "zscalerCloud"
                ]
            }
        }
    }
}